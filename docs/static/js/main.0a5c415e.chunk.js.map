{"version":3,"sources":["ImagePicker.tsx","components.tsx","ImageTransform.tsx","ImageTransformList.tsx","domain/types.ts","domain/utils.ts","domain/transforms/params/textParam.tsx","domain/transforms/background-party.ts","domain/transforms/params/floatParam.tsx","domain/transforms/bounce.ts","domain/transforms/circle.ts","domain/transforms/expand.ts","domain/transforms/fisheye.ts","domain/transforms/params/intParam.tsx","domain/transforms/frame-count.ts","domain/transforms/grayscale.ts","domain/transforms/lightning.ts","domain/transforms/party.ts","domain/transforms/resize.ts","domain/transforms/resize-background.ts","domain/transforms/ripple.ts","domain/transforms/params/dropdownParam.tsx","domain/transforms/rotate.ts","domain/transforms/roxbury.ts","domain/transforms/shake.ts","domain/transforms/params/colorPickerParam.tsx","domain/transforms/solid-background.ts","domain/transforms/index.ts","domain/transforms/static.ts","domain/transforms/transparency.ts","domain/transforms/transpose.ts","domain/run.ts","ComputeBox.tsx","App.tsx","index.tsx"],"names":["ImagePicker","currentImageUrl","onChange","className","type","accept","name","event","a","files","Array","from","target","file","readFile","baseImage","src","Promise","resolve","reader","FileReader","onload","result","readAsDataURL","Dropdown","selected","options","React","useState","hidden","setHidden","close","useCallback","document","removeEventListener","title","find","x","value","aria-haspopup","onClick","e","preventDefault","setTimeout","addEventListener","aria-hidden","role","style","visibility","map","href","cn","Expandable","mainEle","children","collapsed","setCollapsed","ImageTransform","image","selectedTransform","possibleTransforms","onSelect","onRemove","onMoveLeft","onMoveRight","transform","t","newTransformName","paramValues","params","p","valid","defaultValue","param","idx","ele","fn","v","i","ImageTransformList","currentTransforms","onTransformsChange","paramsValues","undefined","tIdx","filter","nextT","newIdx","length","nextTIdx","computedImage","display","buildTransform","args","toHexColor","r","g","b","toHexValue","c","s","toString","toUpperCase","fromHexColor","hex","parseInt","substr","isTransparent","pixel","randomColor","random","Math","floor","int32","getAveragePixelValue","round","clampColor","clamp","n","max","min","getPixelFromSource","dimensions","coord","width","height","y","getImageIndex","assert","condition","message","AssertionError","actual","mapFrames","cb","frames","frame","data","mapCoords","transformedImageData","Uint8Array","mapImage","parameters","imageData","frameIndex","frameCount","getSrcPixel","writePixel","color","PARTY_COLORS","backgroundParty","srcPixel","partyColorIdx","FloatParam","parse","val","setVal","invalidText","setInvalidText","onBlur","reason","floatParam","parseFloat","isNaN","bounce","sin","PI","circle","radius","cos","expand","dist","centerX","centerY","xRatio","yRatio","fisheye","expanding","angle","atan2","IntParam","intParam","times","currentFrames","_","grayscale","gray","TextParam","lightningIntensities","lightning","seedrandom","flashIntensity","icf","party","partyColor","resize","newWidth","newHeight","newDimensions","srcX","srcY","resizeBackground","xPadding","yPadding","ripple","amplitude","period","shift","offset","DropdownParam","rotate","dropdownParam","sign","xRelCenter","yRelCenter","amount","roxbury","phase","phaseIdx","maxAngle","rotatePointX","rotatePointY","newCoord","shake","shakeSpeed","ColorPickerParam","backgroundColor","disableAlpha","presetColors","onChangeComplete","colorPickerParam","POSSIBLE_TRANSFORMS","strength","ceil","tolerance","diff0","diff1","diff2","sqrt","transX","transY","runTransforms","inputDataUrl","transformList","fps","readImage","originalImage","images","reduce","transformInput","push","all","newImage","transparentColor","getTransparentColor","encodeTransparency","f","createGif","img","gif","gifEncoder","setFrameRate","setRepeat","setTransparent","writeHeader","on","chunk","dataUrl","URL","createObjectURL","Blob","forEach","addFrame","finish","res","rej","getPixels","err","getPixelResults","shape","hasTransparent","seenPixels","Set","attempt","px","add","findRandomColorNotInSet","set","attempts","col","has","fpsParam","ComputeBox","isDirty","computeDisabled","baseImageUrl","transforms","onComputed","loading","results","state","setState","fpsChanged","setFpsChanged","setFps","buttonDisabled","disabled","transformInputs","gifs","App","dirty","computeBtnDisbled","some","every","paddingTop","rel","alt","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0a5c415e.chunk.js","sourcesContent":["import React from 'react';\n\ninterface ImagePickerProps {\n  currentImageUrl?: string;\n  onChange: (imageUrl: string) => void;\n}\n\nexport const ImagePicker: React.FC<ImagePickerProps> = ({\n  currentImageUrl,\n  onChange,\n}) => (\n  <div className=\"box\">\n    <h3 className=\"title\">Source Image</h3>\n    <div className=\"file block\">\n      <label className=\"file-label\">\n        <input\n          className=\"file-input\"\n          type=\"file\"\n          accept=\"image/png,image/jpg\"\n          name=\"source-png\"\n          onChange={async (event) => {\n            const files = Array.from(event.target.files ?? []);\n            const file = files[0];\n            const baseImage = await readFile(file);\n            onChange(baseImage);\n          }}\n        />\n        <span className=\"file-cta\">\n          <span className=\"file-icon\">\n            <i className=\"fas fa-upload\"></i>\n          </span>\n          <span className=\"file-label\">Choose a source image</span>\n        </span>\n      </label>\n    </div>\n    {currentImageUrl && <img src={currentImageUrl}></img>}\n  </div>\n);\n\nconst readFile = (file: File) =>\n  new Promise<string>((resolve) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result as string);\n    reader.readAsDataURL(file);\n  });\n","import React from 'react';\nimport cn from 'classnames';\n\ninterface DropdownProps {\n  selected: any;\n  options: { name: string; value: any }[];\n  onChange: (value: any) => void;\n}\n\nexport const Dropdown: React.FC<DropdownProps> = ({\n  selected,\n  options,\n  onChange,\n}) => {\n  const [hidden, setHidden] = React.useState(true);\n  const close = React.useCallback(() => {\n    document.removeEventListener('click', close);\n    setHidden(true);\n  }, []);\n  const title = options.find((x) => x.value === selected)?.name ?? '';\n  return (\n    <div className=\"dropdown is-active\">\n      <div className=\"dropdown-trigger\">\n        <button\n          className=\"button\"\n          aria-haspopup=\"true\"\n          onClick={(e) => {\n            e.preventDefault();\n            if (hidden) {\n              setHidden(false);\n              setTimeout(() => document.addEventListener('click', close), 0);\n            } else {\n              close();\n            }\n          }}\n        >\n          <span>{title}</span>\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\"></i>\n          </span>\n        </button>\n      </div>\n      <div\n        className=\"dropdown-menu\"\n        role=\"menu\"\n        style={{ visibility: hidden ? 'hidden' : 'visible' }}\n      >\n        <div className=\"dropdown-content\">\n          {options.map(({ name, value }) => (\n            <a\n              key={value}\n              href=\"#\"\n              className={cn('dropdown-item', {\n                'is-active': selected === value,\n              })}\n              onClick={(e) => {\n                e.preventDefault();\n                close();\n                onChange(value);\n              }}\n            >\n              {name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\ninterface ExpandableProps {\n  mainEle: JSX.Element;\n}\n\nexport const Expandable: React.FC<ExpandableProps> = ({\n  mainEle,\n  children,\n}) => {\n  const [collapsed, setCollapsed] = React.useState(true);\n\n  return (\n    <div>\n      <div className=\"is-clickable\" onClick={() => setCollapsed(!collapsed)}>\n        {mainEle}\n        <span className=\"icon\">\n          <i\n            className={cn(\n              'fas',\n              collapsed ? 'fa-chevron-up' : 'fa-chevron-down'\n            )}\n          ></i>\n        </span>\n      </div>\n      {!collapsed && <div>{children}</div>}\n    </div>\n  );\n};\n","import React from 'react';\nimport { Dropdown } from './components';\n\nimport { ParamFunction, ParamValue, Transform } from './domain/types';\n\ninterface SelectedTransform {\n  transform: Transform<any>;\n  paramValues: ParamValue<any>[];\n}\n\ninterface ImageTransformProps {\n  image?: string;\n  selectedTransform: SelectedTransform;\n  possibleTransforms: Transform<any>[];\n  onSelect: (selected: SelectedTransform) => void;\n  onRemove: () => void;\n  onMoveLeft?: () => void;\n  onMoveRight?: () => void;\n}\n\nexport const ImageTransform: React.FC<ImageTransformProps> = ({\n  image,\n  selectedTransform,\n  possibleTransforms,\n  onSelect,\n  onRemove,\n  onMoveLeft,\n  onMoveRight,\n}) => {\n  return (\n    <div className=\"card\">\n      <div className=\"card-header-title\">\n        <div className=\"columns\">\n          <div className=\"column\">\n            <Dropdown\n              selected={selectedTransform.transform.name}\n              options={possibleTransforms.map((t) => ({\n                name: t.name,\n                value: t.name,\n              }))}\n              onChange={(newTransformName) => {\n                const t = possibleTransforms.find(\n                  (t) => t.name === newTransformName\n                )!;\n                // Reset all the params when you select a new transform\n                onSelect({\n                  transform: t,\n                  paramValues: t.params.map(\n                    (p: ParamFunction<any>): ParamValue<any> => ({\n                      valid: true,\n                      value: p.defaultValue,\n                    })\n                  ),\n                });\n              }}\n            />\n          </div>\n          <div className=\"column columns\">\n            {onMoveLeft && (\n              <div className=\"icon column is-clickable\" onClick={onMoveLeft}>\n                <i className=\"fas fa-chevron-left\" aria-hidden=\"true\"></i>\n              </div>\n            )}\n            {onMoveRight && (\n              <div className=\"icon column is-clickable\" onClick={onMoveRight}>\n                <i className=\"fas fa-chevron-right\" aria-hidden=\"true\"></i>\n              </div>\n            )}\n            <div className=\"icon column is-clickable\" onClick={onRemove}>\n              <i className=\"fas fa-trash\" aria-hidden=\"true\"></i>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"card-content\">\n        {selectedTransform.transform.params.map(\n          // Create elements for each of the parameters for the selectect transform.\n          // Each of these would get an onChange event so we know when the user has\n          //  selected a value.\n          (param: ParamFunction<any>, idx: number) => {\n            const value = selectedTransform.paramValues[idx];\n            const ele = param.fn({\n              value: value.valid ? value.value : param.defaultValue,\n              onChange: (v) => {\n                onSelect({\n                  transform: selectedTransform.transform,\n                  paramValues: selectedTransform.paramValues.map((x, i) => {\n                    if (i === idx) {\n                      return v;\n                    }\n                    return x;\n                  }),\n                });\n              },\n            });\n            return <div key={param.name}>{ele}</div>;\n          }\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport {\n  ParamFunction,\n  ParamValue,\n  Transform,\n  TransformWithParams,\n} from './domain/types';\nimport { ImageTransform } from './ImageTransform';\n\ninterface TransformListProps {\n  currentTransforms: TransformWithParams<any>[];\n  possibleTransforms: Transform<any>[];\n  onTransformsChange: (t: TransformWithParams<any>[]) => void;\n}\n\nexport const ImageTransformList: React.FC<TransformListProps> = ({\n  currentTransforms,\n  possibleTransforms,\n  onTransformsChange,\n}) => (\n  <div className=\"box\">\n    <h3 className=\"title\">Image Transforms</h3>\n    <div className=\"block\">\n      <button\n        className=\"button\"\n        onClick={() =>\n          onTransformsChange([\n            ...currentTransforms,\n            {\n              transform: possibleTransforms[0],\n              paramsValues: possibleTransforms[0].params.map(\n                (p: ParamFunction<any>): ParamValue<any> =>\n                  p.defaultValue !== undefined\n                    ? { valid: true, value: p.defaultValue }\n                    : { valid: false }\n              ),\n            },\n          ])\n        }\n      >\n        New Transform\n      </button>\n    </div>\n    <div className=\"columns\">\n      {currentTransforms.map((t, tIdx) => (\n        <ImageTransform\n          image={undefined}\n          possibleTransforms={possibleTransforms}\n          selectedTransform={{\n            transform: t.transform,\n            paramValues: t.paramsValues,\n          }}\n          onRemove={() =>\n            onTransformsChange(\n              currentTransforms.filter((nextT, newIdx) => newIdx !== tIdx)\n            )\n          }\n          onMoveLeft={\n            tIdx > 0\n              ? () =>\n                  onTransformsChange(\n                    currentTransforms.map((nextT, newIdx) => {\n                      if (newIdx === tIdx - 1) {\n                        // This is the next item in the list\n                        return currentTransforms[newIdx + 1];\n                      } else if (tIdx === newIdx) {\n                        // This is the previous item\n                        return currentTransforms[tIdx - 1];\n                      } else {\n                        return nextT;\n                      }\n                    })\n                  )\n              : undefined\n          }\n          onMoveRight={\n            tIdx < currentTransforms.length - 1\n              ? () =>\n                  onTransformsChange(\n                    currentTransforms.map((nextT, newIdx) => {\n                      if (newIdx === tIdx + 1) {\n                        // This is the previous item in the list\n                        return currentTransforms[newIdx - 1];\n                      } else if (tIdx === newIdx) {\n                        // This is the next item\n                        return currentTransforms[tIdx + 1];\n                      } else {\n                        return nextT;\n                      }\n                    })\n                  )\n              : undefined\n          }\n          onSelect={(selected) =>\n            onTransformsChange(\n              currentTransforms.map((nextT, nextTIdx) => {\n                if (tIdx === nextTIdx) {\n                  // This is the one we just changed\n                  return {\n                    transform: selected.transform,\n                    paramsValues: selected.paramValues,\n                    computedImage: undefined,\n                  };\n                }\n                // Reset all the images if we changed anything\n                return {\n                  transform: nextT.transform,\n                  paramsValues: nextT.paramsValues,\n                  computedImage: undefined,\n                };\n              })\n            )\n          }\n        />\n      ))}\n      <div className=\"box\" style={{ display: 'none' }}>\n        {/* Placeholder, because the last box has no bottom padding */}\n      </div>\n    </div>\n  </div>\n);\n","import seedrandom from 'seedrandom';\n\n/**\n * [R, G, B, A] in values 0 - 255 inclusive\n */\nexport type Color = [number, number, number, number];\n\n/**\n * [x, y]\n */\nexport type Coord = [number, number];\n\n/**\n * [width, height]\n */\nexport type Dimensions = [number, number];\n\n/**\n * A one-dimensional array of pixels.\n * A 3x2 image would contain 24 (6*4) numbers, and would look like this:\n *  [\n *    r1,g1,b1,a1, r2,g2,b2,a2, r3,g3,b3,a3,\n *    r4,g4,b4,a4, r5,g5,b5,a5, r6,g6,b6,a6\n *  ]\n *\n * [0, 0] = index 0\n * [1, 0] = index 4\n * [2, 0] = index 8\n * [0, 1] = index 12\n * [1, 1] = index 16\n * [2, 1] = index 20\n * To get pixel [x, y], do (x + y * width) * 4\n */\nexport type ImageData = Uint8Array;\n\nexport type Frame = {\n  data: ImageData;\n};\n\n/**\n * The results of get-pixels processImage()\n */\nexport interface Image {\n  dimensions: Dimensions;\n  frames: Frame[];\n}\n\nexport type Random = seedrandom.prng;\n\nexport interface TransformFnOpts<Params> {\n  /**\n   * The image we're trying to transform\n   */\n  image: Image;\n\n  /**\n   * Use to generate \"random\" numbers. It's seeded, so that subsequent calls will yield the same value on the same image.\n   */\n  random: Random;\n\n  /**\n   * User-passed in parameters.\n   */\n  parameters: Params;\n}\n\nexport type ParamValue<T> = { valid: true; value: T } | { valid: false };\n\nexport interface Parameter<T> {\n  name: string;\n  defaultValue: T;\n  ele: JSX.Element;\n}\n\nexport interface Params<T> {\n  value: T;\n  onChange: (v: ParamValue<T>) => void;\n}\n\nexport type ParamFunction<T> = {\n  name: string;\n  defaultValue: T;\n  fn: (params: Params<T>) => JSX.Element;\n};\n\nexport type TransformFn<Params> = (opts: TransformFnOpts<Params>) => Image;\n\ntype ParamType<Type> = Type extends ParamFunction<infer X> ? X : never;\n\nexport interface Transform<T extends readonly ParamFunction<any>[]> {\n  name: string;\n  params: T;\n  fn: TransformFn<{ [P in keyof T]: ParamType<T[P]> }>;\n}\n\nexport interface TransformWithParams<T extends readonly ParamFunction<any>[]> {\n  transform: Transform<T>;\n  paramsValues: ParamValue<T>[];\n}\n\nexport interface TransformInput<T extends ParamFunction<any>[]> {\n  transform: Transform<T>;\n  params: T;\n}\n\nexport const buildTransform = <T extends readonly ParamFunction<any>[]>(args: {\n  name: string;\n  params: T;\n  fn: TransformFn<{ [P in keyof T]: ParamType<T[P]> }>;\n}): Transform<T> => ({\n  name: args.name,\n  params: args.params,\n  fn: args.fn,\n});\n","import seedrandom from 'seedrandom';\nimport { AssertionError } from 'assert';\n\nimport {\n  Color,\n  Coord,\n  Dimensions,\n  ImageData,\n  Image,\n  Random,\n  TransformFn,\n  TransformFnOpts,\n} from './types';\n\n/**\n * Converts a Pixel into a hex string like '#00FF00'\n */\nexport const toHexColor = ([r, g, b]: Color) => {\n  const toHexValue = (c: number) => {\n    const s = c.toString(16).toUpperCase();\n    return s.length === 2 ? s : '0' + s;\n  };\n\n  return `#${toHexValue(r)}${toHexValue(g)}${toHexValue(b)}`;\n};\n\nexport const fromHexColor = (hex: string): Color => [\n  parseInt(hex.toUpperCase().substr(1, 2), 16),\n  parseInt(hex.toUpperCase().substr(3, 2), 16),\n  parseInt(hex.toUpperCase().substr(5, 2), 16),\n  255,\n];\n\nexport const isHexColor = (s: string) => /^#[0-9A-F]{6}$/.test(s);\n\nexport const isTransparent = (pixel: Color) => pixel[3] < 64;\n\nexport const randomColor = (random: seedrandom.prng): Color => [\n  Math.floor(random.int32() * 256),\n  Math.floor(random.int32() * 256),\n  Math.floor(random.int32() * 256),\n  255,\n];\n\nexport const getAveragePixelValue = ([r, g, b]: Color) =>\n  Math.round((r + g + b) / 3);\n\nexport const clampColor = ([r, g, b, a]: Color): Color => {\n  const clamp = (n: number) => Math.max(Math.min(n, 255), 0);\n\n  return [clamp(r), clamp(g), clamp(b), clamp(a)];\n};\n\nexport const getPixelFromSource = (\n  dimensions: Dimensions,\n  image: ImageData,\n  coord: Coord\n): Color => {\n  const [width, height] = dimensions;\n  const [x, y] = coord;\n  if (x < 0 || x >= width || y < 0 || y >= height) {\n    return [0, 0, 0, 0]; // Default to transparent if an invalid coordinate\n  }\n\n  const idx = getImageIndex(dimensions, x, y);\n  return [image[idx], image[idx + 1], image[idx + 2], image[idx + 3]];\n};\n\n/**\n * Asserts that a given value is truthy. Uses TypeScript 3.7 assertion types.\n *\n * @example\n * ```ts\n * const foo: string|undefined = getSomeData();\n * asert(foo, 'foo must be defined');\n * console.log(foo.length); // OK\n * ```\n */\nexport function assert(\n  condition: unknown,\n  message = 'Unexpected falsy value'\n): asserts condition {\n  if (!condition) {\n    throw new AssertionError({ message, actual: condition });\n  }\n}\n\n/********** Mapping Utils ***********/\n// Maps all frames from the original image into new frames.\n// Assumes all mapped frames are the same dimension as the original image.\nexport const mapFrames = (\n  image: Image,\n  cb: (\n    imageData: ImageData,\n    frameIndex: number,\n    frameCount: number\n  ) => ImageData\n): Image => {\n  const frames = image.frames.map((frame, idx) => ({\n    data: cb(frame.data, idx, image.frames.length),\n  }));\n  return {\n    dimensions: image.dimensions,\n    frames,\n  };\n};\n\n/**\n * Maps the coordinates in a given shape into an image\n */\nexport const mapCoords = (\n  dimensions: Dimensions,\n  cb: (coord: Coord) => Color\n): ImageData => {\n  const [width, height] = dimensions;\n  const transformedImageData = new Uint8Array(width * height * 4);\n  for (let y = 0; y < height; y += 1) {\n    for (let x = 0; x < width; x += 1) {\n      const c = clampColor(cb([x, y]));\n      const idx = getImageIndex(dimensions, x, y);\n      transformedImageData[idx] = c[0];\n      transformedImageData[idx + 1] = c[1];\n      transformedImageData[idx + 2] = c[2];\n      transformedImageData[idx + 3] = c[3];\n    }\n  }\n  return transformedImageData;\n};\n\n/**\n * Combines mapFrames and mapCoords into one function.\n * Used for transforming each pixel in an image into another pixel.\n */\nexport const mapImage = <T>(\n  cb: (args: {\n    image: Image;\n    dimensions: Dimensions;\n    random: Random;\n    parameters: T;\n    coord: Coord;\n    frameCount: number;\n    frameIndex: number;\n    getSrcPixel: (coord: Coord) => Color;\n  }) => Color\n): TransformFn<T> => {\n  return ({ image, random, parameters }: TransformFnOpts<T>) =>\n    mapFrames(image, (imageData, frameIndex, frameCount) =>\n      mapCoords(image.dimensions, (coord) =>\n        cb({\n          image,\n          dimensions: image.dimensions,\n          random,\n          parameters,\n          coord,\n          frameCount,\n          frameIndex,\n          getSrcPixel: (c: Coord) =>\n            getPixelFromSource(image.dimensions, imageData, c),\n        })\n      )\n    );\n};\n\n/** Create a new array [0, 1, 2, ...N-1] */\nexport const repeat = (times: number): number[] =>\n  [...new Array(times)].map((_, i) => i);\n\nexport const getImageIndex = ([width]: Dimensions, x: number, y: number) =>\n  (x + y * width) * 4;\n\nexport const writePixel = (args: {\n  image: ImageData;\n  dimensions: Dimensions;\n  coord: Coord;\n  color: Color;\n}): void => {\n  const idx = getImageIndex(args.dimensions, args.coord[0], args.coord[1]);\n  args.image[idx] = args.color[0];\n  args.image[idx + 1] = args.color[1];\n  args.image[idx + 2] = args.color[2];\n  args.image[idx + 3] = args.color[3];\n};\n","import React from 'react';\nimport { ParamFunction, ParamValue } from '../../types';\n\nconst TextParam: React.FC<{\n  name: string;\n  value: string;\n  onChange: (v: ParamValue<string>) => void;\n}> = ({ name, value, onChange }) => {\n  const [val, setVal] = React.useState(value);\n\n  return (\n    <div>\n      <label>{name}</label>\n      <br />\n      <input\n        type=\"text\"\n        value={val}\n        name={name}\n        onChange={(e) => setVal(e.target.value)}\n        onBlur={() => onChange({ valid: true, value })}\n      />\n    </div>\n  );\n};\n\nexport const textParam = (args: {\n  name: string;\n  defaultValue: string;\n}): ParamFunction<string> => ({\n  name: args.name,\n  defaultValue: args.defaultValue,\n  fn: (params) => (\n    <TextParam\n      name={args.name}\n      onChange={params.onChange}\n      value={params.value}\n    />\n  ),\n});\n","import { buildTransform } from '../types';\nimport { Color } from '../types';\nimport { mapImage, isTransparent } from '../utils';\n\nconst PARTY_COLORS: Color[] = [\n  [255, 141, 139, 255],\n  [254, 214, 137, 255],\n  [136, 255, 137, 255],\n  [135, 255, 255, 255],\n  [139, 181, 254, 255],\n  [215, 140, 255, 255],\n  [255, 140, 255, 255],\n  [255, 104, 247, 255],\n  [254, 108, 183, 255],\n  [255, 105, 104, 255],\n];\n\nexport const backgroundParty = buildTransform({\n  name: 'Background Party',\n  params: [],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel }) => {\n    const srcPixel = getSrcPixel(coord);\n\n    // Make the transparent parts colorful\n    if (isTransparent(srcPixel)) {\n      const partyColorIdx = Math.floor(\n        (frameIndex / frameCount) * PARTY_COLORS.length\n      );\n      return PARTY_COLORS[partyColorIdx];\n    }\n\n    return srcPixel;\n  }),\n});\n","import React from 'react';\nimport { ParamValue, ParamFunction } from '../../types';\n\ntype ParsedParam<T> =\n  | { valid: true; value: T }\n  | { valid: false; reason: string };\n\nconst FloatParam: React.FC<{\n  name: string;\n  value: number;\n  parse: (s: string) => ParsedParam<number>;\n  onChange: (v: ParamValue<number>) => void;\n}> = ({ name, value, parse, onChange }) => {\n  const [val, setVal] = React.useState(value.toString());\n  const [invalidText, setInvalidText] = React.useState('');\n\n  const onBlur = () => {\n    if (val === value.toString()) {\n      return; // Don't fire an onChange event if things haven't changed\n    }\n    const n = parse(val);\n    if (n.valid) {\n      setInvalidText('');\n    } else {\n      setInvalidText(n.reason);\n    }\n    onChange(n);\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\">{name}</label>\n      <div className=\"control has-icons-left has-icons-right\">\n        <input\n          className=\"input\"\n          type=\"text\"\n          defaultValue={value}\n          onChange={(e) => {\n            setVal(e.target.value);\n          }}\n          onBlur={onBlur}\n        />\n      </div>\n      {invalidText && <p className=\"help is-danger\">{invalidText}</p>}\n    </div>\n  );\n};\n\nexport const floatParam = (args: {\n  name: string;\n  defaultValue: number;\n  min?: number;\n  max?: number;\n}): ParamFunction<number> => ({\n  name: args.name,\n  defaultValue: args.defaultValue,\n  fn: (params) => {\n    const { min, max } = args;\n    const parse = (s: string): ParsedParam<number> => {\n      const n = parseFloat(s);\n      if (isNaN(n)) {\n        return { valid: false, reason: 'Must be a number' };\n      }\n      if (min !== undefined && n < min) {\n        return {\n          valid: false,\n          reason: `Must be greater than or equal to ${min}`,\n        };\n      }\n      if (max !== undefined && n > max) {\n        return { valid: false, reason: `Must be less than or equal to ${max}` };\n      }\n      return { valid: true, value: n };\n    };\n\n    return (\n      <FloatParam\n        name={args.name}\n        parse={parse}\n        onChange={params.onChange}\n        value={params.value}\n      />\n    );\n  },\n});\n","import { buildTransform } from '../types';\nimport { mapImage } from '../utils';\nimport { floatParam } from './params/floatParam';\n\nexport const bounce = buildTransform({\n  name: 'Bounce',\n  params: [\n    floatParam({\n      name: 'Bounce Speed',\n      defaultValue: 5,\n      min: 0,\n    }),\n  ],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel, parameters }) => {\n    const [x, y] = coord;\n    const yOffset =\n      y +\n      Math.round(\n        parameters[0] * Math.sin((frameIndex / frameCount) * 2 * Math.PI)\n      );\n\n    return getSrcPixel([x, yOffset]);\n  }),\n});\n","import { buildTransform } from '../types';\nimport { mapImage } from '../utils';\nimport { floatParam } from './params/floatParam';\n\nexport const circle = buildTransform({\n  name: 'Circle',\n  params: [\n    floatParam({\n      name: 'Radius',\n      defaultValue: 10,\n      min: 0,\n    }),\n  ],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel, parameters }) => {\n    const [radius] = parameters;\n    const [x, y] = coord;\n    const xOffset = Math.round(\n      radius * Math.sin(-2 * Math.PI * (frameIndex / frameCount))\n    );\n    const yOffset = Math.round(\n      radius * Math.cos(-2 * Math.PI * (frameIndex / frameCount))\n    );\n    return getSrcPixel([x + xOffset, y + yOffset]);\n  }),\n});\n","import { buildTransform } from '../types';\nimport { mapImage } from '../utils';\nimport { floatParam } from './params/floatParam';\n\nexport const expand = buildTransform({\n  name: 'Expand',\n  params: [\n    floatParam({\n      name: 'Radius',\n      defaultValue: 10,\n      min: 0,\n    }),\n  ],\n  fn: mapImage(\n    ({\n      dimensions,\n      coord,\n      frameCount,\n      frameIndex,\n      getSrcPixel,\n      parameters,\n    }) => {\n      const idx = frameIndex / frameCount;\n      const dist = Math.cos(idx * 2 * Math.PI) * parameters[0];\n\n      // Kind of follows the same algorithm as resize, except the amount is dynamic\n      const [width, height] = dimensions;\n      const centerX = width / 2;\n      const centerY = height / 2;\n\n      const [x, y] = coord;\n      const xRatio = (x - centerX) / width;\n      const yRatio = (y - centerY) / height;\n\n      const xOffset = Math.floor(dist * xRatio);\n      const yOffset = Math.round(dist * yRatio);\n      return getSrcPixel([x - xOffset, y - yOffset]);\n    }\n  ),\n});\n","import { buildTransform } from '../types';\nimport { mapImage } from '../utils';\nimport { floatParam } from './params/floatParam';\n\n// Probably still needs work -- the inner pixels get all funky still\nexport const fisheye = buildTransform({\n  name: 'Fisheye',\n  params: [floatParam({ name: 'radius', defaultValue: 10, min: 0 })],\n  fn: mapImage(\n    ({\n      dimensions,\n      coord,\n      frameCount,\n      frameIndex,\n      getSrcPixel,\n      parameters,\n    }) => {\n      const idx = frameIndex / frameCount;\n      const expanding = idx < 0.5;\n      const [width, height] = dimensions;\n      const dist = (expanding ? idx : 1 - idx) * parameters[0];\n      const centerX = width / 2;\n      const centerY = height / 2;\n\n      const [x, y] = coord;\n      const angle = Math.atan2(centerY - y, centerX - x);\n\n      const xOffset = Math.round(dist * Math.cos(angle));\n      const yOffset = Math.round(dist * Math.sin(angle));\n      return getSrcPixel([x + xOffset, y + yOffset]);\n    }\n  ),\n});\n","import React from 'react';\nimport { ParamValue, ParamFunction } from '../../types';\n\ntype ParsedParam<T> =\n  | { valid: true; value: T }\n  | { valid: false; reason: string };\n\nconst IntParam: React.FC<{\n  name: string;\n  value: number;\n  parse: (s: string) => ParsedParam<number>;\n  onChange: (v: ParamValue<number>) => void;\n}> = ({ name, value, parse, onChange }) => {\n  const [val, setVal] = React.useState(value.toString());\n  const [invalidText, setInvalidText] = React.useState('');\n\n  const onBlur = () => {\n    if (val === value.toString()) {\n      return; // Don't fire an onChange event if things haven't changed\n    }\n    const n = parse(val);\n    if (n.valid) {\n      setInvalidText('');\n    } else {\n      setInvalidText(n.reason);\n    }\n    onChange(n);\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\">{name}</label>\n      <div className=\"control has-icons-left has-icons-right\">\n        <input\n          className=\"input\"\n          type=\"text\"\n          defaultValue={value}\n          onChange={(e) => {\n            setVal(e.target.value);\n          }}\n          onBlur={onBlur}\n        />\n      </div>\n      {invalidText && <p className=\"help is-danger\">{invalidText}</p>}\n    </div>\n  );\n};\n\nexport const intParam = (args: {\n  name: string;\n  defaultValue: number;\n  min?: number;\n  max?: number;\n}): ParamFunction<number> => ({\n  name: args.name,\n  defaultValue: args.defaultValue,\n  fn: (params) => {\n    const { min, max } = args;\n    const parse = (s: string): ParsedParam<number> => {\n      const n = parseInt(s, 10);\n      if (isNaN(n)) {\n        return { valid: false, reason: 'Must be an integer' };\n      }\n      if (min !== undefined && n < min) {\n        return {\n          valid: false,\n          reason: `Must be greater than or equal to ${min}`,\n        };\n      }\n      if (max !== undefined && n > max) {\n        return { valid: false, reason: `Must be less than or equal to ${max}` };\n      }\n      return { valid: true, value: n };\n    };\n\n    return (\n      <IntParam\n        name={args.name}\n        parse={parse}\n        onChange={params.onChange}\n        value={params.value}\n      />\n    );\n  },\n});\n","import { Frame, buildTransform } from '../types';\nimport { repeat } from '../utils';\nimport { intParam } from './params/intParam';\n\nexport const frameCount = buildTransform({\n  name: 'Frame Count',\n  params: [\n    intParam({\n      name: 'Number of Frames',\n      defaultValue: 10,\n      min: 1,\n    }),\n  ],\n  fn: ({ image, parameters }) => {\n    const [frameCount] = parameters;\n\n    const currentFrames = image.frames;\n\n    // Resulting image will contain frameCount frames.\n    // If the original image had less than that, then we'll copy the last frame until we have enough.\n    // If the original has more frames, then we'll discard the last ones.\n    const frames = repeat(frameCount).map(\n      (i): Frame => ({\n        data: currentFrames[i]\n          ? currentFrames[i].data\n          : currentFrames[currentFrames.length - 1].data,\n      })\n    );\n\n    return {\n      dimensions: image.dimensions,\n      frames,\n    };\n  },\n});\n","import { buildTransform } from '../types';\nimport { mapImage, isTransparent, getAveragePixelValue } from '../utils';\n\nexport const grayscale = buildTransform({\n  name: 'Grayscale',\n  params: [],\n  fn: mapImage(({ coord, getSrcPixel }) => {\n    const srcPixel = getSrcPixel(coord);\n\n    if (isTransparent(srcPixel)) {\n      return [0, 0, 0, 0];\n    }\n\n    const gray = getAveragePixelValue(srcPixel);\n\n    return [gray, gray, gray, 255];\n  }),\n});\n","import { buildTransform } from '../types';\nimport seedrandom from 'seedrandom';\n\nimport { Color } from '../types';\nimport {\n  mapFrames,\n  mapCoords,\n  getPixelFromSource,\n  isTransparent,\n} from '../utils';\nimport { textParam } from './params/textParam';\n\nconst lightningIntensities: Color[] = [\n  [0, 15, 40, 255], // dark color\n  [150, 150, 175, 255],\n  [180, 180, 205, 255],\n  [210, 210, 235, 255],\n];\n\nexport const lightning = buildTransform({\n  name: 'Lightning',\n  params: [\n    textParam({\n      name: 'Random Seed',\n      defaultValue: 'lightning',\n    }),\n  ],\n  fn: ({ image, parameters }) => {\n    const random = seedrandom(parameters[0]);\n    return mapFrames(image, (data) => {\n      const i = random();\n      const flashIntensity = i < 0.9 ? 0 : i < 0.95 ? 1 : i < 0.98 ? 2 : 3;\n\n      return mapCoords(image.dimensions, (coord) => {\n        const src = getPixelFromSource(image.dimensions, data, coord);\n\n        if (isTransparent(src)) {\n          return lightningIntensities[flashIntensity];\n        }\n\n        if (flashIntensity > 0) {\n          // We're flashing, so brighten up the image a little\n          const icf = 1.02 * flashIntensity;\n          return [src[0] * icf, src[1] * icf, src[2] * icf, src[3]];\n        }\n\n        // No lightning\n        return src;\n      });\n    });\n  },\n});\n","import { buildTransform } from '../types';\nimport { Color } from '../types';\nimport { isTransparent, getAveragePixelValue, mapImage } from '../utils';\n\nconst PARTY_COLORS: Color[] = [\n  [255, 141, 139, 255],\n  [254, 214, 137, 255],\n  [136, 255, 137, 255],\n  [135, 255, 255, 255],\n  [139, 181, 254, 255],\n  [215, 140, 255, 255],\n  [255, 140, 255, 255],\n  [255, 104, 247, 255],\n  [254, 108, 183, 255],\n  [255, 105, 104, 255],\n];\n\nexport const party = buildTransform({\n  name: 'Party',\n  params: [],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel }) => {\n    const srcPixel = getSrcPixel(coord);\n\n    if (isTransparent(srcPixel)) {\n      return [0, 0, 0, 0];\n    }\n\n    const partyColorIdx = Math.floor(\n      (frameIndex / frameCount) * PARTY_COLORS.length\n    );\n    const partyColor = PARTY_COLORS[partyColorIdx];\n\n    const gray = getAveragePixelValue(srcPixel);\n\n    return [\n      (gray * partyColor[0]) / 255,\n      (gray * partyColor[1]) / 255,\n      (gray * partyColor[2]) / 255,\n      255,\n    ];\n  }),\n});\n","import { buildTransform, Dimensions } from '../types';\nimport { getImageIndex, getPixelFromSource, writePixel } from '../utils';\nimport { intParam } from './params/intParam';\n\nexport const resize = buildTransform({\n  name: 'Resize',\n  params: [\n    intParam({\n      name: 'Width',\n      defaultValue: 128,\n      min: 1,\n    }),\n    intParam({\n      name: 'Height',\n      defaultValue: 128,\n      min: 1,\n    }),\n  ] as const,\n  fn: ({ image, parameters }) => {\n    const [width, height] = image.dimensions;\n    const [newWidth, newHeight] = parameters;\n    const xRatio = width / newWidth;\n    const yRatio = height / newHeight;\n\n    const newDimensions: Dimensions = [newWidth, newHeight];\n\n    const newFrames = image.frames.map((frame) => {\n      const transformedImageData = new Uint8Array(newWidth * newHeight * 4);\n      for (let y = 0; y < newHeight; y += 1) {\n        for (let x = 0; x < newWidth; x += 1) {\n          // Simple nearest-neighbor image scaling.\n          // Arguably the worst of the scaling algorithms, but it's quick,\n          //  and we're generally dealing with small images anyhow.\n          const srcX = Math.floor(x * xRatio);\n          const srcY = Math.floor(y * yRatio);\n\n          const pixel = getPixelFromSource(image.dimensions, frame.data, [\n            srcX,\n            srcY,\n          ]);\n          writePixel({\n            color: pixel,\n            coord: [x, y],\n            dimensions: newDimensions,\n            image: transformedImageData,\n          });\n        }\n      }\n      return {\n        data: transformedImageData,\n      };\n    });\n\n    return {\n      frames: newFrames,\n      dimensions: [newWidth, newHeight],\n    };\n  },\n});\n","import { buildTransform, Color, Dimensions } from '../types';\nimport { assert, getPixelFromSource, writePixel } from '../utils';\nimport { intParam } from './params/intParam';\n\nexport const resizeBackground = buildTransform({\n  name: 'Resize Background',\n  params: [\n    intParam({ name: 'Width', defaultValue: 128, min: 0 }),\n    intParam({ name: 'Height', defaultValue: 128, min: 0 }),\n  ],\n  fn: ({ image, parameters }) => {\n    const [width, height] = image.dimensions;\n    const [newWidth, newHeight] = parameters;\n    assert(\n      newWidth >= width,\n      'New width for resize-background needs to be greater than or equal to the original'\n    );\n    assert(\n      newHeight >= height,\n      'New height for resize-background needs to be greater than or equal to the original'\n    );\n\n    const newDimensions: Dimensions = [newWidth, newHeight];\n\n    const xPadding = (newWidth - width) / 2;\n    const yPadding = (newHeight - height) / 2;\n\n    const newFrames = image.frames.map((frame) => {\n      const transformedImageData = new Uint8Array(newWidth * newHeight * 4);\n      for (let y = 0; y < newHeight; y += 1) {\n        for (let x = 0; x < newWidth; x += 1) {\n          const pixel: Color =\n            x > xPadding &&\n            x < newWidth - xPadding &&\n            y > yPadding &&\n            y < newHeight - yPadding\n              ? getPixelFromSource(image.dimensions, frame.data, [\n                  x - xPadding,\n                  y - yPadding,\n                ])\n              : [0, 0, 0, 0];\n          writePixel({\n            color: pixel,\n            coord: [x, y],\n            dimensions: newDimensions,\n            image: transformedImageData,\n          });\n        }\n      }\n      return {\n        data: transformedImageData,\n      };\n    });\n\n    return {\n      frames: newFrames,\n      dimensions: newDimensions,\n    };\n  },\n});\n","import { buildTransform } from '../types';\nimport { mapFrames, mapCoords, getPixelFromSource } from '../utils';\nimport { floatParam } from './params/floatParam';\n\nexport const ripple = buildTransform({\n  name: 'Ripple',\n  params: [\n    floatParam({\n      name: 'Amplitude',\n      defaultValue: 10,\n    }),\n    floatParam({\n      name: 'Period',\n      defaultValue: 2,\n      min: 0,\n    }),\n  ],\n  fn: ({ image, parameters }) =>\n    mapFrames(image, (data, frameIndex, frameCount) => {\n      const [amplitude, period] = parameters;\n\n      const height = image.dimensions[1];\n      const shift = (frameIndex / frameCount) * 2 * Math.PI;\n      return mapCoords(image.dimensions, ([x, y]) => {\n        const offset = Math.round(\n          amplitude * Math.sin((y / height) * period * Math.PI + shift)\n        );\n\n        return getPixelFromSource(image.dimensions, data, [x + offset, y]);\n      });\n    }),\n});\n","import React from 'react';\nimport { Dropdown } from '../../../components';\nimport { ParamValue, ParamFunction } from '../../types';\n\nconst DropdownParam: React.FC<{\n  name: string;\n  options: { name: string; value: any }[];\n  value: any;\n  onChange: (v: ParamValue<any>) => void;\n}> = ({ name, options, value, onChange }) => {\n  return (\n    <div>\n      <label>{name}</label>\n      <br />\n      <Dropdown\n        onChange={(value) => onChange({ valid: true, value })}\n        selected={value}\n        options={options}\n      />\n    </div>\n  );\n};\n\nexport function dropdownParam<T>(args: {\n  name: string;\n  options: { name: string; value: T }[];\n  defaultValue: T;\n}): ParamFunction<T> {\n  return {\n    name: args.name,\n    defaultValue: args.defaultValue,\n    fn: (params) => {\n      return (\n        <DropdownParam\n          name={args.name}\n          value={params.value}\n          options={args.options}\n          onChange={params.onChange}\n        />\n      );\n    },\n  };\n}\n","import { mapImage } from '../utils';\nimport { buildTransform, Coord } from '../types';\nimport { dropdownParam } from './params/dropdownParam';\n\nexport const rotate = buildTransform({\n  name: 'Rotate',\n  params: [\n    dropdownParam({\n      name: 'Direction',\n      defaultValue: -1,\n      options: [\n        { name: 'Clockwise', value: -1 },\n        { name: 'Counter-Clockwise', value: 1 },\n      ],\n    }),\n  ],\n  fn: mapImage(\n    ({\n      dimensions,\n      coord,\n      frameCount,\n      frameIndex,\n      getSrcPixel,\n      parameters,\n    }) => {\n      const [sign] = parameters;\n      const centerX = dimensions[0] / 2;\n      const centerY = dimensions[1] / 2;\n      const [x, y] = coord;\n      const xRelCenter = x - centerX;\n      const yRelCenter = y - centerY;\n\n      const amount = (frameIndex / frameCount) * (sign || 1);\n      const cos = Math.cos(2 * Math.PI * amount);\n      const sin = Math.sin(2 * Math.PI * amount);\n\n      const newCoord: Coord = [\n        Math.round(centerX + xRelCenter * cos - yRelCenter * sin),\n        Math.round(centerY + yRelCenter * cos + xRelCenter * sin),\n      ];\n\n      return getSrcPixel(newCoord);\n    }\n  ),\n});\n","import { mapFrames, mapCoords, getPixelFromSource } from '../utils';\nimport { buildTransform, Coord } from '../types';\n\nexport const roxbury = buildTransform({\n  name: 'Roxbury',\n  params: [],\n  fn: ({ image }) =>\n    mapFrames(image, (data, frameIndex, frameCount) => {\n      const idx = frameIndex / frameCount;\n      // 4 phases:\n      //  0 -> freeze\n      //  1 -> rotate clockwise\n      //  2 -> freeze\n      //  3 -> rotate counter-clockwise\n      const phase = Math.floor(idx * 4);\n      const phaseIdx = (idx - phase / 4) * 4;\n\n      const maxAngle = (Math.PI / 2) * 0.2; // 40% of 90 degrees\n\n      const angle =\n        phase === 0\n          ? 0\n          : phase === 1\n          ? phaseIdx * maxAngle // Rotate clockwise\n          : phase === 2\n          ? maxAngle // Freeze!\n          : (1 - phaseIdx) * maxAngle; // Rotate counter-clockwise\n\n      const cos = Math.cos(-angle * 1.35);\n      const sin = Math.sin(-angle * 1.35);\n\n      const rotatePointX = image.dimensions[0] * 0.25;\n      const rotatePointY = image.dimensions[1] * 0.7;\n\n      return mapCoords(image.dimensions, (coord) => {\n        const [x, y] = coord;\n        const xRelCenter = Math.floor(x - rotatePointX + 8 * Math.sin(angle));\n        const yRelCenter = Math.floor(y - rotatePointY + 8 * Math.cos(angle));\n\n        const newCoord: Coord = [\n          Math.round(rotatePointX + xRelCenter * cos - yRelCenter * sin),\n          Math.round(rotatePointY + yRelCenter * cos + xRelCenter * sin),\n        ];\n\n        return getPixelFromSource(image.dimensions, data, newCoord);\n      });\n    }),\n});\n","import { buildTransform } from '../types';\nimport { mapImage } from '../utils';\nimport { floatParam } from './params/floatParam';\n\nexport const shake = buildTransform({\n  name: 'Shake',\n  params: [floatParam({ name: 'Shake Speed', defaultValue: 10, min: 0 })],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel, parameters }) => {\n    const [shakeSpeed] = parameters;\n    const [x, y] = coord;\n    const xOffset =\n      x +\n      Math.round(\n        shakeSpeed * Math.cos((frameIndex / frameCount) * 2 * Math.PI)\n      );\n\n    return getSrcPixel([xOffset, y]);\n  }),\n});\n","import React from 'react';\nimport { SketchPicker } from 'react-color';\nimport { Expandable } from '../../../components';\n\nimport { ParamValue, ParamFunction, Color } from '../../types';\nimport { fromHexColor, toHexColor } from '../../utils';\n\nconst ColorPickerParam: React.FC<{\n  name: string;\n  value: Color;\n  onChange: (v: ParamValue<Color>) => void;\n}> = ({ name, value, onChange }) => {\n  return (\n    <Expandable\n      mainEle={\n        <div className=\"is-flex-direction-column\">\n          {name}\n          <div\n            style={{\n              width: '1.0em',\n              height: '1.0em',\n              backgroundColor: toHexColor(value),\n            }}\n          />\n        </div>\n      }\n    >\n      <SketchPicker\n        disableAlpha={true}\n        presetColors={[]}\n        color={toHexColor(value)}\n        onChangeComplete={(c) =>\n          onChange({ valid: true, value: fromHexColor(c.hex) })\n        }\n      />\n    </Expandable>\n  );\n};\n\nexport function colorPickerParam(args: {\n  name: string;\n  defaultValue: Color;\n}): ParamFunction<Color> {\n  return {\n    name: args.name,\n    defaultValue: args.defaultValue,\n    fn: (params) => (\n      <ColorPickerParam\n        name={args.name}\n        value={params.value}\n        onChange={params.onChange}\n      />\n    ),\n  };\n}\n","import { buildTransform } from '../types';\nimport { mapImage, isTransparent, fromHexColor } from '../utils';\nimport { colorPickerParam } from './params/colorPickerParam';\n\nexport const solidBackground = buildTransform({\n  name: 'Solid Background',\n  params: [\n    colorPickerParam({\n      name: 'Background Color',\n      defaultValue: fromHexColor('#FFFFFF'),\n    }),\n  ],\n  fn: mapImage(({ coord, getSrcPixel, parameters }) => {\n    const [color] = parameters;\n    const p = getSrcPixel(coord);\n    return isTransparent(p) ? color : p;\n  }),\n});\n","import { backgroundParty } from './background-party';\nimport { bounce } from './bounce';\nimport { circle } from './circle';\nimport { expand } from './expand';\nimport { fisheye } from './fisheye';\nimport { frameCount } from './frame-count';\nimport { grayscale } from './grayscale';\nimport { lightning } from './lightning';\nimport { party } from './party';\nimport { resize } from './resize';\nimport { resizeBackground } from './resize-background';\nimport { ripple } from './ripple';\nimport { rotate } from './rotate';\nimport { roxbury } from './roxbury';\nimport { shake } from './shake';\nimport { solidBackground } from './solid-background';\nimport { staticc } from './static';\nimport { transparency } from './transparency';\nimport { transpose } from './transpose';\n\nexport const POSSIBLE_TRANSFORMS = [\n  frameCount,\n  backgroundParty,\n  bounce,\n  circle,\n  expand,\n  fisheye,\n  grayscale,\n  lightning,\n  party,\n  resize,\n  resizeBackground,\n  ripple,\n  rotate,\n  roxbury,\n  shake,\n  solidBackground,\n  staticc,\n  transparency,\n  transpose,\n];\n","import { buildTransform } from '../types';\nimport { mapImage, isTransparent } from '../utils';\nimport { floatParam } from './params/floatParam';\n\nexport const staticc = buildTransform({\n  name: 'Static',\n  params: [floatParam({ name: 'Strength', defaultValue: 10, min: 0 })],\n  fn: mapImage(({ coord, getSrcPixel, parameters, random }) => {\n    const [strength] = parameters;\n    const src = getSrcPixel(coord);\n\n    if (isTransparent(src)) {\n      return [0, 0, 0, 0];\n    }\n\n    const inverse = Math.ceil(random() * strength) > 1;\n\n    return inverse ? [255 - src[0], 255 - src[1], 255 - src[2], src[3]] : src;\n  }),\n});\n","import { buildTransform } from '../types';\nimport { fromHexColor, mapImage } from '../utils';\nimport { colorPickerParam } from './params/colorPickerParam';\nimport { intParam } from './params/intParam';\n\nexport const transparency = buildTransform({\n  name: 'Transparent Color',\n  params: [\n    colorPickerParam({\n      name: 'Transparent Color',\n      defaultValue: fromHexColor('#000000'),\n    }),\n    intParam({\n      name: 'Tolerance',\n      defaultValue: 10,\n      min: 0,\n      max: 100,\n    }),\n  ] as const,\n  fn: mapImage(({ coord, getSrcPixel, parameters }) => {\n    const [color, tolerance] = parameters;\n    const p = getSrcPixel(coord);\n    const diff0 = p[0] - color[0];\n    const diff1 = p[1] - color[1];\n    const diff2 = p[2] - color[2];\n    const diff = Math.sqrt(diff0 * diff0 + diff1 * diff1 + diff2 * diff2);\n    if ((diff / 255) * 100 <= tolerance) {\n      return [p[0], p[1], p[2], 0];\n    }\n    return p;\n  }),\n});\n","import { buildTransform } from '../types';\nimport { mapImage } from '../utils';\nimport { intParam } from './params/intParam';\n\nexport const transpose = buildTransform({\n  name: 'Transpose',\n  params: [\n    intParam({ name: 'X', defaultValue: 0 }),\n    intParam({ name: 'Y', defaultValue: 0 }),\n  ],\n  fn: mapImage(({ coord, getSrcPixel, parameters }) => {\n    const [transX, transY] = parameters;\n    const [x, y] = coord;\n\n    return getSrcPixel([x + transX, y + transY]);\n  }),\n});\n","// @ts-ignore\nimport getPixels from 'get-pixels';\n// @ts-ignore\nimport gifEncoder from 'gif-encoder';\nimport seedrandom from 'seedrandom';\n\nimport { Color, TransformInput, Image, Dimensions, ImageData } from './types';\nimport {\n  toHexColor,\n  getPixelFromSource,\n  randomColor,\n  fromHexColor,\n  isTransparent,\n} from './utils';\n\n// Returns a list of gif data URLs, for each transform\nexport const runTransforms = async (\n  inputDataUrl: string,\n  transformList: TransformInput<any>[],\n  fps: number\n): Promise<string[]> => {\n  const random = seedrandom(inputDataUrl);\n\n  const originalImage = await readImage(inputDataUrl);\n\n  const images: Image[] = [];\n  transformList.reduce((image, transformInput) => {\n    const result = transformInput.transform.fn({\n      image,\n      parameters: transformInput.params,\n      random,\n    });\n    images.push(result);\n    return result;\n  }, originalImage);\n\n  return await Promise.all(\n    images.map(async (newImage) => {\n      const transparentColor = getTransparentColor(newImage, random);\n\n      // Transform any of our transparent pixels to what our gif understands to be transparent\n      const image = encodeTransparency(\n        newImage.frames.map((f) => f.data),\n        transparentColor\n      );\n\n      return await createGif(newImage.dimensions, image, transparentColor, fps);\n    })\n  );\n};\n\n/**\n * Each pixel in our image has an alpha channel, but gifs don't.\n * We transform each pixel that appears transparent to be a designated transparent color.\n */\nconst encodeTransparency = (\n  frames: ImageData[],\n  transparentColor: Color | undefined\n): ImageData[] => {\n  const image = frames.map((frame) => {\n    const img = new Uint8Array(frame.length);\n    for (let i = 0; i < frame.length; i += 4) {\n      if (transparentColor && frame[i + 3] < 128) {\n        // Anything more than halfway transparent is considered transparent\n        img[i] = transparentColor[0];\n        img[i + 1] = transparentColor[1];\n        img[i + 2] = transparentColor[2];\n        img[i + 3] = transparentColor[3];\n      } else {\n        img[i] = frame[i];\n        img[i + 1] = frame[i + 1];\n        img[i + 2] = frame[i + 2];\n        img[i + 3] = 255; // Gifs don't do transparency, I dunno why they take in an alpha value...\n      }\n    }\n    return img;\n  });\n\n  return image;\n};\n\nconst createGif = async (\n  dimensions: Dimensions,\n  frames: ImageData[],\n  transparentColor: Color | undefined,\n  fps: number\n): Promise<string> =>\n  new Promise<string>((resolve) => {\n    const [width, height] = dimensions;\n    const gif = new gifEncoder(width, height);\n\n    gif.setFrameRate(fps);\n    gif.setRepeat(0); // Loop indefinitely\n    if (transparentColor) {\n      gif.setTransparent(toHexColor(transparentColor));\n    }\n\n    // gif.setQuality(10);\n    gif.writeHeader();\n\n    let data: any[] = [];\n    gif.on('data', (chunk: any) => {\n      data.push(chunk);\n    });\n    gif.on('end', () => {\n      const dataUrl = URL.createObjectURL(\n        new Blob(data, { type: 'image/gif' })\n      );\n      resolve(dataUrl);\n    });\n\n    frames.forEach((f) => {\n      gif.addFrame(f);\n    });\n\n    gif.finish();\n  });\n\nconst readImage = (dataUrl: string): Promise<Image> =>\n  new Promise<Image>((res, rej) =>\n    getPixels(\n      dataUrl,\n      (err: Error, getPixelResults: { shape: Dimensions; data: ImageData }) => {\n        if (err) {\n          return rej(err);\n        } else {\n          return res({\n            frames: [\n              {\n                data: Uint8Array.from(getPixelResults.data),\n              },\n            ],\n            dimensions: [getPixelResults.shape[0], getPixelResults.shape[1]],\n          });\n        }\n      }\n    )\n  );\n\nconst getTransparentColor = (\n  image: Image,\n  random: seedrandom.prng\n): Color | undefined => {\n  let hasTransparent = false;\n  const seenPixels = new Set<string>();\n  const [width, height] = image.dimensions;\n  let attempt = toHexColor([0, 255, 0, 255]); // Just start with green for now, since it's a likely candidate\n  image.frames.forEach((frame) => {\n    for (let y = 0; y < height; y += 1) {\n      for (let x = 0; x < width; x += 1) {\n        const px = getPixelFromSource(image.dimensions, frame.data, [x, y]);\n        if (isTransparent(px)) {\n          hasTransparent = true;\n        } else {\n          const hex = toHexColor(px);\n          seenPixels.add(hex);\n          if (hex === attempt) {\n            // Uh oh, can't use our current pick for transparent because it exists in the image already\n            attempt = findRandomColorNotInSet(random, seenPixels);\n          }\n        }\n      }\n    }\n  });\n  return hasTransparent ? fromHexColor(attempt) : undefined;\n};\n\nconst findRandomColorNotInSet = (\n  random: seedrandom.prng,\n  set: Set<string>,\n  attempts = 0\n): string => {\n  const col = toHexColor(randomColor(random));\n  if (attempts > 2000) {\n    // Just give up in order to prevent a stack overflow or something...\n    return col;\n  }\n  return set.has(col)\n    ? findRandomColorNotInSet(random, set, attempts + 1)\n    : col;\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { assert } from './domain/utils';\nimport { runTransforms } from './domain/run';\nimport { TransformInput, TransformWithParams } from './domain/types';\nimport { intParam } from './domain/transforms/params/intParam';\n\ninterface ComputeBoxProps {\n  isDirty: boolean;\n  computeDisabled: boolean;\n  baseImageUrl?: string;\n  transforms: TransformWithParams<any>[];\n  onComputed: () => void;\n}\n\ntype ComputeState = { loading: false; results: string[] } | { loading: true };\n\nconst DEFAULT_FPS = 20;\nconst fpsParam = intParam({\n  name: 'Frames per Second',\n  defaultValue: DEFAULT_FPS,\n  min: 0,\n});\n\nexport const ComputeBox: React.FC<ComputeBoxProps> = ({\n  isDirty,\n  computeDisabled,\n  baseImageUrl,\n  transforms,\n  onComputed,\n}) => {\n  const [state, setState] = React.useState<ComputeState>({\n    loading: false,\n    results: [],\n  });\n  const [fpsChanged, setFpsChanged] = React.useState(false);\n  const [fps, setFps] = React.useState(DEFAULT_FPS);\n\n  const buttonDisabled = computeDisabled && !fpsChanged;\n\n  return (\n    <div className=\"box\">\n      <h3 className=\"title\">Create Gif</h3>\n      <div className=\"block\">\n        {fpsParam.fn({\n          value: fps,\n          onChange: (x) => {\n            if (x.valid) {\n              setFps(x.value);\n              setFpsChanged(true);\n            }\n          },\n        })}\n      </div>\n      <div className=\"block\">\n        <button\n          className={cn('button', 'block', { 'is-loading': state.loading })}\n          disabled={buttonDisabled}\n          onClick={async () => {\n            const transformInputs = transforms.map(\n              (t): TransformInput<any> => ({\n                transform: t.transform,\n                params: t.paramsValues.map((p) => {\n                  assert(p.valid);\n                  return p.value;\n                }),\n              })\n            );\n            setState({ loading: true });\n            setTimeout(async () => {\n              assert(\n                baseImageUrl,\n                'No source image, this button should be disabled!'\n              );\n              const gifs = await runTransforms(\n                baseImageUrl,\n                transformInputs,\n                fps\n              );\n              setState({\n                loading: false,\n                results: gifs,\n              });\n              setFpsChanged(false);\n              onComputed();\n            });\n          }}\n        >\n          <span>Compute</span>{' '}\n          {(isDirty || fpsChanged) && (\n            <span className=\"icon is-small\">\n              <i className=\"fas fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            </span>\n          )}\n        </button>\n      </div>\n      <div className=\"block\">\n        <div className=\"columns\">\n          {!state.loading &&\n            state.results.map((gif, idx) => (\n              <div className=\"column\">\n                <div>{transforms[idx].transform.name}</div>\n                <img src={gif}></img>\n              </div>\n            ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { ParamFunction, ParamValue, Transform } from './domain/types';\nimport { ImagePicker } from './ImagePicker';\nimport { ImageTransformList } from './ImageTransformList';\nimport { POSSIBLE_TRANSFORMS } from './domain/transforms';\nimport { ComputeBox } from './ComputeBox';\n\nconst DEBUG = false;\n\ntype AppState = {\n  baseImage?: string;\n  transforms: {\n    transform: Transform<any>;\n    paramsValues: ParamValue<any>[];\n    computedImage?: string;\n  }[];\n  dirty: boolean;\n};\n\nexport const App: React.FC = () => {\n  const [state, setState] = React.useState<AppState>({\n    dirty: false,\n    transforms: [],\n    baseImage: undefined,\n  });\n\n  const computeBtnDisbled =\n    !state.baseImage ||\n    state.transforms.length === 0 ||\n    !state.dirty ||\n    state.transforms.some((t) => {\n      const params = t.transform.params as ParamFunction<any>[];\n      return (\n        params.length > 0 && t.paramsValues.every((p, i) => p.valid === false)\n      );\n    });\n\n  return (\n    <section>\n      <div className=\"container\">\n        <h1 className=\"title\" style={{ paddingTop: '16px' }}>\n          Partymoji\n        </h1>\n        <div>\n          <ImagePicker\n            currentImageUrl={state.baseImage}\n            onChange={(baseImage) => {\n              setState({\n                ...state,\n                baseImage,\n                dirty: true,\n              });\n            }}\n          />\n          <ImageTransformList\n            currentTransforms={state.transforms}\n            possibleTransforms={POSSIBLE_TRANSFORMS}\n            onTransformsChange={(transforms) =>\n              setState({\n                ...state,\n                dirty: true,\n                transforms,\n              })\n            }\n          />\n          <ComputeBox\n            isDirty={state.dirty}\n            baseImageUrl={state.baseImage}\n            computeDisabled={computeBtnDisbled}\n            transforms={state.transforms}\n            onComputed={() =>\n              setState({\n                ...state,\n                dirty: false,\n              })\n            }\n          />\n          {DEBUG && (\n            <div>\n              <code>{JSON.stringify(state, null, 2)}</code>\n            </div>\n          )}\n          <a\n            href=\"https://github.com/MikeyBurkman/partymoji\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <img\n              src=\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\"\n              width={64}\n              height={64}\n              alt=\"Github Link\"\n            ></img>\n          </a>\n        </div>\n      </div>\n    </section>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}