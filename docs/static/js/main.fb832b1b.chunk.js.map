{"version":3,"sources":["domain/utils.ts","domain/types.ts","components/HelpTooltip.tsx","params/intParam.tsx","params/sliderParam.tsx","transforms/adjust-image.ts","components/Expandable.tsx","params/colorPickerParam.tsx","transforms/background-color.ts","components/ImagePicker.tsx","params/radioParam.tsx","transforms/background-image.ts","params/imagePickerParam.tsx","transforms/bounce.ts","transforms/bounce-animation.ts","transforms/circle.ts","params/variableLengthParam.tsx","transforms/colors.ts","transforms/colors-background.ts","params/floatParam.tsx","transforms/double-vision.ts","transforms/expand.ts","transforms/fill.ts","transforms/fisheye.ts","transforms/grid.ts","params/huePickerParam.tsx","transforms/hue-change.ts","params/textParam.tsx","transforms/hue-shift.ts","transforms/hue-shift-pulse.ts","transforms/hue-wave.ts","transforms/lightning.ts","transforms/nuke.ts","transforms/party.ts","transforms/party-two.ts","transforms/pinwheel.ts","transforms/pinwheel-party.ts","transforms/radiance.ts","transforms/radiance-party.ts","transforms/reduce-color-palette.ts","transforms/repeat-animation.ts","transforms/resize-image.ts","transforms/reverse-animation.ts","transforms/ripple.ts","transforms/rotate.ts","transforms/roxbury.ts","transforms/shake.ts","transforms/slow-animation.ts","transforms/spin.ts","transforms/static.ts","params/checkboxParam.tsx","transforms/transparency.ts","transforms/transpose.ts","transforms/index.ts","domain/run.ts","domain/transform.worker.ts","domain/runAsync.ts","components/ComputeBox.tsx","components/ImageTransform.tsx","components/ImageTransformList.tsx","components/ImportExport.tsx","localStorage.ts","App.tsx","components/TopLevelErrorBoundary.tsx","index.tsx"],"names":["toHexColor","r","g","b","toHexValue","c","s","toString","toUpperCase","length","fromHexColor","hex","parseInt","substr","isTransparent","pixel","randomColor","random","Math","floor","int32","clamp","n","min","max","clampColor","a","TRANSPARENT_COLOR","getPixelFromSource","dimensions","image","coord","width","height","x","y","idx","getImageIndex","assert","condition","message","AssertionError","actual","mapFrames","cb","frames","map","frame","mapCoords","transformedImageData","Uint8Array","mapImage","parameters","imageData","frameIndex","frameCount","animationProgress","getSrcPixel","mapImageWithPrecompute","compute","computed","scaleImage","args","newWidth","newHeight","xRatio","yRatio","newImage","createNewImage","srcX","srcY","color","getPixel","setPixel","resizeImage","sourceWidth","sourceHeight","xPadding","round","yPadding","range","weightedValue","percent","v1","v2","shiftTowardsHue","hue","amount","convert","hsl","l","rgb","newR","newG","newB","shiftHue","h","calculateAngle","c1","c2","xRelCenter","yRelCenter","atan2","PI","colorFromHue","adjustSaturation","newSat","abs","colorDiff","deltaRed","deltaBlue","deltaGreen","rSomething","rComponent","bComponent","gComponent","sqrt","changeFrameCount","currentFrames","i","frameToCopy","buildTransform","name","params","description","fn","disabled","HelpTooltip","Tooltip","title","Icon","fontSize","IntParam","value","parse","onChange","React","useState","undefined","val","setVal","invalidText","setInvalidText","Stack","spacing","direction","Typography","variant","FormControl","TextField","error","onBlur","valid","reason","e","target","FormHelperText","intParam","defaultValue","isNaN","SliderParam","step","sx","paddingLeft","paddingRight","Slider","aria-label","valueLabelDisplay","getAriaValueText","sliderParam","adjustImage","resizeToWidth","resizeToHeight","brightness","contrast","saturation","hasFrameCount","oldWidth","oldHeight","hasScaleChange","ceil","isBiggerImage","currImage","currColor","d","adjustBrightness","adjustContrast","Expandable","mainEle","children","collapsed","setCollapsed","ClickAwayListener","onClickAway","Box","Button","onClick","style","textTransform","Collapse","in","ColorBox","backgroundColor","ColorPickerParam","disableAlpha","presetColors","onChangeComplete","colorPickerParam","p","ImagePicker","currentImageUrl","startIcon","maxWidth","component","type","hidden","accept","event","files","Array","from","file","readFile","baseImage","maxHeight","src","alt","Promise","resolve","reader","FileReader","onload","result","readAsDataURL","RadioParam","options","RadioGroup","t","FormControlLabel","control","Radio","label","radioParam","backgroundImage","dataUrl","readImage","imagePickerParam","otherImagePreResize","otherImage","otherImageFrame","otherImageSrc","bounce","speed","yOffset","sin","bounceAnimation","concat","pipe","drop","reverse","circle","radius","xOffset","cos","VariableLengthParam","newParamText","createNewParam","v","param","pValue","setParams","Paper","ele","newValue","oldP","IconButton","newParams","filter","visibility","variableLengthParam","DEFAULT_COLORS","colors","chosenColor","srcPixel","gray","getAveragePixelValue","colorsBackground","bgColor","FloatParam","floatParam","parseFloat","doubleVision","dir","expand","dist","centerX","centerY","fill","fisheye","angle","grid","gridSize","gridAngle","isOnGrid","threshold","onGrid","angleDegrees","tan","toRad","degrees","HuePickerParam","hexColor","huePickerParam","hueChange","newHue","hueShift","hueShiftPulse","hueWave","shift","amplitude","period","TextParam","lightningIntensities","lightning","seed","seedrandom","data","flashIntensity","icf","nuke","party","shiftSpeed","isBackground","newH","partyTwo","pinwheel","groupCount","ribbonCount","ribbonArcDegrees","colorsLength","toFixed","slice","offsetX","offsetY","center","pointAngle","colorIdx","pinwheelParty","radiance","colorList","flatMap","maxDist","distFromCenter","radianceParty","reduceColorPalette","percentReduction","allColorsSet","Set","px","add","allColors","numColors","colorMap","numClosestColors","closestColorIdx","closetsColorDist","k","colorPalette","sortBy","minBy","top","repeatAnimation","numRepeats","resizeImageUtil","reverseAnimation","ripple","rotate","roxbury","phase","phaseIdx","maxAngle","rotatePointX","rotatePointY","shake","slowAnimation","ogFrameIdx","r1","g1","b1","a1","spin","staticc","strength","inverse","grey","isStatic","CheckboxParam","paddingTop","Checkbox","checked","transparency","checkboxParam","matchesTransparent","selectedColor","tolerance","withinTolerance","transpose","POSSIBLE_TRANSFORMS","reject","transformByName","find","runTransforms","originalImage","transformList","inputDataUrl","fps","currentImage","transformInput","transform","transformName","transparentColor","getTransparentColor","encodeTransparency","createGif","gif","newFrames","img","gifEncoder","setFrameRate","setRepeat","writeHeader","setTransparent","on","chunk","push","URL","createObjectURL","Blob","forEach","f","addFrame","finish","res","rej","getPixels","err","results","shape","numFrames","sliceSize","subarray","hasTransparent","seenPixels","attempt","findRandomColorNotInSet","set","attempts","col","has","Worker_fn","Worker","runTransformsAsync","worker","RunTransformWorker","addEventListener","onmessage","status","postMessage","ENV","window","fpsParam","ComputeBox","computeDisabled","appState","onFpsChange","onComputed","loading","computeTime","computeState","setComputeState","progress","setProgress","endIcon","dirty","transformInputs","transforms","paramsValues","start","Date","now","timings","timingValue","ga","hitType","timingCategory","timingVar","console","stack","CircularProgress","LinearProgress","Divider","Grid","container","padding","columns","xs","sm","md","item","ImageTransform","selectedTransform","possibleTransforms","index","onSelect","onRemove","onMoveLeft","onMoveRight","elevation","fullWidth","Autocomplete","disableClearable","newTransformName","paramValues","renderInput","divider","Fragment","ImageTransformList","currentTransforms","onTransformsChange","rowSpacing","tIdx","nextT","newIdx","selected","nextTIdx","computedImage","ImportExport","state","onImport","info","setInfo","isInvalid","setInvalid","showError","setTimeout","output","lz","JSON","stringify","navigator","clipboard","writeText","readText","clipboardContents","isArray","Alert","severity","LOCAL_STORAGE_KEY","clearAppState","localStorage","removeItem","DEBUG","DEFAULT_STATE","App","setStateRaw","useEffect","stored","getItem","savedState","setState","newState","setItem","computeBtnDisbled","some","every","ScopedCssBaseline","Container","justifyContent","pt","href","rel","TopLevelErrorBoundary","hasError","errorInfo","this","props","onClearLocalStorage","Component","ReactDOM","render","StrictMode","location","reload","document","getElementById"],"mappings":"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","file":"static/js/main.fb832b1b.chunk.js","sourcesContent":["import { AssertionError } from 'assert';\nimport * as convert from 'color-convert';\nimport { range } from 'remeda';\nimport seedrandom from 'seedrandom';\nimport {\n  Color,\n  Coord,\n  Dimensions,\n  Image,\n  ImageData,\n  Random,\n  TransformFn,\n  TransformFnOpts,\n} from './types';\n\n/**\n * Converts a Pixel into a hex string like '#00FF00'\n */\nexport const toHexColor = ([r, g, b]: Color) => {\n  const toHexValue = (c: number) => {\n    const s = c.toString(16).toUpperCase();\n    return s.length === 2 ? s : '0' + s;\n  };\n\n  return `#${toHexValue(r)}${toHexValue(g)}${toHexValue(b)}`;\n};\n\nexport const fromHexColor = (hex: string): Color => [\n  parseInt(hex.toUpperCase().substr(1, 2), 16),\n  parseInt(hex.toUpperCase().substr(3, 2), 16),\n  parseInt(hex.toUpperCase().substr(5, 2), 16),\n  255,\n];\n\nexport const isHexColor = (s: string) => /^#[0-9A-F]{6}$/.test(s);\n\n/**\n * Our transformation functions allow for an alpha channel, but gifs do not.\n * All pixels are either fully solid or fully transparent.\n * This function returns true if the color's alpha is below a certain threshold.\n */\nexport const isTransparent = (pixel: Color) => pixel[3] < 64;\n\nexport const randomColor = (random: seedrandom.prng): Color => [\n  Math.floor(random.int32() * 256),\n  Math.floor(random.int32() * 256),\n  Math.floor(random.int32() * 256),\n  255,\n];\n\nexport const getAveragePixelValue = ([r, g, b]: Color) =>\n  Math.round((r + g + b) / 3);\n\nexport const clamp = (n: number, min: number, max: number) =>\n  Math.max(Math.min(n, max), min);\n\nexport const clampColor = ([r, g, b, a]: Color): Color => [\n  clamp(r, 0, 255),\n  clamp(g, 0, 255),\n  clamp(b, 0, 255),\n  clamp(a, 0, 255),\n];\n\nexport const TRANSPARENT_COLOR: Color = [0, 0, 0, 0];\n\nexport const getPixelFromSource = (\n  dimensions: Dimensions,\n  image: ImageData,\n  coord: Coord\n): Color => {\n  const [width, height] = dimensions;\n  const [x, y] = coord;\n  if (x < 0 || x >= width || y < 0 || y >= height) {\n    return TRANSPARENT_COLOR; // Default to transparent if an invalid coordinate\n  }\n\n  const idx = getImageIndex(dimensions, x, y);\n  return [image[idx], image[idx + 1], image[idx + 2], image[idx + 3]];\n};\n\n/**\n * Asserts that a given value is truthy. Uses TypeScript 3.7 assertion types.\n *\n * @example\n * ```ts\n * const foo: string|undefined = getSomeData();\n * asert(foo, 'foo must be defined');\n * console.log(foo.length); // OK\n * ```\n */\nexport function assert(\n  condition: unknown,\n  message = 'Unexpected falsy value'\n): asserts condition {\n  if (!condition) {\n    throw new AssertionError({ message, actual: condition });\n  }\n}\n\n/********** Mapping Utils ***********/\n// Maps all frames from the original image into new frames.\n// Assumes all mapped frames are the same dimension as the original image.\nexport const mapFrames = (\n  image: Image,\n  cb: (\n    imageData: ImageData,\n    frameIndex: number,\n    frameCount: number\n  ) => ImageData\n): Image => ({\n  dimensions: image.dimensions,\n  frames: image.frames.map((frame, idx) => cb(frame, idx, image.frames.length)),\n});\n\n/**\n * Maps the coordinates in a given shape into an image\n */\nexport const mapCoords = (\n  dimensions: Dimensions,\n  cb: (coord: Coord) => Color\n): ImageData => {\n  const [width, height] = dimensions;\n  const transformedImageData = new Uint8Array(width * height * 4);\n  for (let y = 0; y < height; y += 1) {\n    for (let x = 0; x < width; x += 1) {\n      const c = clampColor(cb([x, y]));\n      const idx = getImageIndex(dimensions, x, y);\n      transformedImageData[idx] = c[0];\n      transformedImageData[idx + 1] = c[1];\n      transformedImageData[idx + 2] = c[2];\n      transformedImageData[idx + 3] = c[3];\n    }\n  }\n  return transformedImageData;\n};\n\n/**\n * Combines mapFrames and mapCoords into one function.\n * Used for transforming each pixel in an image into another pixel.\n */\nexport const mapImage = <T>(\n  cb: (args: {\n    image: Image;\n    dimensions: Dimensions;\n    random: Random;\n    parameters: T;\n    coord: Coord;\n    frameCount: number;\n    frameIndex: number;\n    /** Between 0 and 1 */\n    animationProgress: number;\n    getSrcPixel: (coord: Coord) => Color;\n  }) => Color\n): TransformFn<T> => {\n  return ({ image, random, parameters }: TransformFnOpts<T>) =>\n    mapFrames(image, (imageData, frameIndex, frameCount) =>\n      mapCoords(image.dimensions, (coord) =>\n        cb({\n          image,\n          dimensions: image.dimensions,\n          random,\n          parameters,\n          coord,\n          frameCount,\n          frameIndex,\n          animationProgress: frameIndex / frameCount,\n          getSrcPixel: (c: Coord) =>\n            getPixelFromSource(image.dimensions, imageData, c),\n        })\n      )\n    );\n};\n\n/**\n * Similar to mapImage, but the first argument pre-computes some things for\n *  each frame, which is then passed to the second callback function.\n * This is useful for performance (only compute things every frame rather than every pixel),\n *  and also allows you to generate some random value that will be the same for every frame.\n */\nexport const mapImageWithPrecompute = <T, R>(\n  compute: (args: {\n    image: Image;\n    dimensions: Dimensions;\n    random: Random;\n    parameters: T;\n    frameCount: number;\n    frameIndex: number;\n    /** Between 0 and 1 */\n    animationProgress: number;\n  }) => R,\n  cb: (args: {\n    computed: R;\n    image: Image;\n    dimensions: Dimensions;\n    random: Random;\n    parameters: T;\n    coord: Coord;\n    frameCount: number;\n    frameIndex: number;\n    /** Between 0 and 1 */\n    animationProgress: number;\n    getSrcPixel: (coord: Coord) => Color;\n  }) => Color\n): TransformFn<T> => {\n  return ({ image, random, parameters }: TransformFnOpts<T>) =>\n    mapFrames(image, (imageData, frameIndex, frameCount) => {\n      const animationProgress = frameIndex / frameCount;\n      const computed = compute({\n        image,\n        dimensions: image.dimensions,\n        random,\n        parameters,\n        frameCount,\n        frameIndex,\n        animationProgress,\n      });\n\n      return mapCoords(image.dimensions, (coord) =>\n        cb({\n          computed,\n          image,\n          dimensions: image.dimensions,\n          random,\n          parameters,\n          coord,\n          frameCount,\n          frameIndex,\n          animationProgress,\n          getSrcPixel: (c: Coord) =>\n            getPixelFromSource(image.dimensions, imageData, c),\n        })\n      );\n    });\n};\n\nexport const getImageIndex = ([width]: Dimensions, x: number, y: number) =>\n  (x + y * width) * 4;\n\n/**\n * Change the dimensions of the image, scaling it to make it fit the new dimensions\n */\nexport const scaleImage = (args: {\n  image: Image;\n  newWidth: number;\n  newHeight: number;\n}): Image => {\n  const { image, newWidth, newHeight } = args;\n  const [width, height] = image.dimensions;\n  const xRatio = width / newWidth;\n  const yRatio = height / newHeight;\n\n  const newImage = createNewImage({\n    dimensions: [newWidth, newHeight],\n    frameCount: image.frames.length,\n  });\n\n  for (\n    let frameIndex = 0;\n    frameIndex < newImage.frames.length;\n    frameIndex += 1\n  ) {\n    for (let y = 0; y < newHeight; y += 1) {\n      for (let x = 0; x < newWidth; x += 1) {\n        // Simple nearest-neighbor image scaling.\n        // Arguably the worst of the scaling algorithms, but it's quick,\n        //  and we're generally dealing with small images anyhow.\n        const srcX = Math.floor(x * xRatio);\n        const srcY = Math.floor(y * yRatio);\n\n        const color = getPixel({\n          image,\n          frameIndex,\n          coord: [srcX, srcY],\n        });\n        setPixel({\n          image: newImage,\n          frameIndex,\n          color,\n          coord: [x, y],\n        });\n      }\n    }\n  }\n\n  return newImage;\n};\n\n/**\n * Will change the image dimensions without altering the scale.\n * If the new dimensions are larger, the image will be centered.\n * If the new dimensions are smaller, it'll be cropped\n */\nexport const resizeImage = ({\n  image,\n  newWidth,\n  newHeight,\n}: {\n  image: Image;\n  newWidth: number;\n  newHeight: number;\n}): Image => {\n  const [sourceWidth, sourceHeight] = image.dimensions;\n\n  const xPadding = Math.round((newWidth - sourceWidth) / 2);\n  const yPadding = Math.round((newHeight - sourceHeight) / 2);\n\n  const newImage = createNewImage({\n    dimensions: [newWidth, newHeight],\n    frameCount: image.frames.length,\n  });\n\n  for (\n    let frameIndex = 0;\n    frameIndex < newImage.frames.length;\n    frameIndex += 1\n  ) {\n    for (let y = 0; y < newHeight; y += 1) {\n      for (let x = 0; x < newWidth; x += 1) {\n        const color: Color =\n          x > xPadding &&\n          x < newWidth - xPadding &&\n          y > yPadding &&\n          y < newHeight - yPadding\n            ? getPixel({\n                image,\n                frameIndex,\n                coord: [x - xPadding, y - yPadding],\n              })\n            : TRANSPARENT_COLOR;\n        setPixel({\n          image: newImage,\n          frameIndex,\n          coord: [x, y],\n          color,\n        });\n      }\n    }\n  }\n\n  return newImage;\n};\n\nexport const createNewImage = (args: {\n  frameCount: number;\n  dimensions: Dimensions;\n}): Image => ({\n  dimensions: args.dimensions,\n  frames: range(0, args.frameCount).map(\n    // 4 == bytes used per color (RGBA)\n    () => new Uint8Array(args.dimensions[0] * args.dimensions[1] * 4)\n  ),\n});\n\nexport const duplicateImage = (image: Image): Image => ({\n  dimensions: image.dimensions,\n  frames: image.frames.map((f) => new Uint8Array(f)),\n});\n\nexport const getPixel = (args: {\n  image: Image;\n  frameIndex: number;\n  coord: Coord;\n}) =>\n  getPixelFromSource(\n    args.image.dimensions,\n    args.image.frames[args.frameIndex],\n    args.coord\n  );\n\nexport const setPixel = (args: {\n  image: Image;\n  frameIndex: number;\n  coord: Coord;\n  color: Color;\n}) => {\n  const idx = getImageIndex(\n    args.image.dimensions,\n    args.coord[0],\n    args.coord[1]\n  );\n  const frame = args.image.frames[args.frameIndex];\n  frame[idx] = args.color[0];\n  frame[idx + 1] = args.color[1];\n  frame[idx + 2] = args.color[2];\n  frame[idx + 3] = args.color[3];\n};\n\n/**\n * Calculate a value between v1 and v2, determined by percent.\n * @param percent Between 0 and 100. 0 is all v1, and 100 is all v2.\n */\nexport const weightedValue = (percent: number, v1: number, v2: number) =>\n  (1 - percent / 100) * v1 + (percent / 100) * v2;\n\n/**\n * Shift the hue of the pixel towards a certain color, by a certain amount percentage\n * @param hue [0, 360)\n * @param amount [0, 100]\n */\nexport const shiftTowardsHue = (\n  [r, g, b, a]: Color,\n  hue: number,\n  amount: number\n): Color => {\n  const [, s, l] = convert.rgb.hsl([r, g, b]);\n  const [newR, newG, newB] = convert.hsl.rgb([\n    hue,\n    weightedValue(amount, s, 100),\n    l,\n  ]);\n  return [\n    weightedValue(amount, r, newR),\n    weightedValue(amount, g, newG),\n    weightedValue(amount, b, newB),\n    a,\n  ];\n};\n\n/**\n * Adds the given amount to the hue of the color.\n * Amount should be between 0 and 360\n */\nexport const shiftHue = ([r, g, b, a]: Color, amount: number): Color => {\n  const [h, s, l] = convert.rgb.hsl([r, g, b]);\n  const [newR, newG, newB] = convert.hsl.rgb([(h + amount) % 360, s, l]);\n  return [newR, newG, newB, a];\n};\n\n/**\n * Returns the angle in degrees (0 to 360) betwee the two coordinates\n */\nexport const calculateAngle = (c1: Coord, c2: Coord): number => {\n  const xRelCenter = c2[0] - c1[0];\n  const yRelCenter = c2[1] - c1[1];\n  return (360 + (Math.atan2(yRelCenter, xRelCenter) * 180) / Math.PI) % 360;\n};\n\n/**\n * Turn a hue value (0 - 360) into a Color\n */\nexport const colorFromHue = (hue: number): Color => [\n  ...convert.hsl.rgb([hue, 100, 50]),\n  255,\n];\n\nexport const adjustSaturation = (color: Color, amount: number): Color => {\n  const [r, g, b, a] = color;\n  const [h, s, l] = convert.rgb.hsl(r, g, b);\n  const newSat = weightedValue(Math.abs(amount), s, amount >= 0 ? 100 : 0);\n  const [newR, newG, newB] = convert.hsl.rgb([h, newSat, l]);\n  return [newR, newG, newB, a];\n};\n\n// Amount: -100 to 100\nexport const adjustBrightness = (color: Color, amount: number): Color => {\n  const d = (amount / 100) * 128;\n  const [r, g, b, a] = color;\n  return clampColor([r + d, g + d, b + d, a]);\n};\n\n// Amount: -100 to 100\nexport const adjustContrast = (color: Color, amount: number): Color => {\n  const d = amount / 100 + 1;\n  const [r, g, b, a] = color;\n  return clampColor([\n    d * (r - 128) + 128,\n    d * (g - 128) + 128,\n    d * (b - 128) + 128,\n    a,\n  ]);\n};\n\n/**\n * Returns number between 0 and 1, where 1 is the largest difference and 0 is no difference\n */\nexport const colorDiff = (c1: Color, c2: Color): number => {\n  // Red-mean color diff algorithm\n  // https://en.wikipedia.org/wiki/Color_difference\n  const deltaRed = c1[0] - c2[0];\n  const deltaBlue = c1[1] - c2[1];\n  const deltaGreen = c1[2] - c2[2];\n  const rSomething = (c1[0] + c2[0]) / 2;\n\n  const rComponent = (2 + rSomething / 256) * deltaRed * deltaRed;\n  const bComponent = (2 + (255 - rSomething) / 256) * deltaBlue * deltaBlue;\n  const gComponent = 4 * deltaGreen * deltaGreen;\n  // 765 = ~ difference between black and white pixels\n  return Math.sqrt(rComponent + bComponent + gComponent) / 765;\n};\n\nexport const changeFrameCount = (image: Image, frameCount: number): Image => {\n  const currentFrames = image.frames;\n\n  // Resulting image will contain frameCount frames.\n  // If the original image had fewer than that, then we'll\n  //  duplicate some frames to approximately slow the animation.\n  // If the original has more frames, then we'll discard some frames.\n  return {\n    dimensions: image.dimensions,\n    frames: range(0, frameCount).map((i) => {\n      const frameToCopy = Math.floor((i / frameCount) * currentFrames.length);\n      return currentFrames[frameToCopy];\n    }),\n  };\n};\n","import seedrandom from 'seedrandom';\n\n/**\n * [R, G, B, A] in values 0 - 255 inclusive\n */\nexport type Color = [number, number, number, number];\n\n/**\n * [x, y]\n */\nexport type Coord = [number, number];\n\n/**\n * [width, height]\n */\nexport type Dimensions = [number, number];\n\n/**\n * A one-dimensional array of pixels.\n * A 3x2 image would contain 24 (6*4) numbers, and would look like this:\n *  [\n *    r1,g1,b1,a1, r2,g2,b2,a2, r3,g3,b3,a3,\n *    r4,g4,b4,a4, r5,g5,b5,a5, r6,g6,b6,a6\n *  ]\n *\n * [0, 0] = index 0\n * [1, 0] = index 4\n * [2, 0] = index 8\n * [0, 1] = index 12\n * [1, 1] = index 16\n * [2, 1] = index 20\n * To get pixel [x, y], do (x + y * width) * 4\n */\nexport type ImageData = Uint8Array;\n\n/**\n * The results of get-pixels processImage()\n */\nexport interface Image {\n  dimensions: Dimensions;\n  frames: ImageData[];\n}\n\nexport type Random = seedrandom.prng;\n\nexport interface TransformFnOpts<Params> {\n  /**\n   * The image we're trying to transform\n   */\n  image: Image;\n\n  /**\n   * Use to generate \"random\" numbers. It's seeded, so that subsequent calls will yield the same value on the same image.\n   */\n  random: Random;\n\n  /**\n   * User-passed in parameters.\n   */\n  parameters: Params;\n}\n\nexport type ParamValue<T> = { valid: true; value: T } | { valid: false };\n\nexport interface Parameter<T> {\n  name: string;\n  defaultValue: T;\n  ele: JSX.Element;\n}\n\nexport interface Params<T> {\n  value: ParamValue<T>;\n  onChange: (v: ParamValue<T>) => void;\n}\n\nexport type ParamFunction<T = any> = {\n  name: string;\n  defaultValue: ParamValue<T>;\n  fn: (params: Params<T>) => JSX.Element;\n};\n\nexport type TransformFn<Params> = (opts: TransformFnOpts<Params>) => Image;\n\ntype ParamType<Type> = Type extends ParamFunction<infer X> ? X : never;\n\nexport interface Transform<T extends readonly ParamFunction<any>[]> {\n  name: string;\n  params: T;\n  description?: string;\n  fn: TransformFn<{ [P in keyof T]: ParamType<T[P]> }>;\n  disabled: boolean;\n}\n\nexport interface TransformWithParams<T extends readonly ParamFunction<any>[]> {\n  transformName: string;\n  paramsValues: ParamValue<T>[];\n}\n\nexport interface TransformInput {\n  transformName: string;\n  params: any;\n}\n\nexport const buildTransform = <T extends readonly ParamFunction<any>[]>(args: {\n  name: string;\n  params: T;\n  description?: string;\n  fn: TransformFn<{ [P in keyof T]: ParamType<T[P]> }>;\n  disabled?: boolean;\n}): Transform<T> => ({\n  name: args.name,\n  params: args.params,\n  description: args.description,\n  fn: args.fn,\n  disabled: args.disabled ?? false,\n});\n\nexport interface AppState {\n  baseImage?: string;\n  transforms: {\n    transformName: string;\n    paramsValues: ParamValue<any>[];\n    computedImage?: string;\n  }[];\n  fps: number;\n  dirty: boolean;\n}\n\nexport interface ImageTransformResult {\n  gif: string;\n  width: number;\n  height: number;\n}\n\nexport type AsyncRunMessage =\n  | {\n      status: 'complete';\n    }\n  | {\n      status: 'in-progress';\n      result: ImageTransformResult;\n    };\n","import { Icon, Tooltip } from '@material-ui/core';\nimport React from 'react';\n\ninterface TooltipProps {\n  description?: string;\n}\n\nexport const HelpTooltip: React.FC<TooltipProps> = ({ description }) =>\n  description ? (\n    <Tooltip title={description}>\n      <Icon fontSize=\"small\" color=\"action\">\n        help\n      </Icon>\n    </Tooltip>\n  ) : null;\n","import {\n  FormControl,\n  FormHelperText,\n  Stack,\n  TextField,\n  Typography,\n} from '@material-ui/core';\nimport React from 'react';\nimport { HelpTooltip } from '../components/HelpTooltip';\nimport { ParamFunction, ParamValue } from '../domain/types';\n\ntype ParsedParam<T> =\n  | { valid: true; value: T }\n  | { valid: false; reason: string };\n\nconst IntParam: React.FC<{\n  name: string;\n  value?: number;\n  description?: string;\n  parse: (s: string) => ParsedParam<number>;\n  onChange: (v: ParamValue<number>) => void;\n}> = ({ name, value, description, parse, onChange }) => {\n  const [val, setVal] = React.useState(\n    value === undefined ? undefined : value.toString()\n  );\n  const [invalidText, setInvalidText] = React.useState('');\n\n  const onBlur = () => {\n    if (val === undefined) {\n      // Only if no default value provided and no changes have happened\n      return;\n    }\n\n    if (value && val === value.toString()) {\n      return; // Don't fire an onChange event if things haven't changed\n    }\n    const n = parse(val);\n    if (n.valid) {\n      setInvalidText('');\n    } else {\n      setInvalidText(n.reason);\n    }\n    onChange(n);\n  };\n\n  return (\n    <Stack spacing={1}>\n      <Stack direction=\"row\" spacing={1}>\n        <Typography variant=\"body2\">{name}</Typography>\n        <HelpTooltip description={description} />\n      </Stack>\n      <FormControl>\n        <TextField\n          error={!!invalidText}\n          value={val}\n          onBlur={onBlur}\n          onChange={(e) => {\n            setVal(e.target.value);\n          }}\n        />\n        {invalidText && <FormHelperText>{invalidText}</FormHelperText>}\n      </FormControl>\n    </Stack>\n  );\n};\n\nexport const intParam = (args: {\n  name: string;\n  defaultValue?: number;\n  min?: number;\n  max?: number;\n  description?: string;\n}): ParamFunction<number> => ({\n  name: args.name,\n  defaultValue:\n    args.defaultValue !== undefined\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n  fn: (params) => {\n    const { min, max } = args;\n    const parse = (s: string): ParsedParam<number> => {\n      const n = parseInt(s, 10);\n      if (isNaN(n) || n.toString() !== s) {\n        return { valid: false, reason: 'Must be an integer' };\n      }\n      if (min !== undefined && n < min) {\n        return {\n          valid: false,\n          reason: `Must be greater than or equal to ${min}`,\n        };\n      }\n      if (max !== undefined && n > max) {\n        return { valid: false, reason: `Must be less than or equal to ${max}` };\n      }\n      return { valid: true, value: n };\n    };\n\n    return (\n      <IntParam\n        name={args.name}\n        description={args.description}\n        parse={parse}\n        onChange={params.onChange}\n        value={params.value.valid ? params.value.value : undefined}\n      />\n    );\n  },\n});\n","import { Slider, Stack, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { HelpTooltip } from '../components/HelpTooltip';\nimport { ParamFunction, ParamValue } from '../domain/types';\n\nconst SliderParam: React.FC<{\n  name: string;\n  min: number;\n  max: number;\n  step?: number;\n  value?: number;\n  description?: string;\n  onChange: (v: ParamValue<number>) => void;\n}> = ({ name, value, min, max, step, description, onChange }) => {\n  return (\n    <Stack spacing={1}>\n      <Stack direction=\"row\" spacing={1}>\n        <Typography variant=\"body2\">{name}</Typography>\n        <HelpTooltip description={description} />\n      </Stack>\n      <Stack\n        direction=\"row\"\n        spacing={2}\n        sx={{ paddingLeft: '8px', paddingRight: '8px' }}\n      >\n        <Slider\n          aria-label={name}\n          value={value}\n          step={step}\n          valueLabelDisplay=\"off\"\n          getAriaValueText={(x) => x.toString()}\n          min={min}\n          max={max}\n          onChange={(e, value) =>\n            onChange({ valid: true, value: value as number })\n          }\n        />\n        <Typography variant=\"body2\">{value}</Typography>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport function sliderParam(args: {\n  name: string;\n  min: number;\n  max: number;\n  step?: number;\n  defaultValue?: number;\n  description?: string;\n}): ParamFunction<number> {\n  return {\n    name: args.name,\n    defaultValue:\n      args.defaultValue !== undefined\n        ? { valid: true, value: args.defaultValue }\n        : { valid: false },\n    fn: (params) => {\n      return (\n        <SliderParam\n          name={args.name}\n          value={params.value.valid ? params.value.value : undefined}\n          onChange={params.onChange}\n          min={args.min}\n          max={args.max}\n          step={args.step}\n          description={args.description}\n        />\n      );\n    },\n  };\n}\n","import { buildTransform } from '../domain/types';\nimport {\n  adjustBrightness,\n  adjustContrast,\n  adjustSaturation,\n  changeFrameCount,\n  getPixelFromSource,\n  mapCoords,\n  mapFrames,\n  scaleImage,\n} from '../domain/utils';\nimport { intParam } from '../params/intParam';\nimport { sliderParam } from '../params/sliderParam';\n\nexport const adjustImage = buildTransform({\n  name: 'Adjust Image',\n  description: 'Leave a parameter at 0 if you want to not change it',\n  params: [\n    sliderParam({\n      name: 'Number of Frames',\n      description:\n        'Set how many frames of animation there will be. Leave at 0 to not change the current frame count.',\n      defaultValue: 0,\n      min: 0,\n      max: 60,\n    }),\n    intParam({\n      name: 'Width',\n      description:\n        'Leave at 0 to not change the width. If height is changed, the image will keep the same aspect ratio.',\n      defaultValue: 0,\n      min: 0,\n    }),\n    intParam({\n      name: 'Height',\n      description:\n        'Leave at 0 to not change the height. If width is changed, the image will keep the same aspect ratio.',\n      defaultValue: 0,\n      min: 0,\n    }),\n    sliderParam({\n      name: 'Brightness',\n      min: -100,\n      max: 100,\n      step: 5,\n      defaultValue: 0,\n    }),\n    sliderParam({\n      name: 'Contrast',\n      min: -100,\n      max: 100,\n      step: 5,\n      defaultValue: 0,\n    }),\n    sliderParam({\n      name: 'Saturation',\n      min: -100,\n      max: 100,\n      step: 5,\n      defaultValue: 0,\n    }),\n  ] as const,\n  fn: ({\n    image,\n    parameters: [\n      frameCount,\n      resizeToWidth,\n      resizeToHeight,\n      brightness,\n      contrast,\n      saturation,\n    ],\n  }) => {\n    const hasFrameCount = frameCount !== 0;\n\n    const [oldWidth, oldHeight] = image.dimensions;\n\n    const hasScaleChange = resizeToWidth > 0 || resizeToHeight > 0;\n\n    // If we're changing one of width/height, then we'll scale the other one to match the same aspect ratio.\n    const newWidth =\n      hasScaleChange && resizeToWidth === 0\n        ? Math.ceil((oldWidth / oldHeight) * resizeToHeight)\n        : resizeToWidth;\n    const newHeight =\n      hasScaleChange && resizeToHeight === 0\n        ? Math.ceil((oldHeight / oldWidth) * resizeToWidth)\n        : resizeToHeight;\n\n    // Use this to figure out when we should optimally resize the image\n    const isBiggerImage = newWidth * newHeight > oldWidth * oldHeight;\n\n    let currImage = image;\n\n    if (hasFrameCount && frameCount < image.frames.length) {\n      // Reducing the number of frames, so do that first so we have fewer pixels to change\n      currImage = changeFrameCount(currImage, frameCount);\n    }\n\n    // If making a smaller image, might as well do the brightness/contrast after making it smaller\n    if (hasScaleChange && !isBiggerImage) {\n      currImage = scaleImage({\n        image: currImage,\n        newWidth,\n        newHeight,\n      });\n    }\n\n    currImage = mapFrames(currImage, (imageData) =>\n      mapCoords(currImage.dimensions, (coord) => {\n        let currColor = getPixelFromSource(\n          currImage.dimensions,\n          imageData,\n          coord\n        );\n\n        if (brightness !== 0) {\n          currColor = adjustBrightness(currColor, brightness);\n        }\n\n        if (contrast !== 0) {\n          currColor = adjustContrast(currColor, contrast);\n        }\n\n        if (saturation !== 0) {\n          currColor = adjustSaturation(currColor, saturation);\n        }\n\n        return currColor;\n      })\n    );\n\n    // If the image will be made bigger, we'll run that after adjusting the brightness/contrast\n    if (hasScaleChange && isBiggerImage) {\n      currImage = scaleImage({ image: currImage, newWidth, newHeight });\n    }\n\n    // Finally change the number of frames if we're adding frames\n    if (hasFrameCount && frameCount > image.frames.length) {\n      currImage = changeFrameCount(currImage, frameCount);\n    }\n\n    return currImage;\n  },\n});\n","import {\n  Box,\n  Button,\n  ClickAwayListener,\n  Collapse,\n  Icon,\n  Stack,\n} from '@material-ui/core';\nimport React from 'react';\n\ninterface ExpandableProps {\n  mainEle: JSX.Element;\n}\n\nexport const Expandable: React.FC<ExpandableProps> = ({\n  mainEle,\n  children,\n}) => {\n  const [collapsed, setCollapsed] = React.useState(true);\n\n  return (\n    <ClickAwayListener onClickAway={() => setCollapsed(true)}>\n      <Box>\n        <Button\n          onClick={() => setCollapsed(!collapsed)}\n          style={{ textTransform: 'none', color: 'black' }}\n        >\n          <Stack direction=\"row\" spacing={4}>\n            <div>{mainEle}</div>\n            <Icon>{collapsed ? 'expand_less' : 'expand_more'}</Icon>\n          </Stack>\n        </Button>\n        <Collapse in={!collapsed}>{children}</Collapse>\n      </Box>\n    </ClickAwayListener>\n  );\n};\n","import { Stack, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { SketchPicker } from 'react-color';\nimport { Expandable } from '../components/Expandable';\nimport { HelpTooltip } from '../components/HelpTooltip';\nimport { Color, ParamFunction, ParamValue } from '../domain/types';\nimport { fromHexColor, toHexColor } from '../domain/utils';\n\nconst ColorBox: React.FC<{ color: Color }> = ({ color }) => (\n  <div\n    style={{\n      width: '1.5em',\n      height: '1.5em',\n      backgroundColor: toHexColor(color),\n    }}\n  />\n);\n\nconst ColorPickerParam: React.FC<{\n  name: string;\n  value?: Color;\n  description?: string;\n  onChange: (v: ParamValue<Color>) => void;\n}> = ({ name, value, description, onChange }) => {\n  return (\n    <Expandable\n      mainEle={\n        <Stack direction=\"row\" spacing={4}>\n          <Typography variant=\"body2\">{name}</Typography>\n          <HelpTooltip description={description} />\n          {value && <ColorBox color={value} />}\n        </Stack>\n      }\n    >\n      <SketchPicker\n        disableAlpha={true}\n        presetColors={[]}\n        color={value ? toHexColor(value) : undefined}\n        onChangeComplete={(c) =>\n          onChange({ valid: true, value: fromHexColor(c.hex) })\n        }\n      />\n    </Expandable>\n  );\n};\n\nexport function colorPickerParam(args: {\n  name: string;\n  defaultValue?: Color;\n  description?: string;\n}): ParamFunction<Color> {\n  return {\n    name: args.name,\n    defaultValue: args.defaultValue\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n    fn: (params) => {\n      return (\n        <ColorPickerParam\n          name={args.name}\n          value={params.value.valid ? params.value.value : undefined}\n          onChange={params.onChange}\n          description={args.description}\n        />\n      );\n    },\n  };\n}\n","import { buildTransform } from '../domain/types';\nimport { fromHexColor, isTransparent, mapImage } from '../domain/utils';\nimport { colorPickerParam } from '../params/colorPickerParam';\n\nexport const backgroundColor = buildTransform({\n  name: 'Background Color',\n  description: 'Change all transparent pixles to the given color',\n  params: [\n    colorPickerParam({\n      name: 'Color',\n      defaultValue: fromHexColor('#000000'),\n    }),\n  ] as const,\n  fn: mapImage(({ coord, getSrcPixel, parameters: [color] }) => {\n    const p = getSrcPixel(coord);\n    return isTransparent(p) ? color : p;\n  }),\n});\n","import { Button, Icon, Stack } from '@material-ui/core';\nimport React from 'react';\n\ninterface ImagePickerProps {\n  currentImageUrl?: string;\n  name?: string;\n  width?: number;\n  height?: number;\n  onChange: (imageUrl: string) => void;\n}\n\nexport const ImagePicker: React.FC<ImagePickerProps> = ({\n  currentImageUrl,\n  name,\n  onChange,\n}) => (\n  <Stack spacing={4}>\n    <Button\n      startIcon={<Icon>image</Icon>}\n      sx={{ maxWidth: '300px' }}\n      variant=\"contained\"\n      component=\"label\"\n    >\n      {name}\n      <input\n        type=\"file\"\n        hidden\n        accept=\"image/png,image/jpg,image/jpeg,image/gif\"\n        name=\"source-png\"\n        onChange={async (event) => {\n          const files = Array.from(event.target.files ?? []);\n          const file = files[0];\n          if (file) {\n            // Will be undefined if user clicked the cancel button\n            const baseImage = await readFile(file);\n            onChange(baseImage);\n          }\n        }}\n      />\n    </Button>\n    {currentImageUrl && (\n      <img\n        style={{ maxWidth: '300px', maxHeight: 'auto' }}\n        src={currentImageUrl}\n        alt=\"Source\"\n      ></img>\n    )}\n  </Stack>\n);\n\nconst readFile = (file: File) =>\n  new Promise<string>((resolve) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result as string);\n    reader.readAsDataURL(file);\n  });\n","import {\n  FormControl,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Stack,\n  Typography,\n} from '@material-ui/core';\nimport React from 'react';\nimport { HelpTooltip } from '../components/HelpTooltip';\nimport { ParamFunction, ParamValue } from '../domain/types';\n\nconst RadioParam: React.FC<{\n  name: string;\n  options: readonly { name: string; value: string }[];\n  value?: string;\n  description?: string;\n  onChange: (string: ParamValue<any>) => void;\n}> = ({ name, options, value, description, onChange }) => {\n  return (\n    <Stack spacing={1}>\n      <Stack direction=\"row\" spacing={1}>\n        <Typography variant=\"body2\">{name}</Typography>\n        <HelpTooltip description={description} />\n      </Stack>\n      <FormControl component=\"fieldset\">\n        <RadioGroup\n          aria-label={name}\n          defaultValue={value}\n          onChange={(event) =>\n            onChange({ valid: true, value: event.target.value })\n          }\n        >\n          {options.map((t) => (\n            <FormControlLabel\n              value={t.value}\n              control={<Radio />}\n              label={t.name}\n            />\n          ))}\n        </RadioGroup>\n      </FormControl>\n    </Stack>\n  );\n};\n\nexport function radioParam<T extends string>(args: {\n  name: string;\n  options: readonly { name: string; value: T }[];\n  description?: string;\n  defaultValue?: T;\n}): ParamFunction<T> {\n  return {\n    name: args.name,\n    defaultValue: args.defaultValue\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n    fn: (params) => {\n      return (\n        <RadioParam\n          name={args.name}\n          value={params.value.valid ? params.value.value : undefined}\n          options={args.options}\n          description={args.description}\n          onChange={params.onChange}\n        />\n      );\n    },\n  };\n}\n","import { buildTransform } from '../domain/types';\nimport {\n  getPixel,\n  isTransparent,\n  resizeImage,\n  mapImageWithPrecompute,\n} from '../domain/utils';\nimport { imagePickerParam } from '../params/imagePickerParam';\nimport { radioParam } from '../params/radioParam';\n\nexport const backgroundImage = buildTransform({\n  name: 'Background Image',\n  description: 'Select another image to be used as a background or foreground',\n  params: [\n    imagePickerParam({\n      name: 'Image',\n    }),\n    radioParam<'background' | 'foreground'>({\n      name: 'Type',\n      defaultValue: 'background',\n      options: [\n        {\n          name: 'Background',\n          value: 'background',\n        },\n        {\n          name: 'Foreground',\n          value: 'foreground',\n        },\n      ],\n    }),\n  ] as const,\n  fn: mapImageWithPrecompute(\n    ({ image: { dimensions }, parameters: [otherImagePreResize, type] }) => {\n      const otherImage = resizeImage({\n        image: otherImagePreResize.image,\n        newWidth: dimensions[0],\n        newHeight: dimensions[1],\n      });\n      return { otherImage, type };\n    },\n    ({\n      coord,\n      animationProgress,\n      computed: { otherImage, type },\n      getSrcPixel,\n    }) => {\n      const otherImageFrame = Math.floor(\n        animationProgress * otherImage.frames.length\n      );\n      const otherImageSrc = getPixel({\n        image: otherImage,\n        frameIndex: otherImageFrame,\n        coord,\n      });\n\n      const src = getSrcPixel(coord);\n\n      if (type === 'background') {\n        // Only print the other image if the src image is transparent here\n        return isTransparent(src) ? otherImageSrc : src;\n      } else {\n        return isTransparent(otherImageSrc) ? src : otherImageSrc;\n      }\n    }\n  ),\n});\n","import React from 'react';\nimport { ImagePicker } from '../components/ImagePicker';\nimport { readImage } from '../domain/run';\nimport { Image, ParamFunction } from '../domain/types';\n\ninterface ImagePickerParamsProps {\n  name: string;\n}\n\nexport function imagePickerParam({\n  name,\n}: ImagePickerParamsProps): ParamFunction<{ dataUrl: string; image: Image }> {\n  return {\n    name,\n    defaultValue: { valid: false },\n    fn: (params) => (\n      <ImagePicker\n        currentImageUrl={\n          params.value.valid ? params.value.value.dataUrl : undefined\n        }\n        name={name}\n        width={64}\n        height={64}\n        onChange={async (dataUrl) => {\n          const image = await readImage(dataUrl);\n          params.onChange({ valid: true, value: { dataUrl, image } });\n        }}\n      />\n    ),\n  };\n}\n","import { buildTransform } from '../domain/types';\nimport { mapImageWithPrecompute } from '../domain/utils';\nimport { intParam } from '../params/intParam';\n\nexport const bounce = buildTransform({\n  name: 'Bounce',\n  description: 'Make the image bounce up and down',\n  params: [\n    intParam({\n      name: 'Bounce Speed',\n      description: 'Positive number',\n      defaultValue: 5,\n      min: 0,\n    }),\n  ] as const,\n  fn: mapImageWithPrecompute(\n    ({ animationProgress, parameters: [speed] }) => ({\n      yOffset: Math.round(speed * Math.sin(animationProgress * 2 * Math.PI)),\n    }),\n    ({ computed: { yOffset }, coord: [x, y], getSrcPixel }) =>\n      getSrcPixel([x, y + yOffset])\n  ),\n});\n","import { concat, drop, pipe, reverse } from 'remeda';\nimport { buildTransform } from '../domain/types';\n\nexport const bounceAnimation = buildTransform({\n  name: 'Bounce Animation',\n  description: 'When the animation finishes, it will be replayed in reverse',\n  params: [],\n  fn: ({ image }) => ({\n    dimensions: image.dimensions,\n    frames: concat(\n      image.frames,\n      pipe(image.frames, drop(1), reverse(), drop(1))\n    ),\n  }),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImageWithPrecompute } from '../domain/utils';\nimport { intParam } from '../params/intParam';\n\nexport const circle = buildTransform({\n  name: 'Circle',\n  description: 'Make the image move in a circular pattern',\n  params: [\n    intParam({\n      name: 'Radius',\n      description: 'Positive number',\n      defaultValue: 10,\n      min: 0,\n    }),\n  ] as const,\n  fn: mapImageWithPrecompute(\n    ({ animationProgress, parameters: [radius] }) => ({\n      xOffset: Math.round(radius * Math.sin(-2 * Math.PI * animationProgress)),\n      yOffset: Math.round(radius * Math.cos(-2 * Math.PI * animationProgress)),\n    }),\n    ({ computed: { xOffset, yOffset }, coord: [x, y], getSrcPixel }) =>\n      getSrcPixel([x + xOffset, y + yOffset])\n  ),\n});\n","import {\n  Button,\n  Icon,\n  IconButton,\n  Paper,\n  Stack,\n  Typography,\n} from '@material-ui/core';\nimport React from 'react';\nimport { HelpTooltip } from '../components/HelpTooltip';\nimport { ParamFunction, ParamValue } from '../domain/types';\n\ninterface VariableLengthProps<T> {\n  name: string;\n  newParamText: string;\n  createNewParam: () => ParamFunction<T>;\n  value?: T[];\n  description?: string;\n  onChange: (v: ParamValue<T>) => void;\n}\n\nconst VariableLengthParam: React.FC<VariableLengthProps<any>> = ({\n  name,\n  newParamText,\n  createNewParam,\n  value,\n  description,\n  onChange,\n}) => {\n  const [params, setParams] = React.useState<\n    { param: ParamFunction<any>; pValue: any }[]\n  >(\n    value === undefined\n      ? []\n      : value.map((v, idx) => ({ param: createNewParam(), pValue: v }))\n  );\n  return (\n    <Paper>\n      <Stack spacing={1}>\n        <Stack direction=\"row\" spacing={1}>\n          <Typography variant=\"body2\">{name}</Typography>\n          <HelpTooltip description={description} />\n        </Stack>\n        {params.map(({ param, pValue }, idx) => {\n          const ele = param.fn({\n            value: { valid: true, value: pValue },\n            onChange: (newValue) => {\n              if (newValue.valid) {\n                const p = params.map((oldP, i) => {\n                  if (idx === i) {\n                    return {\n                      param,\n                      pValue: newValue.value,\n                    };\n                  }\n                  return oldP;\n                });\n                setParams(p);\n                onChange({\n                  valid: true,\n                  value: p.map((n) => n.pValue),\n                });\n              }\n            },\n          });\n\n          return (\n            <Stack direction=\"row\" key={`${name}-${idx}`}>\n              <IconButton\n                onClick={() => {\n                  const newParams = params.filter((x, i) => i !== idx);\n                  setParams(newParams);\n                  onChange({\n                    valid: true,\n                    value: newParams.map((n) => n.pValue),\n                  });\n                }}\n                style={{\n                  visibility:\n                    idx === 0 /* Hide delete on first item */\n                      ? 'hidden'\n                      : undefined,\n                }}\n              >\n                <Icon>delete</Icon>\n              </IconButton>\n              {ele}\n            </Stack>\n          );\n        })}\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            const p = createNewParam();\n            const newParams = [\n              ...params,\n              {\n                param: p,\n                pValue: p.defaultValue.valid ? p.defaultValue.value : undefined,\n              },\n            ];\n            setParams(newParams);\n            if (p.defaultValue.valid) {\n              onChange({\n                valid: true,\n                value: newParams.map((n) => n.pValue),\n              });\n            }\n          }}\n        >\n          {newParamText}\n        </Button>\n      </Stack>\n    </Paper>\n  );\n};\n\nexport function variableLengthParam<T>(args: {\n  name: string;\n  newParamText: string;\n  createNewParam: () => ParamFunction<T>;\n  description?: string;\n  defaultValue?: T[];\n}): ParamFunction<T[]> {\n  return {\n    name: args.name,\n    defaultValue: args.defaultValue\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n    fn: (params) => {\n      return (\n        <VariableLengthParam\n          name={args.name}\n          newParamText={args.newParamText}\n          value={params.value.valid ? params.value.value : undefined}\n          createNewParam={args.createNewParam}\n          description={args.description}\n          onChange={params.onChange}\n        />\n      );\n    },\n  };\n}\n","import { buildTransform } from '../domain/types';\nimport {\n  fromHexColor,\n  getAveragePixelValue,\n  isTransparent,\n  mapImageWithPrecompute,\n} from '../domain/utils';\nimport { colorPickerParam } from '../params/colorPickerParam';\nimport { variableLengthParam } from '../params/variableLengthParam';\n\nconst DEFAULT_COLORS = [\n  '#FF8D8B',\n  '#FED689',\n  '#88FF89',\n  '#87FFFF',\n  '#8BB5FE',\n  '#D78CFF',\n  '#FF8CFF',\n  '#FF68F7',\n  '#FE6CB7',\n  '#FF6968',\n].map(fromHexColor);\n\nexport const colors = buildTransform({\n  name: 'Colors',\n  description: 'Make the image flash different colors',\n  params: [\n    variableLengthParam({\n      name: 'Colors',\n      newParamText: 'New Color',\n      defaultValue: DEFAULT_COLORS,\n      createNewParam: () =>\n        colorPickerParam({\n          name: 'Color',\n          defaultValue: DEFAULT_COLORS[0],\n        }),\n    }),\n  ] as const,\n  fn: mapImageWithPrecompute(\n    ({ animationProgress, parameters: [colors] }) => ({\n      chosenColor: colors[Math.floor(animationProgress * colors.length)],\n    }),\n    ({ computed: { chosenColor }, coord, getSrcPixel }) => {\n      const srcPixel = getSrcPixel(coord);\n\n      if (isTransparent(srcPixel)) {\n        return [0, 0, 0, 0];\n      }\n\n      const gray = getAveragePixelValue(srcPixel);\n\n      return [\n        (gray * chosenColor[0]) / 255,\n        (gray * chosenColor[1]) / 255,\n        (gray * chosenColor[2]) / 255,\n        255,\n      ];\n    }\n  ),\n});\n","import { buildTransform } from '../domain/types';\nimport {\n  fromHexColor,\n  isTransparent,\n  mapImageWithPrecompute,\n} from '../domain/utils';\nimport { colorPickerParam } from '../params/colorPickerParam';\nimport { variableLengthParam } from '../params/variableLengthParam';\n\nconst DEFAULT_COLORS = [\n  '#FF8D8B',\n  '#FED689',\n  '#88FF89',\n  '#87FFFF',\n  '#8BB5FE',\n  '#D78CFF',\n  '#FF8CFF',\n  '#FF68F7',\n  '#FE6CB7',\n  '#FF6968',\n].map(fromHexColor);\n\nexport const colorsBackground = buildTransform({\n  name: 'Colors Background',\n  description: 'Transparent pixels will flash different colors',\n  params: [\n    variableLengthParam({\n      name: 'Colors',\n      newParamText: 'New Color',\n      defaultValue: DEFAULT_COLORS,\n      createNewParam: () =>\n        colorPickerParam({\n          name: 'Color',\n          defaultValue: DEFAULT_COLORS[0],\n        }),\n    }),\n  ] as const,\n  fn: mapImageWithPrecompute(\n    ({ animationProgress, parameters: [colors] }) => ({\n      bgColor: colors[Math.floor(animationProgress * colors.length)],\n    }),\n    ({ computed: { bgColor }, coord, getSrcPixel }) => {\n      const srcPixel = getSrcPixel(coord);\n\n      // Make the transparent parts colorful\n      if (isTransparent(srcPixel)) {\n        return bgColor;\n      }\n\n      return srcPixel;\n    }\n  ),\n});\n","import {\n  FormControl,\n  FormHelperText,\n  Stack,\n  TextField,\n  Typography,\n} from '@material-ui/core';\nimport React from 'react';\nimport { HelpTooltip } from '../components/HelpTooltip';\nimport { ParamFunction, ParamValue } from '../domain/types';\n\ntype ParsedParam<T> =\n  | { valid: true; value: T }\n  | { valid: false; reason: string };\n\nconst FloatParam: React.FC<{\n  name: string;\n  value?: number;\n  description?: string;\n  parse: (s: string) => ParsedParam<number>;\n  onChange: (v: ParamValue<number>) => void;\n}> = ({ name, value, description, parse, onChange }) => {\n  const [val, setVal] = React.useState(\n    value === undefined ? undefined : value.toString()\n  );\n  const [invalidText, setInvalidText] = React.useState('');\n\n  const onBlur = () => {\n    if (val === undefined) {\n      // Only if no default value provided and no changes have happened\n      return;\n    }\n\n    if (value && val === value.toString()) {\n      return; // Don't fire an onChange event if things haven't changed\n    }\n    const n = parse(val);\n    if (n.valid) {\n      setInvalidText('');\n    } else {\n      setInvalidText(n.reason);\n    }\n    onChange(n);\n  };\n\n  return (\n    <Stack spacing={1}>\n      <Stack direction=\"row\" spacing={1}>\n        <Typography variant=\"body2\">{name}</Typography>\n        <HelpTooltip description={description} />\n      </Stack>\n      <FormControl>\n        <TextField\n          error={!!invalidText}\n          value={val}\n          onBlur={onBlur}\n          onChange={(e) => {\n            setVal(e.target.value);\n          }}\n        />\n        {invalidText && <FormHelperText>{invalidText}</FormHelperText>}\n      </FormControl>\n    </Stack>\n  );\n};\n\nexport const floatParam = (args: {\n  name: string;\n  defaultValue?: number;\n  min?: number;\n  max?: number;\n  description?: string;\n}): ParamFunction<number> => ({\n  name: args.name,\n  defaultValue:\n    args.defaultValue !== undefined\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n  fn: (params) => {\n    const { min, max } = args;\n    const parse = (s: string): ParsedParam<number> => {\n      const n = parseFloat(s);\n      if (isNaN(n) || n.toString() !== s) {\n        return { valid: false, reason: 'Must be a number' };\n      }\n      if (min !== undefined && n < min) {\n        return {\n          valid: false,\n          reason: `Must be greater than or equal to ${min}`,\n        };\n      }\n      if (max !== undefined && n > max) {\n        return { valid: false, reason: `Must be less than or equal to ${max}` };\n      }\n      return { valid: true, value: n };\n    };\n\n    return (\n      <FloatParam\n        name={args.name}\n        description={args.description}\n        parse={parse}\n        onChange={params.onChange}\n        value={params.value.valid ? params.value.value : undefined}\n      />\n    );\n  },\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImageWithPrecompute } from '../domain/utils';\nimport { floatParam } from '../params/floatParam';\n\nexport const doubleVision = buildTransform({\n  name: 'Double Vision',\n  description: 'See the image in double',\n  params: [\n    floatParam({ name: 'Amplitude', defaultValue: 10, min: 0 }),\n  ] as const,\n  fn: mapImageWithPrecompute(\n    ({ animationProgress, parameters: [amplitude] }) => ({\n      xOffset: amplitude * Math.sin(-2 * Math.PI * animationProgress),\n    }),\n    ({ computed: { xOffset }, coord: [x, y], getSrcPixel }) => {\n      const dir = x % 2 === 0 ? -1 : 1;\n      return getSrcPixel([x + Math.round(dir * xOffset), y]);\n    }\n  ),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImageWithPrecompute } from '../domain/utils';\nimport { intParam } from '../params/intParam';\n\nexport const expand = buildTransform({\n  name: 'Expand',\n  description: 'Make the image grow and shrink',\n  params: [\n    intParam({\n      name: 'Radius',\n      description: 'Positive number',\n      defaultValue: 10,\n      min: 0,\n    }),\n  ] as const,\n  fn: mapImageWithPrecompute(\n    ({\n      dimensions: [width, height],\n      animationProgress,\n      parameters: [radius],\n    }) => ({\n      dist: Math.cos(animationProgress * 2 * Math.PI) * radius,\n      centerX: width / 2,\n      centerY: height / 2,\n    }),\n    ({\n      computed: { centerX, centerY, dist },\n      dimensions: [width, height],\n      coord: [x, y],\n      getSrcPixel,\n    }) => {\n      // Kind of follows the same algorithm as resize, except the amount is dynamic\n      const xRatio = (x - centerX) / width;\n      const yRatio = (y - centerY) / height;\n\n      const xOffset = Math.floor(dist * xRatio);\n      const yOffset = Math.round(dist * yRatio);\n      return getSrcPixel([x - xOffset, y - yOffset]);\n    }\n  ),\n});\n","import { buildTransform, Coord, Image } from '../domain/types';\nimport { mapImage, setPixel, TRANSPARENT_COLOR } from '../domain/utils';\nimport { sliderParam } from '../params/sliderParam';\n\nexport const fill = buildTransform({\n  disabled: true,\n  name: 'Fill Transparent',\n  description:\n    'Makes transparent all pixels of similar color surrounding a point',\n  params: [\n    sliderParam({\n      name: 'Tolerance',\n      defaultValue: 50,\n      min: 0,\n      max: 100,\n    }),\n  ] as const,\n  fn: mapImage(({ coord, getSrcPixel, parameters: [tolerance] }) => {\n    const matchP = getSrcPixel([0, 0]);\n\n    const p = getSrcPixel(coord);\n    const [x, y] = coord;\n\n    return [0, 0, 0, 0];\n  }),\n});\n\nconst fillFn = (image: Image, frameIndex: number, coord: Coord) => {\n  const visited = (() => {\n    const set = new Set<string>();\n    return {\n      set: (x: number, y: number) => {\n        set.add(`${x}-${y}`);\n      },\n      has: (x: number, y: number) => set.has(`${x}-${y}`),\n    };\n  })();\n\n  const set = (x: number, y: number) =>\n    setPixel({\n      image,\n      frameIndex,\n      color: TRANSPARENT_COLOR,\n      coord: [x - 1, y],\n    });\n\n  const s: { x1: number; x2: number; y: number; dy: number }[] = [];\n  s.push({ x1: coord[0], x2: coord[0], y: coord[1], dy: 1 });\n  s.push({ x1: coord[0], x2: coord[0], y: coord[1] - 1, dy: -1 });\n\n  while (s.length > 0) {\n    const n = s.pop()!;\n    let x = n.x1;\n    let y = n.y;\n    if (visited.has(x, y)) {\n      while (visited.has(x - 1, y)) {\n        set(x - 1, y);\n        x = x - 1;\n      }\n    }\n\n    if (x < n.x1) {\n      s.push({ x1: x, x2: n.x1 - 1, y: y - n.dy, dy: n.dy * -1 });\n    }\n\n    while (n.x1 < n.x2) {\n      while (visited.has(n.x1, y)) {\n        set(n.x1, y);\n      }\n    }\n  }\n};\n\n/*\nfn fill(x, y):\n  if not Inside(x, y) then return\n  let s = new empty queue or stack\n  Add (x, x, y, 1) to s\n  Add (x, x, y - 1, -1) to s\n  while s is not empty:\n    Remove an (x1, x2, y, dy) from s\n    let x = x1\n    if Inside(x, y):\n      while Inside(x - 1, y):\n        Set(x - 1, y)\n        x = x - 1\n    if x < x1:\n      Add (x, x1-1, y-dy, -dy) to s\n    while x1 < x2:\n      while Inside(x1, y):\n        Set(x1, y)\n        x1 = x1 + 1\n      Add (x, x1 - 1, y+dy, dy) to s\n      if x1 - 1 > x2:\n        Add (x2 + 1, x1 - 1, y-dy, -dy)\n      while x1 < x2 and not Inside(x1, y):\n        x1 = x1 + 1\n      x = x1\n*/\n","import { buildTransform } from '../domain/types';\nimport { mapImageWithPrecompute } from '../domain/utils';\nimport { intParam } from '../params/intParam';\n\n// Probably still needs work -- the inner pixels get all funky still\nexport const fisheye = buildTransform({\n  name: 'Fisheye',\n  description: 'Make the image grow and shrink in a distorted fashion',\n  params: [\n    intParam({\n      name: 'Radius',\n      description: 'Positive Number',\n      defaultValue: 10,\n      min: 0,\n    }),\n  ] as const,\n  fn: mapImageWithPrecompute(\n    ({\n      animationProgress,\n      dimensions: [width, height],\n      parameters: [radius],\n    }) => {\n      const expanding = animationProgress < 0.5;\n      return {\n        dist: (expanding ? animationProgress : 1 - animationProgress) * radius,\n        centerX: width / 2,\n        centerY: height / 2,\n      };\n    },\n    ({ computed: { dist, centerX, centerY }, coord: [x, y], getSrcPixel }) => {\n      const angle = Math.atan2(centerY - y, centerX - x);\n\n      const xOffset = Math.round(dist * Math.cos(angle));\n      const yOffset = Math.round(dist * Math.sin(angle));\n      return getSrcPixel([x + xOffset, y + yOffset]);\n    }\n  ),\n});\n","import { buildTransform } from '../domain/types';\nimport { adjustSaturation, mapImage } from '../domain/utils';\nimport { sliderParam } from '../params/sliderParam';\n\nconst MAX_GRID_SIZE = 64;\n\nexport const grid = buildTransform({\n  name: 'Grid',\n  description: 'Removes the color from all pixels not aligned with a grid',\n  params: [\n    sliderParam({\n      name: 'Grid Size',\n      description: 'The length of each square in the grid',\n      defaultValue: 24,\n      min: 2,\n      max: MAX_GRID_SIZE,\n      step: 2,\n    }),\n    sliderParam({\n      name: 'Grid Angle',\n      defaultValue: 45,\n      min: 0,\n      max: 90,\n    }),\n  ] as const,\n  fn: mapImage(({ coord, getSrcPixel, parameters: [gridSize, gridAngle] }) => {\n    const p = getSrcPixel(coord);\n    const [x, y] = coord;\n\n    let isOnGrid = false;\n    if (gridAngle % 90 === 0) {\n      // Vertical/Horizonal lines\n      isOnGrid = x % gridSize === 0 || y % gridSize === 0;\n    } else {\n      // Threshold should be between 0.13 and 0.03, smaller for larger grid sizes.\n      // Larger threshold = thicker lines.\n      const threshold =\n        ((MAX_GRID_SIZE - gridSize) / MAX_GRID_SIZE) * 0.1 + 0.03;\n\n      const onGrid = (angleDegrees: number) => {\n        const n = (1 / gridSize) * (y - Math.tan(toRad(angleDegrees)) * x);\n        return Math.abs(Math.round(n) - n) < threshold;\n      };\n\n      isOnGrid = onGrid(gridAngle) || onGrid(gridAngle + 90);\n    }\n\n    return isOnGrid ? p : adjustSaturation(p, -100);\n  }),\n});\n\nconst toRad = (degrees: number) => (degrees * Math.PI) / 180;\n","import { Stack, Typography } from '@material-ui/core';\nimport * as convert from 'color-convert';\nimport React from 'react';\nimport { HuePicker } from 'react-color';\nimport { HelpTooltip } from '../components/HelpTooltip';\nimport { ParamFunction, ParamValue } from '../domain/types';\nimport { toHexColor } from '../domain/utils';\n\nconst HuePickerParam: React.FC<{\n  name: string;\n  value?: number;\n  description?: string;\n  onChange: (v: ParamValue<number>) => void;\n}> = ({ name, value, description, onChange }) => {\n  const hexColor =\n    value === undefined\n      ? undefined\n      : toHexColor([...convert.hsl.rgb([value, 255, 255]), 255]);\n  return (\n    <Stack spacing={1}>\n      <Stack direction=\"row\" spacing={1}>\n        <Typography variant=\"body2\">{name}</Typography>\n        <HelpTooltip description={description} />\n      </Stack>\n      <HuePicker\n        color={hexColor}\n        onChangeComplete={({ hsl }) => onChange({ valid: true, value: hsl.h })}\n      />\n    </Stack>\n  );\n};\n\nexport function huePickerParam(args: {\n  name: string;\n  defaultValue?: number;\n  description?: string;\n}): ParamFunction<number> {\n  return {\n    name: args.name,\n    defaultValue: args.defaultValue\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n    fn: (params) => {\n      return (\n        <HuePickerParam\n          name={args.name}\n          value={params.value.valid ? params.value.value : undefined}\n          onChange={params.onChange}\n        />\n      );\n    },\n  };\n}\n","import { buildTransform } from '../domain/types';\nimport { mapImage, shiftTowardsHue } from '../domain/utils';\nimport { huePickerParam } from '../params/huePickerParam';\nimport { sliderParam } from '../params/sliderParam';\n\nexport const hueChange = buildTransform({\n  name: 'Hue Change',\n  description: 'Change the hue of the image to some other color',\n  params: [\n    huePickerParam({\n      name: 'Hue',\n      defaultValue: 180,\n    }),\n    sliderParam({\n      name: 'Amount',\n      description: 'How strong the effect is.',\n      min: 0,\n      max: 100,\n      step: 5,\n      defaultValue: 75,\n    }),\n  ] as const,\n  fn: mapImage(({ coord, getSrcPixel, parameters: [newHue, amount] }) =>\n    shiftTowardsHue(getSrcPixel(coord), newHue, amount)\n  ),\n});\n","import { FormControl, Stack, TextField, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { HelpTooltip } from '../components/HelpTooltip';\nimport { ParamFunction, ParamValue } from '../domain/types';\n\nconst TextParam: React.FC<{\n  name: string;\n  value?: string;\n  description?: string;\n  onChange: (v: ParamValue<string>) => void;\n}> = ({ name, value, description, onChange }) => {\n  const [val, setVal] = React.useState(value);\n\n  return (\n    <Stack spacing={1}>\n      <Stack direction=\"row\" spacing={1}>\n        <Typography variant=\"body2\">{name}</Typography>\n        <HelpTooltip description={description} />\n      </Stack>\n      <FormControl>\n        <TextField\n          value={val}\n          onChange={(e) => setVal(e.target.value)}\n          onBlur={() =>\n            onChange(val ? { valid: true, value: val } : { valid: false })\n          }\n        />\n      </FormControl>\n    </Stack>\n  );\n};\n\nexport const textParam = (args: {\n  name: string;\n  description?: string;\n  defaultValue?: string;\n}): ParamFunction<string> => ({\n  name: args.name,\n  defaultValue:\n    args.defaultValue !== undefined\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n  fn: (params) => (\n    <TextParam\n      name={args.name}\n      description={args.description}\n      onChange={params.onChange}\n      value={params.value.valid ? params.value.value : undefined}\n    />\n  ),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage, shiftHue } from '../domain/utils';\nimport { sliderParam } from '../params/sliderParam';\n\nexport const hueShift = buildTransform({\n  name: 'Hue Shift',\n  description: 'Shift the hue of each pixel in the image by some amount',\n  params: [\n    sliderParam({\n      name: 'Amount',\n      description: 'How much to shift the hue of each pixel',\n      min: 0,\n      max: 100,\n      step: 5,\n      defaultValue: 50,\n    }),\n  ] as const,\n  fn: mapImage(({ coord, getSrcPixel, parameters: [amount] }) =>\n    shiftHue(getSrcPixel(coord), (amount / 100) * 360)\n  ),\n});\n","import { buildTransform } from '../domain/types';\nimport { isTransparent, mapImage, shiftTowardsHue } from '../domain/utils';\nimport { huePickerParam } from '../params/huePickerParam';\n\nexport const hueShiftPulse = buildTransform({\n  name: 'Hue Shift Pulse',\n  description: 'Shift the hue to the given value in a pulsating manner',\n  params: [\n    huePickerParam({\n      name: 'Hue',\n      defaultValue: 180,\n    }),\n  ],\n  fn: mapImage(\n    ({ coord, getSrcPixel, frameCount, frameIndex, parameters: [hue] }) => {\n      const srcPixel = getSrcPixel(coord);\n      const isBackground = isTransparent(srcPixel);\n\n      if (isBackground) {\n        return srcPixel;\n      }\n\n      const amount = Math.abs(Math.sin(Math.PI * (frameIndex / frameCount)));\n      return shiftTowardsHue(srcPixel, hue, amount * 360);\n    }\n  ),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImageWithPrecompute, shiftHue } from '../domain/utils';\nimport { sliderParam } from '../params/sliderParam';\n\nexport const hueWave = buildTransform({\n  name: 'Hue Wave',\n  description: 'Shifts the hue of pixels in the image in a wave motion',\n  params: [\n    sliderParam({\n      name: 'Amplitude',\n      defaultValue: 20,\n      min: 0,\n      max: 100,\n      step: 5,\n      description: 'How strong the hue shift effect should be',\n    }),\n    sliderParam({\n      name: 'Period',\n      defaultValue: 1,\n      min: 1,\n      max: 20,\n      description: 'How many waves you want',\n    }),\n  ] as const,\n  fn: mapImageWithPrecompute(\n    ({ animationProgress }) => ({\n      shift: -1 * animationProgress * 2 * Math.PI,\n    }),\n    ({\n      computed: { shift },\n      coord,\n      dimensions: [, height],\n      parameters: [amplitude, period],\n      getSrcPixel,\n    }) => {\n      const [x, y] = coord;\n      const amount = Math.round(\n        amplitude * Math.sin((y / height) * period * Math.PI + shift)\n      );\n\n      return shiftHue(getSrcPixel(coord), (amount / 100) * 360);\n    }\n  ),\n});\n","import seedrandom from 'seedrandom';\nimport { buildTransform, Color } from '../domain/types';\nimport {\n  getPixelFromSource,\n  isTransparent,\n  mapCoords,\n  mapFrames,\n} from '../domain/utils';\nimport { textParam } from '../params/textParam';\n\nconst lightningIntensities: Color[] = [\n  [0, 15, 40, 255], // dark color\n  [150, 150, 175, 255],\n  [180, 180, 205, 255],\n  [210, 210, 235, 255],\n];\n\nexport const lightning = buildTransform({\n  name: 'Lightning',\n  description: 'Make the background look like a thunderstorm',\n  params: [\n    textParam({\n      name: 'Random Seed',\n      description:\n        'Can be anything. Will determine the randomness of the lightning.',\n      defaultValue: 'lightning',\n    }),\n  ] as const,\n  fn: ({ image, parameters: [seed] }) => {\n    const random = seedrandom(seed);\n    return mapFrames(image, (data) => {\n      const i = random();\n      const flashIntensity = i < 0.9 ? 0 : i < 0.95 ? 1 : i < 0.98 ? 2 : 3;\n\n      return mapCoords(image.dimensions, (coord) => {\n        const src = getPixelFromSource(image.dimensions, data, coord);\n\n        if (isTransparent(src)) {\n          return lightningIntensities[flashIntensity];\n        }\n\n        if (flashIntensity > 0) {\n          // We're flashing, so brighten up the image a little\n          const icf = 1.02 * flashIntensity;\n          return [src[0] * icf, src[1] * icf, src[2] * icf, src[3]];\n        }\n\n        // No lightning\n        return src;\n      });\n    });\n  },\n});\n","import * as convert from 'color-convert';\nimport { buildTransform } from '../domain/types';\nimport { mapImage } from '../domain/utils';\n\nexport const nuke = buildTransform({\n  name: 'Nuke',\n  description: 'Oh no...',\n  params: [],\n  fn: mapImage(({ coord, getSrcPixel, animationProgress }) => {\n    const threshold = animationProgress * 255;\n    const [r, g, b, a] = getSrcPixel(coord);\n    const [h, s, l] = convert.rgb.hsl(r, g, b);\n    const [newR, newG, newB] = convert.hsl.rgb([h, s, l > threshold ? l : 0]);\n    return [newR, newG, newB, l > threshold ? a : 0];\n  }),\n});\n","import { buildTransform } from '../domain/types';\nimport {\n  colorFromHue,\n  isTransparent,\n  mapImage,\n  shiftTowardsHue,\n} from '../domain/utils';\nimport { radioParam } from '../params/radioParam';\nimport { sliderParam } from '../params/sliderParam';\n\nexport const party = buildTransform({\n  name: 'Party',\n  description: 'Shift the hue of the image over the course of the animation',\n  params: [\n    radioParam<'background' | 'foreground'>({\n      name: 'Type',\n      description: 'Whether to apply the party to the foreground or background',\n      defaultValue: 'background',\n      options: [\n        {\n          name: 'Background',\n          value: 'background',\n        },\n        {\n          name: 'Foreground',\n          value: 'foreground',\n        },\n      ],\n    }),\n    sliderParam({\n      name: 'Amount',\n      description: 'How strong the effect is',\n      min: 0,\n      max: 100,\n      step: 5,\n      defaultValue: 50,\n    }),\n    sliderParam({\n      name: 'Shift Speed',\n      description: 'Controls how quickly it shifts through the various colors',\n      min: 1,\n      max: 12,\n      defaultValue: 1,\n    }),\n  ] as const,\n  fn: mapImage(\n    ({\n      coord,\n      getSrcPixel,\n      animationProgress,\n      parameters: [type, amount, shiftSpeed],\n    }) => {\n      const srcPixel = getSrcPixel(coord);\n      const isBackground = isTransparent(srcPixel);\n\n      const newH = (animationProgress * shiftSpeed * 360) % 360;\n\n      if (isBackground && type === 'background') {\n        return colorFromHue(newH);\n      }\n\n      if (!isBackground && type === 'foreground') {\n        return shiftTowardsHue(srcPixel, newH, amount);\n      }\n\n      return srcPixel;\n    }\n  ),\n});\n","import { buildTransform } from '../domain/types';\nimport { isTransparent, mapImage, shiftHue } from '../domain/utils';\n\nexport const partyTwo = buildTransform({\n  name: 'Party Two',\n  description:\n    'Shift the hue of each individual pixel over the course of the animation',\n  params: [],\n  fn: mapImage(({ coord, getSrcPixel, animationProgress }) => {\n    const srcPixel = getSrcPixel(coord);\n    const isBackground = isTransparent(srcPixel);\n\n    return isBackground\n      ? srcPixel\n      : shiftHue(srcPixel, animationProgress * 360);\n  }),\n});\n","import { buildTransform, Coord } from '../domain/types';\nimport {\n  calculateAngle,\n  fromHexColor,\n  isTransparent,\n  mapImageWithPrecompute,\n} from '../domain/utils';\nimport { colorPickerParam } from '../params/colorPickerParam';\nimport { intParam } from '../params/intParam';\nimport { sliderParam } from '../params/sliderParam';\nimport { variableLengthParam } from '../params/variableLengthParam';\n\nconst DEFAULT_COLORS = [\n  '#FF0000',\n  '#FF9600',\n  '#FFFF00',\n  '#00FF00',\n  '#00FF96',\n  '#00FFFF',\n  '#0000FF',\n  '#B400FF',\n].map(fromHexColor);\n\nexport const pinwheel = buildTransform({\n  name: 'Pinwheel',\n  description: 'Create a pinwheel of colors',\n  params: [\n    sliderParam({\n      name: 'Group Count',\n      description: 'How many times each color is repeated',\n      defaultValue: 1,\n      min: 1,\n      max: 24,\n    }),\n    variableLengthParam({\n      name: 'Colors',\n      newParamText: 'New Color',\n      description: 'Colors for the pinwheel',\n      defaultValue: DEFAULT_COLORS,\n      createNewParam: () =>\n        colorPickerParam({\n          name: 'Color',\n          defaultValue: DEFAULT_COLORS[0],\n        }),\n    }),\n    intParam({\n      name: 'Offset X',\n      description: 'Change the horizontal center of the pinwheel',\n      defaultValue: 0,\n    }),\n    intParam({\n      name: 'Offset Y',\n      description: 'Change the vertical center of the pinwheel',\n      defaultValue: 0,\n    }),\n  ] as const,\n  fn: mapImageWithPrecompute(\n    ({ parameters: [groupCount, colors, offsetX, offsetY] }) => {\n      const ribbonCount = colors.length * groupCount;\n      const ribbonArcDegrees = Math.round(360 / ribbonCount);\n      // Need to make sure ribbonCount is always a multiple of the number of images, otherwise we\n      //  won't get a smooth transition.\n      // We'll cut off colors from the end of the list until we get an even multiple.\n      let colorsLength = colors.length;\n      while ((ribbonCount / colorsLength).toFixed(2).slice(-2) !== '00') {\n        colorsLength -= 1;\n      }\n\n      return {\n        colorsLength,\n        ribbonArcDegrees,\n      };\n    },\n    ({\n      computed: { ribbonArcDegrees, colorsLength },\n      coord,\n      dimensions,\n      animationProgress,\n      getSrcPixel,\n      parameters: [groupCount, colors, offsetX, offsetY],\n    }) => {\n      const srcPixel = getSrcPixel(coord);\n\n      if (!isTransparent(srcPixel)) {\n        return srcPixel;\n      }\n\n      // Make the transparent parts colorful\n      const center: Coord = [\n        dimensions[0] / 2 + offsetX,\n        dimensions[1] / 2 - offsetY,\n      ];\n      const pointAngle = calculateAngle(coord, center);\n\n      const colorIdx = Math.floor(pointAngle / ribbonArcDegrees) % colorsLength;\n\n      // Increment colorIdx based on current frame progress\n      const idx =\n        (Math.floor(animationProgress * colorsLength) + colorIdx) %\n        colorsLength;\n      return colors[idx];\n    }\n  ),\n});\n","import { buildTransform, Coord } from '../domain/types';\nimport {\n  calculateAngle,\n  colorFromHue,\n  isTransparent,\n  mapImageWithPrecompute,\n  shiftTowardsHue,\n} from '../domain/utils';\nimport { intParam } from '../params/intParam';\nimport { radioParam } from '../params/radioParam';\nimport { sliderParam } from '../params/sliderParam';\n\nexport const pinwheelParty = buildTransform({\n  name: 'Pinwheel Party',\n  description: 'Create a pinwheel of party colors',\n  params: [\n    sliderParam({\n      name: 'Group Count',\n      description: 'How many times each rainbow is repeated',\n      defaultValue: 1,\n      min: 1,\n      max: 24,\n    }),\n    radioParam<'background' | 'foreground'>({\n      name: 'Type',\n      description: 'Whether to apply the party to the foreground or background',\n      defaultValue: 'background',\n      options: [\n        {\n          name: 'Background',\n          value: 'background',\n        },\n        {\n          name: 'Foreground',\n          value: 'foreground',\n        },\n      ],\n    }),\n    sliderParam({\n      name: 'Amount',\n      description:\n        'How strong the effect is. Only applies when type = foreground.',\n      min: 0,\n      max: 100,\n      step: 5,\n      defaultValue: 75,\n    }),\n    intParam({\n      name: 'Offset X',\n      description: 'Change the horizontal center of the pinwheel',\n      defaultValue: 0,\n    }),\n    intParam({\n      name: 'Offset Y',\n      description: 'Change the vertical center of the pinwheel',\n      defaultValue: 0,\n    }),\n  ] as const,\n  fn: mapImageWithPrecompute(\n    ({\n      dimensions: [width, height],\n      parameters: [groupCount, type, amount, offsetX, offsetY],\n    }) => {\n      const center: Coord = [width / 2 + offsetX, height / 2 - offsetY];\n      return { center };\n    },\n    ({\n      computed: { center },\n      coord,\n      animationProgress,\n      getSrcPixel,\n      parameters: [groupCount, type, amount],\n    }) => {\n      const srcPixel = getSrcPixel(coord);\n\n      const isBackground = isTransparent(srcPixel);\n\n      if (type === 'foreground' ? isBackground : !isBackground) {\n        return srcPixel;\n      }\n\n      const pointAngle = calculateAngle(coord, center);\n      const newH = (pointAngle * groupCount + animationProgress * 360) % 360;\n\n      return isBackground\n        ? colorFromHue(newH)\n        : shiftTowardsHue(srcPixel, newH, amount);\n    }\n  ),\n});\n","import { range } from 'remeda';\nimport { buildTransform } from '../domain/types';\nimport {\n  fromHexColor,\n  isTransparent,\n  mapImageWithPrecompute,\n} from '../domain/utils';\nimport { colorPickerParam } from '../params/colorPickerParam';\nimport { intParam } from '../params/intParam';\nimport { sliderParam } from '../params/sliderParam';\nimport { variableLengthParam } from '../params/variableLengthParam';\n\nconst DEFAULT_COLORS = [\n  '#FF0000',\n  '#FF9600',\n  '#FFFF00',\n  '#00FF00',\n  '#00FF96',\n  '#00FFFF',\n  '#0000FF',\n  '#B400FF',\n].map(fromHexColor);\n\nexport const radiance = buildTransform({\n  name: 'Radiance',\n  description: 'Radiate colors out in rings',\n  params: [\n    sliderParam({\n      name: 'Group Count',\n      description: 'How many times each color is repeated',\n      defaultValue: 1,\n      min: 1,\n      max: 24,\n    }),\n    variableLengthParam({\n      name: 'Colors',\n      newParamText: 'New Color',\n      description: 'The colors that make up each ring',\n      defaultValue: DEFAULT_COLORS,\n      createNewParam: () =>\n        colorPickerParam({\n          name: 'Color',\n          defaultValue: DEFAULT_COLORS[0],\n        }),\n    }),\n    intParam({\n      name: 'Offset X',\n      description: 'Change the horizontal center of the radiance',\n      defaultValue: 0,\n    }),\n    intParam({\n      name: 'Offset Y',\n      description: 'Change the vertical center of the radiance',\n      defaultValue: 0,\n    }),\n  ] as const,\n  fn: mapImageWithPrecompute(\n    ({ dimensions: [width, height], parameters: [groupCount, colors] }) => ({\n      colorList: range(0, groupCount).flatMap(() => colors),\n      centerX: width / 2,\n      centerY: height / 2,\n    }),\n    ({\n      computed: { centerX, centerY, colorList },\n      dimensions: [width, height],\n      coord,\n      animationProgress,\n      parameters: [_groupCount, _colors, offsetX, offsetY],\n      getSrcPixel,\n    }) => {\n      const srcPixel = getSrcPixel(coord);\n\n      if (!isTransparent(srcPixel)) {\n        return srcPixel;\n      }\n\n      // Make the transparent parts colorful\n      const [x, y] = coord;\n      const xRelCenter = x - centerX - offsetX;\n      const yRelCenter = y - centerY + offsetY;\n\n      const maxDist = Math.sqrt(\n        (width / 2) * (width / 2) + (height / 2) * (height / 2)\n      );\n      const distFromCenter = Math.sqrt(\n        yRelCenter * yRelCenter + xRelCenter * xRelCenter\n      );\n\n      const colorIdx =\n        Math.floor((1 - distFromCenter / maxDist) * colorList.length) %\n        colorList.length;\n\n      // Increment colorIdx based on current frame progress\n      const idx =\n        (Math.floor(animationProgress * colorList.length) + colorIdx) %\n        colorList.length;\n      return colorList[idx];\n    }\n  ),\n});\n","import { buildTransform } from '../domain/types';\nimport {\n  colorFromHue,\n  isTransparent,\n  mapImageWithPrecompute,\n  shiftTowardsHue,\n} from '../domain/utils';\nimport { intParam } from '../params/intParam';\nimport { radioParam } from '../params/radioParam';\nimport { sliderParam } from '../params/sliderParam';\n\nexport const radianceParty = buildTransform({\n  name: 'Radiance Party',\n  description: 'Radiate party colors out in rings',\n  params: [\n    sliderParam({\n      name: 'Group Count',\n      description: 'How many times each rainbow is repeated',\n      defaultValue: 1,\n      min: 1,\n      max: 24,\n    }),\n    radioParam<'background' | 'foreground'>({\n      name: 'Type',\n      description: 'Whether to apply the party to the foreground or background',\n      defaultValue: 'background',\n      options: [\n        {\n          name: 'Background',\n          value: 'background',\n        },\n        {\n          name: 'Foreground',\n          value: 'foreground',\n        },\n      ],\n    }),\n    sliderParam({\n      name: 'Amount',\n      description:\n        'How strong the effect is. Only applies when type = foreground.',\n      min: 0,\n      max: 100,\n      step: 5,\n      defaultValue: 75,\n    }),\n    intParam({\n      name: 'Offset X',\n      description: 'Change the horizontal center of the radiance',\n      defaultValue: 0,\n    }),\n    intParam({\n      name: 'Offset Y',\n      description: 'Change the vertical center of the radiance',\n      defaultValue: 0,\n    }),\n  ] as const,\n  fn: mapImageWithPrecompute(\n    ({ dimensions: [width, height] }) => ({\n      centerX: width / 2,\n      centerY: height / 2,\n      maxDist: Math.sqrt(\n        (width / 2) * (width / 2) + (height / 2) * (height / 2)\n      ),\n    }),\n    ({\n      computed: { centerX, centerY, maxDist },\n      coord,\n      animationProgress,\n      parameters: [groupCount, type, amount, offsetX, offsetY],\n      getSrcPixel,\n    }) => {\n      const src = getSrcPixel(coord);\n\n      const isBackground = isTransparent(src);\n\n      if (type === 'foreground' ? isBackground : !isBackground) {\n        return src;\n      }\n\n      const [x, y] = coord;\n      const xRelCenter = x - centerX - offsetX;\n      const yRelCenter = y - centerY + offsetY;\n\n      const distFromCenter = Math.sqrt(\n        yRelCenter * yRelCenter + xRelCenter * xRelCenter\n      );\n\n      const newH =\n        ((1 - distFromCenter / maxDist) * 360 * groupCount +\n          360 * animationProgress) %\n        360;\n\n      return isBackground\n        ? colorFromHue(newH)\n        : shiftTowardsHue(src, newH, amount);\n    }\n  ),\n});\n","import { minBy, sortBy } from 'remeda';\nimport { buildTransform, Color } from '../domain/types';\nimport {\n  colorDiff,\n  fromHexColor,\n  getPixelFromSource,\n  isTransparent,\n  mapCoords,\n  mapFrames,\n  mapImageWithPrecompute,\n  toHexColor,\n  TRANSPARENT_COLOR,\n} from '../domain/utils';\nimport { sliderParam } from '../params/sliderParam';\n\nexport const reduceColorPalette = buildTransform({\n  name: 'Reduce Color Palette',\n  description:\n    'Reduce the number of unique colors in the gif, to reduce the file size.' +\n    'This can be a slow operation depending on the number of final colors',\n  params: [\n    sliderParam({\n      name: 'Percent Reduction',\n      description:\n        '0% will have no effect, 100% will result in just one unique color in the result',\n      defaultValue: 70,\n      min: 0,\n      max: 100,\n      step: 5,\n    }),\n  ] as const,\n  fn: mapImageWithPrecompute(\n    ({ image, parameters: [percentReduction] }) => {\n      // Buid up a set of all unique colors.\n      // These will be our data points that we're going to group into to N clusters\n      const allColorsSet = new Set<string>();\n      mapFrames(image, (frame) =>\n        mapCoords(image.dimensions, (coord) => {\n          const px = getPixelFromSource(image.dimensions, frame, coord);\n          if (!isTransparent(px)) {\n            allColorsSet.add(toHexColor(px));\n          }\n          return TRANSPARENT_COLOR; // Not actually used, just makes TS happy\n        })\n      );\n\n      const allColors = Array.from(allColorsSet).map(fromHexColor);\n      const numColors = Math.max(\n        Math.floor((allColors.length * (100 - percentReduction)) / 100),\n        1\n      );\n\n      // Create a mapping of each unique color to the list of colors are the closest to it.\n      // We'll then pick the top N colors.\n      // Lastly, we'll replace every pixel with the color that it reduces to.\n\n      // colorMap[i].numClosestColors is the number of colors closest to allColors[i]\n      const colorMap: { color: Color; numClosestColors: number }[] =\n        allColors.map((c) => ({\n          color: c,\n          numClosestColors: 0,\n        }));\n\n      for (let i = 1; i < allColors.length; i += 1) {\n        let closestColorIdx = 0;\n        let closetsColorDist = colorDiff(\n          allColors[i],\n          allColors[closestColorIdx]\n        );\n        // Find the other color that is closest to this one\n        for (let k = 0; k < allColors.length; k += 1) {\n          if (k === i) {\n            // Don't check the distance between this color and itself\n            continue;\n          }\n          const dist = colorDiff(allColors[k], allColors[i]);\n          if (dist < closetsColorDist) {\n            closestColorIdx = k;\n            closetsColorDist = dist;\n          }\n        }\n        colorMap[closestColorIdx].numClosestColors += 1;\n      }\n\n      const colorPalette = sortBy(colorMap, [(c) => c.numClosestColors, 'desc'])\n        .slice(0, numColors)\n        .map(({ color }) => color);\n\n      return { colorPalette };\n    },\n    ({ coord, getSrcPixel, computed: { colorPalette } }) => {\n      const px = getSrcPixel(coord);\n      if (isTransparent(px)) {\n        return px;\n      }\n      // Find the color in the palette this one is closest to\n      const closestColor = minBy(colorPalette, (top) => colorDiff(top, px))!;\n      return closestColor;\n    }\n  ),\n});\n","import { range } from 'remeda';\nimport { buildTransform } from '../domain/types';\nimport { sliderParam } from '../params/sliderParam';\n\nexport const repeatAnimation = buildTransform({\n  name: 'Repeat Animation',\n  description: 'Repeats the current animation some number of times',\n  params: [\n    sliderParam({\n      name: 'Number of Repeats',\n      defaultValue: 1,\n      min: 1,\n      max: 50,\n    }),\n  ] as const,\n  fn: ({ image, parameters: [numRepeats] }) => ({\n    dimensions: image.dimensions,\n    frames: range(0, image.frames.length * (numRepeats + 1)).map(\n      (i) => image.frames[i % image.frames.length]\n    ),\n  }),\n});\n","import { buildTransform } from '../domain/types';\nimport { resizeImage as resizeImageUtil } from '../domain/utils';\nimport { intParam } from '../params/intParam';\n\nexport const resizeImage = buildTransform({\n  name: 'Resize Image',\n  description:\n    'Change the dimensions of the image. ' +\n    'If bigger than original, the extra space will be transparent. ' +\n    'If smaller, the image will be cropped. ',\n  params: [\n    intParam({\n      name: 'Width',\n      description:\n        'Set to 0 when height is set to non-zero to keep the same aspect ratio',\n      defaultValue: 128,\n      min: 0,\n    }),\n    intParam({\n      name: 'Height',\n      description:\n        'Set to 0 when width is set to non-zero to keep the same aspect ratio',\n      defaultValue: 128,\n      min: 0,\n    }),\n  ] as const,\n  fn: ({ image, parameters: [resizeToWidth, resizeToHeight] }) => {\n    const [oldWidth, oldHeight] = image.dimensions;\n    const newWidth =\n      resizeToWidth === 0\n        ? Math.ceil((oldWidth / oldHeight) * resizeToHeight)\n        : resizeToWidth;\n    const newHeight =\n      resizeToHeight === 0\n        ? Math.ceil((oldHeight / oldWidth) * resizeToWidth)\n        : resizeToHeight;\n    return resizeImageUtil({\n      image,\n      newWidth,\n      newHeight,\n    });\n  },\n});\n","import { reverse } from 'remeda';\nimport { buildTransform } from '../domain/types';\n\nexport const reverseAnimation = buildTransform({\n  name: 'Reverse Animation',\n  description: 'Reverses the animation',\n  params: [],\n  fn: ({ image }) => ({\n    dimensions: image.dimensions,\n    frames: reverse(image.frames),\n  }),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImageWithPrecompute } from '../domain/utils';\nimport { sliderParam } from '../params/sliderParam';\n\nexport const ripple = buildTransform({\n  name: 'Ripple',\n  description: 'Create a ripple effect, like water',\n  params: [\n    sliderParam({\n      name: 'Amplitude',\n      defaultValue: 20,\n      min: 0,\n      max: 100,\n      step: 5,\n      description: 'How strong the ripple effect should be',\n    }),\n    sliderParam({\n      name: 'Period',\n      defaultValue: 1,\n      min: 1,\n      max: 20,\n      description: 'How many ripples you want',\n    }),\n  ] as const,\n  fn: mapImageWithPrecompute(\n    ({ animationProgress }) => ({\n      shift: animationProgress * 2 * Math.PI,\n    }),\n    ({\n      computed: { shift },\n      coord: [x, y],\n      dimensions: [, height],\n      parameters: [amplitude, period],\n      getSrcPixel,\n    }) => {\n      const offset = Math.round(\n        amplitude * Math.sin((y / height) * period * Math.PI + shift)\n      );\n\n      return getSrcPixel([x + offset, y]);\n    }\n  ),\n});\n","import { buildTransform, Coord } from '../domain/types';\nimport { mapImageWithPrecompute } from '../domain/utils';\nimport { radioParam } from '../params/radioParam';\n\nexport const rotate = buildTransform({\n  name: 'Rotate',\n  description: 'Make the image rotate about the center point',\n  params: [\n    radioParam<'clockwise' | 'counter'>({\n      name: 'Direction',\n      defaultValue: 'clockwise',\n      options: [\n        { name: 'Clockwise', value: 'clockwise' },\n        { name: 'Counter-Clockwise', value: 'counter' },\n      ],\n    }),\n  ] as const,\n  fn: mapImageWithPrecompute(\n    ({ animationProgress, parameters: [direction] }) => {\n      const amount = animationProgress * (direction === 'counter' ? 1 : -1);\n      return {\n        cos: Math.cos(2 * Math.PI * amount),\n        sin: Math.sin(2 * Math.PI * amount),\n      };\n    },\n    ({\n      dimensions: [width, height],\n      coord: [x, y],\n      computed: { cos, sin },\n      getSrcPixel,\n    }) => {\n      const centerX = width / 2;\n      const centerY = height / 2;\n      const xRelCenter = x - centerX;\n      const yRelCenter = y - centerY;\n\n      const newCoord: Coord = [\n        Math.round(centerX + xRelCenter * cos - yRelCenter * sin),\n        Math.round(centerY + yRelCenter * cos + xRelCenter * sin),\n      ];\n\n      return getSrcPixel(newCoord);\n    }\n  ),\n});\n","import { buildTransform, Coord } from '../domain/types';\nimport { mapImageWithPrecompute } from '../domain/utils';\n\nexport const roxbury = buildTransform({\n  name: 'Roxbury',\n  description: \"Baby, don't hurt me\",\n  params: [],\n  fn: mapImageWithPrecompute(\n    ({ dimensions: [width, height], animationProgress }) => {\n      // 4 phases:\n      //  0 -> freeze\n      //  1 -> rotate clockwise\n      //  2 -> freeze\n      //  3 -> rotate counter-clockwise\n      const phase = Math.floor(animationProgress * 4);\n      const phaseIdx = (animationProgress - phase / 4) * 4;\n\n      const maxAngle = (Math.PI / 2) * 0.2; // 40% of 90 degrees\n\n      const angle =\n        phase === 0\n          ? 0\n          : phase === 1\n          ? phaseIdx * maxAngle // Rotate clockwise\n          : phase === 2\n          ? maxAngle // Freeze!\n          : (1 - phaseIdx) * maxAngle; // Rotate counter-clockwise\n\n      return {\n        angle,\n        cos: Math.cos(-angle * 1.35),\n        sin: Math.sin(-angle * 1.35),\n        rotatePointX: width * 0.25,\n        rotatePointY: height * 0.7,\n      };\n    },\n    ({\n      computed: { angle, cos, sin, rotatePointX, rotatePointY },\n      coord: [x, y],\n      getSrcPixel,\n    }) => {\n      const xRelCenter = Math.floor(x - rotatePointX + 8 * Math.sin(angle));\n      const yRelCenter = Math.floor(y - rotatePointY + 8 * Math.cos(angle));\n\n      const newCoord: Coord = [\n        Math.round(rotatePointX + xRelCenter * cos - yRelCenter * sin),\n        Math.round(rotatePointY + yRelCenter * cos + xRelCenter * sin),\n      ];\n\n      return getSrcPixel(newCoord);\n    }\n  ),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImageWithPrecompute } from '../domain/utils';\nimport { floatParam } from '../params/floatParam';\n\nexport const shake = buildTransform({\n  name: 'Shake',\n  description: 'Make the image shake back and forth',\n  params: [\n    floatParam({ name: 'Amplitude', defaultValue: 10, min: 0 }),\n  ] as const,\n  fn: mapImageWithPrecompute(\n    ({ animationProgress, parameters: [amplitude] }) => ({\n      xOffset: Math.round(\n        amplitude * Math.cos(animationProgress * 2 * Math.PI)\n      ),\n    }),\n    ({ computed: { xOffset }, coord: [x, y], getSrcPixel }) =>\n      getSrcPixel([x + xOffset, y])\n  ),\n});\n","import { range } from 'remeda';\nimport { buildTransform } from '../domain/types';\nimport { getPixelFromSource, mapCoords } from '../domain/utils';\nimport { radioParam } from '../params/radioParam';\n\nexport const slowAnimation = buildTransform({\n  name: 'Slow Animation',\n  description: 'Attempts to slow the animation by adding intermediate frames',\n  params: [\n    radioParam<'basic' | 'smooth'>({\n      name: 'Interpolation Type',\n      options: [\n        { name: 'Basic', value: 'basic' },\n        { name: 'Smooth', value: 'smooth' },\n      ],\n      defaultValue: 'basic',\n      description:\n        'With basic interpolation, frames are simply duplicated. ' +\n        'With smooth interpolation, intermediate frames are the average of their surrounding frames.',\n    }),\n  ],\n  fn: ({ image, parameters: [type] }) => ({\n    dimensions: image.dimensions,\n    frames: range(0, image.frames.length * 2 - 1).map((i) => {\n      // IE: if OF frame count = 4 (with indexes [0, 1, 2, 3])\n      // Result = [0, 0+1, 1, 1+2, 2, 2+3, 3], 3+4, 4]\n\n      // Even numbered frames are just the original frames\n      if (i % 2 === 0) {\n        return image.frames[i / 2];\n      }\n\n      const ogFrameIdx = (i - 1) / 2;\n\n      if (type === 'basic') {\n        // Intermediate frame is simply the previous OG frame\n        return image.frames[ogFrameIdx];\n      }\n\n      // Smooth interpolation means intermediate frames are an average of the surrounding frames\n      return mapCoords(image.dimensions, (coord) => {\n        const [r1, g1, b1, a1] = getPixelFromSource(\n          image.dimensions,\n          image.frames[ogFrameIdx],\n          coord\n        );\n        const [r2, g2, b2, a2] = getPixelFromSource(\n          image.dimensions,\n          image.frames[ogFrameIdx + 1],\n          coord\n        );\n        return [(r1 + r2) / 2, (g1 + g2) / 2, (b1 + b2) / 2, (a1 + a2) / 2];\n      });\n    }),\n  }),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage } from '../domain/utils';\n\nexport const spin = buildTransform({\n  disabled: true,\n  name: 'Spin',\n  description: 'Make the image spin in a 3D-like way',\n  params: [],\n  fn: mapImage(\n    ({ image, coord: [x, y], frameCount, frameIndex, getSrcPixel }) => {\n      const centerX = image.dimensions[0] / 2;\n      const idx = frameIndex / frameCount;\n      // 0% -> 0\n      // 25% -> Pi / 2\n      // 50% -> Pi\n      // 75% -> 3/2 * Pi\n      // 100% -> 2 * Pi\n      const angle = 2 * Math.PI * idx;\n      const newX = Math.round(centerX + x * Math.cos(angle));\n      return getSrcPixel([newX, y]);\n    }\n  ),\n});\n\n/*\nx = centerX\nnewX = centerX\n\nx = 0, idx = 0, angle = cos(0) = 1, relX = centerX - 0\n  newX = 0\nx = 0, idx = 25%, angle = cos(45deg) ~ 0.5, relX = centerX - 0\n  newX = centerX - cos(45) * x\nx = 0, idx = 50%, angle = cos(90deg) = 0, relX = centerX - 0\n  newX = (centerX - 0)\n\nx = 25%, idx = 25%, angle ~ 0.5, relX = centerX - 0\n  newX = centerX - angle * x\n*/\n","import { buildTransform } from '../domain/types';\nimport { isTransparent, mapImage } from '../domain/utils';\nimport { radioParam } from '../params/radioParam';\nimport { sliderParam } from '../params/sliderParam';\n\nexport const staticc = buildTransform({\n  name: 'Static',\n  description: 'Adds random static to the image',\n  params: [\n    radioParam<'background' | 'foreground'>({\n      name: 'Type',\n      description: 'Whether to apply the party to the foreground or background',\n      defaultValue: 'background',\n      options: [\n        {\n          name: 'Background',\n          value: 'background',\n        },\n        {\n          name: 'Foreground',\n          value: 'foreground',\n        },\n      ],\n    }),\n    sliderParam({\n      name: 'Strength',\n      description: 'Higher number increases the amount of static pixels',\n      defaultValue: 25,\n      min: 5,\n      max: 100,\n      step: 5,\n    }),\n  ],\n  fn: mapImage(\n    ({ coord, getSrcPixel, parameters: [type, strength], random }) => {\n      const src = getSrcPixel(coord);\n\n      const isBackground = isTransparent(src);\n\n      if (type === 'foreground' ? isBackground : !isBackground) {\n        return src;\n      }\n\n      if (isBackground && type === 'background') {\n        const inverse = Math.ceil(random() * 100) < strength;\n        const grey = Math.ceil(random() * 255);\n\n        return inverse ? [grey, grey, grey, 255] : src;\n      }\n\n      const isStatic = Math.ceil(random() * 100) < strength;\n      const grey = Math.ceil(random() * 255);\n\n      return isStatic ? [grey, grey, grey, src[3]] : src;\n    }\n  ),\n});\n","import { Checkbox, Stack, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { HelpTooltip } from '../components/HelpTooltip';\nimport { ParamFunction, ParamValue } from '../domain/types';\n\nconst CheckboxParam: React.FC<{\n  name: string;\n  value?: boolean;\n  description?: string;\n  onChange: (v: ParamValue<boolean>) => void;\n}> = ({ name, value, description, onChange }) => {\n  return (\n    <Stack spacing={1}>\n      <Stack direction=\"row\" spacing={1}>\n        <Typography variant=\"body2\" paddingTop=\"0.5rem\">\n          {name}\n        </Typography>\n        <span style={{ paddingTop: '0.5rem' }}>\n          <HelpTooltip description={description} />\n        </span>\n        <Checkbox\n          aria-label={name}\n          checked={value}\n          onChange={(e, value) => onChange({ valid: true, value })}\n        />\n      </Stack>\n    </Stack>\n  );\n};\n\nexport function checkboxParam(args: {\n  name: string;\n  defaultValue?: boolean;\n  description?: string;\n}): ParamFunction<boolean> {\n  return {\n    name: args.name,\n    defaultValue:\n      args.defaultValue !== undefined\n        ? { valid: true, value: args.defaultValue }\n        : { valid: false },\n    fn: (params) => {\n      return (\n        <CheckboxParam\n          name={args.name}\n          value={params.value.valid ? params.value.value : undefined}\n          onChange={params.onChange}\n          description={args.description}\n        />\n      );\n    },\n  };\n}\n","import { buildTransform } from '../domain/types';\nimport { fromHexColor, mapImage, colorDiff } from '../domain/utils';\nimport { checkboxParam } from '../params/checkboxParam';\nimport { colorPickerParam } from '../params/colorPickerParam';\nimport { sliderParam } from '../params/sliderParam';\n\nexport const transparency = buildTransform({\n  name: 'Transparency',\n  description: 'Set certain pixels to be transparent',\n  params: [\n    checkboxParam({\n      name: 'Matches are Transparent',\n      description:\n        'If checked, then pixels matching this color will be made transparent. If not checked, non-matching pixels are transparent.',\n      defaultValue: true,\n    }),\n    colorPickerParam({\n      name: 'Color',\n      defaultValue: fromHexColor('#000000'),\n    }),\n    sliderParam({\n      name: 'Tolerance',\n      description:\n        'A higher number will mean colors that are \"close\" to the chosen color will be transparent. (0 - 100)',\n      defaultValue: 10,\n      min: 0,\n      max: 100,\n      step: 2,\n    }),\n  ] as const,\n  fn: mapImage(\n    ({\n      coord,\n      getSrcPixel,\n      parameters: [matchesTransparent, selectedColor, tolerance],\n    }) => {\n      const src = getSrcPixel(coord);\n\n      const withinTolerance = colorDiff(src, selectedColor) * 100 <= tolerance;\n\n      if (matchesTransparent ? withinTolerance : !withinTolerance) {\n        return [src[0], src[1], src[2], 0];\n      }\n      return src;\n    }\n  ),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage } from '../domain/utils';\nimport { intParam } from '../params/intParam';\n\nexport const transpose = buildTransform({\n  name: 'Transpose',\n  description: 'Move the image left or right, up or down',\n  params: [\n    intParam({ name: 'X', defaultValue: 0 }),\n    intParam({ name: 'Y', defaultValue: 0 }),\n  ] as const,\n  fn: mapImage(({ coord: [x, y], getSrcPixel, parameters: [transX, transY] }) =>\n    getSrcPixel([x + transX, y + transY])\n  ),\n});\n","import { pipe, reject, sortBy } from 'remeda';\nimport { ParamFunction, Transform } from '../domain/types';\nimport { assert } from '../domain/utils';\nimport { adjustImage } from './adjust-image';\nimport { backgroundColor } from './background-color';\nimport { backgroundImage } from './background-image';\nimport { bounce } from './bounce';\nimport { bounceAnimation } from './bounce-animation';\nimport { circle } from './circle';\nimport { colors } from './colors';\nimport { colorsBackground } from './colors-background';\nimport { doubleVision } from './double-vision';\nimport { expand } from './expand';\nimport { fill } from './fill';\nimport { fisheye } from './fisheye';\nimport { grid } from './grid';\nimport { hueChange } from './hue-change';\nimport { hueShift } from './hue-shift';\nimport { hueShiftPulse } from './hue-shift-pulse';\nimport { hueWave } from './hue-wave';\nimport { lightning } from './lightning';\nimport { nuke } from './nuke';\nimport { party } from './party';\nimport { partyTwo } from './party-two';\nimport { pinwheel } from './pinwheel';\nimport { pinwheelParty } from './pinwheel-party';\nimport { radiance } from './radiance';\nimport { radianceParty } from './radiance-party';\nimport { reduceColorPalette } from './reduce-color-palette';\nimport { repeatAnimation } from './repeat-animation';\nimport { resizeImage } from './resize-image';\nimport { reverseAnimation } from './reverse-animation';\nimport { ripple } from './ripple';\nimport { rotate } from './rotate';\nimport { roxbury } from './roxbury';\nimport { shake } from './shake';\nimport { slowAnimation } from './slow-animation';\nimport { spin } from './spin';\nimport { staticc } from './static';\nimport { transparency } from './transparency';\nimport { transpose } from './transpose';\n\nexport const POSSIBLE_TRANSFORMS = pipe(\n  [\n    adjustImage,\n    backgroundColor,\n    backgroundImage,\n    bounce,\n    bounceAnimation,\n    circle,\n    colors,\n    colorsBackground,\n    doubleVision,\n    expand,\n    fill,\n    fisheye,\n    grid,\n    hueChange,\n    hueShift,\n    hueShiftPulse,\n    hueWave,\n    lightning,\n    nuke,\n    party,\n    partyTwo,\n    pinwheel,\n    pinwheelParty,\n    radiance,\n    radianceParty,\n    reduceColorPalette,\n    repeatAnimation,\n    resizeImage,\n    reverseAnimation,\n    ripple,\n    rotate,\n    roxbury,\n    shake,\n    slowAnimation,\n    spin,\n    staticc,\n    transparency,\n    transpose,\n  ],\n  sortBy((x) => x.name),\n  reject((x) => x.disabled)\n);\n\nexport const transformByName = (\n  name: string\n): Transform<readonly ParamFunction<any>[]> => {\n  const t = POSSIBLE_TRANSFORMS.find((t) => t.name === name);\n  assert(t, `Could not find matching transform: ${name}`);\n  return t as any as Transform<readonly ParamFunction<any>[]>;\n};\n","// @ts-ignore\nimport getPixels from 'get-pixels';\n// @ts-ignore\nimport gifEncoder from 'gif-encoder';\nimport seedrandom from 'seedrandom';\nimport { transformByName } from '../transforms';\nimport {\n  Color,\n  Image,\n  ImageData,\n  ImageTransformResult,\n  TransformInput,\n} from './types';\nimport {\n  fromHexColor,\n  getPixelFromSource,\n  isTransparent,\n  randomColor,\n  toHexColor,\n} from './utils';\n\nexport interface RunArgs {\n  inputDataUrl: string;\n  originalImage: Image;\n  transformList: TransformInput[];\n  fps: number;\n}\n\n// Returns a list of gif data URLs, for each transform\nexport const runTransforms = async (\n  args: RunArgs,\n  cb: (result: ImageTransformResult) => void\n): Promise<void> => {\n  const { originalImage, transformList, inputDataUrl, fps } = args;\n  const random = seedrandom(inputDataUrl);\n\n  let currentImage = originalImage;\n\n  for (let idx = 0; idx < transformList.length; idx += 1) {\n    const transformInput = transformList[idx];\n    const transform = transformByName(transformInput.transformName);\n    const result = transform.fn({\n      image: currentImage,\n      parameters: transformInput.params,\n      random,\n    });\n\n    const transparentColor = getTransparentColor(result, random);\n\n    // Transform any of our transparent pixels to what our gif understands to be transparent\n    const image = encodeTransparency(result, transparentColor);\n\n    const gif = await createGif({\n      image,\n      transparentColor,\n      fps,\n    });\n\n    currentImage = result;\n    cb({\n      gif,\n      width: result.dimensions[0],\n      height: result.dimensions[1],\n    });\n  }\n};\n\n/**\n * Each pixel in our image has an alpha channel, but gifs don't.\n * We transform each pixel that appears transparent to be a designated transparent color.\n */\nconst encodeTransparency = (\n  image: Image,\n  transparentColor: Color | undefined\n): Image => {\n  const newFrames = image.frames.map((frame) => {\n    const img = new Uint8Array(frame.length);\n    for (let i = 0; i < frame.length; i += 4) {\n      if (transparentColor && frame[i + 3] < 128) {\n        // Anything more than halfway transparent is considered transparent\n        img[i] = transparentColor[0];\n        img[i + 1] = transparentColor[1];\n        img[i + 2] = transparentColor[2];\n        img[i + 3] = 0;\n      } else {\n        img[i] = frame[i];\n        img[i + 1] = frame[i + 1];\n        img[i + 2] = frame[i + 2];\n        img[i + 3] = 0; // Gifs don't do transparency, I dunno why they take in an alpha value...\n      }\n    }\n    return img;\n  });\n\n  return {\n    dimensions: image.dimensions,\n    frames: newFrames,\n  };\n};\n\nconst createGif = async ({\n  image,\n  transparentColor,\n  fps,\n}: {\n  image: Image;\n  transparentColor: Color | undefined;\n  fps: number;\n}): Promise<string> =>\n  new Promise<string>((resolve) => {\n    const [width, height] = image.dimensions;\n    const gif = new gifEncoder(width, height);\n\n    gif.setFrameRate(fps);\n    gif.setRepeat(0); // Loop indefinitely\n\n    // gif.setQuality(10);\n    gif.writeHeader();\n\n    if (transparentColor) {\n      // Need to convert '#RRGGBB' to '0xRRGGBB'\n      const hexColor = toHexColor(transparentColor).slice(1);\n      gif.setTransparent(`0x${hexColor}`);\n    }\n\n    let data: any[] = [];\n    gif.on('data', (chunk: any) => {\n      data.push(chunk);\n    });\n    gif.on('end', () => {\n      const dataUrl = URL.createObjectURL(\n        new Blob(data, { type: 'image/gif' })\n      );\n      resolve(dataUrl);\n    });\n\n    image.frames.forEach((f) => {\n      gif.addFrame(f);\n    });\n\n    gif.finish();\n  });\n\nexport const readImage = (dataUrl: string): Promise<Image> =>\n  new Promise<Image>((res, rej) =>\n    getPixels(\n      dataUrl,\n      (err: Error, results: { shape: number[]; data: ImageData }) => {\n        if (err) {\n          return rej(err);\n        }\n\n        if (results.shape.length === 3) {\n          const [width, height] = results.shape;\n          // Single frame\n          return res({\n            frames: [Uint8Array.from(results.data)],\n            dimensions: [width, height],\n          });\n        }\n\n        // Multiple frames, need to slice up the image data into numFrames slices\n        const [numFrames, width, height] = results.shape;\n        const sliceSize = width * height * 4;\n        const frames: Uint8Array[] = [];\n        for (let i = 0; i < numFrames; i += 1) {\n          frames.push(\n            results.data.subarray(i * sliceSize, (i + 1) * sliceSize)\n          );\n        }\n        return res({\n          frames,\n          dimensions: [width, height],\n        });\n      }\n    )\n  );\n\nconst getTransparentColor = (\n  image: Image,\n  random: seedrandom.prng\n): Color | undefined => {\n  let hasTransparent = false;\n  const seenPixels = new Set<string>();\n  const [width, height] = image.dimensions;\n  let attempt = toHexColor([0, 255, 0, 255]); // Just start with green for now, since it's a likely candidate\n  image.frames.forEach((frame) => {\n    for (let y = 0; y < height; y += 1) {\n      for (let x = 0; x < width; x += 1) {\n        const px = getPixelFromSource(image.dimensions, frame, [x, y]);\n        if (isTransparent(px)) {\n          hasTransparent = true;\n        } else {\n          const hex = toHexColor(px);\n          seenPixels.add(hex);\n          if (hex === attempt) {\n            // Uh oh, can't use our current pick for transparent because it exists in the image already\n            attempt = findRandomColorNotInSet(random, seenPixels);\n          }\n        }\n      }\n    }\n  });\n  return hasTransparent ? fromHexColor(attempt) : undefined;\n};\n\nconst findRandomColorNotInSet = (\n  random: seedrandom.prng,\n  set: Set<string>,\n  attempts = 0\n): string => {\n  const col = toHexColor(randomColor(random));\n  if (attempts > 2000) {\n    // Just give up in order to prevent a stack overflow or something...\n    return col;\n  }\n  return set.has(col)\n    ? findRandomColorNotInSet(random, set, attempts + 1)\n    : col;\n};\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/transform.worker.b396b1b5.worker.js\");\n}\n","import { RunArgs } from './run';\n// @ts-ignore\nimport RunTransformWorker from './transform.worker';\nimport { AsyncRunMessage, ImageTransformResult } from './types';\n\nexport const runTransformsAsync = (\n  args: RunArgs,\n  cb: (result: ImageTransformResult) => void\n) =>\n  new Promise<void>((resolve, reject) => {\n    const worker = new RunTransformWorker();\n\n    // worker.addEventListener('message', (a: any) => {\n    //   console.log('Received message', a);\n    // });\n\n    worker.addEventListener('error', reject);\n\n    worker.addEventListener('messageerror', reject);\n\n    worker.onmessage = (message: { data: AsyncRunMessage }) => {\n      // See transform.worker.ts for what messages look like\n      const data = message.data;\n      if (data.status === 'in-progress') {\n        cb(data.result);\n      } else {\n        resolve();\n      }\n    };\n\n    worker.postMessage(args);\n  });\n","import {\n  Button,\n  CircularProgress,\n  Divider,\n  Grid,\n  Icon,\n  LinearProgress,\n  Stack,\n  Typography,\n} from '@material-ui/core';\nimport React from 'react';\nimport { readImage, runTransforms } from '../domain/run';\nimport { runTransformsAsync } from '../domain/runAsync';\nimport {\n  AppState,\n  ImageTransformResult,\n  TransformInput,\n} from '../domain/types';\nimport { assert } from '../domain/utils';\nimport { sliderParam } from '../params/sliderParam';\n\nconst ENV = (window as any).ENV as 'DEV' | 'PROD';\n\ninterface ComputeBoxProps {\n  computeDisabled: boolean;\n  appState: AppState;\n  onFpsChange: (fps: number) => void;\n  onComputed: () => void;\n}\n\ntype ComputeState =\n  | {\n      loading: false;\n      results: { transformName: string; gif: string }[];\n      computeTime: number | undefined;\n    }\n  | { loading: true };\n\nconst DEFAULT_FPS = 20;\nconst fpsParam = sliderParam({\n  name: 'Frames per Second',\n  defaultValue: DEFAULT_FPS,\n  min: 1,\n  max: 60,\n});\n\nexport const ComputeBox: React.FC<ComputeBoxProps> = ({\n  computeDisabled,\n  appState,\n  onFpsChange,\n  onComputed,\n}) => {\n  const [computeState, setComputeState] = React.useState<ComputeState>({\n    loading: false,\n    results: [],\n    computeTime: undefined,\n  });\n  const [progress, setProgress] = React.useState<number | undefined>();\n\n  return (\n    <Stack spacing={1}>\n      <Typography variant=\"h5\">Create Gif</Typography>\n\n      <div style={{ maxWidth: '300px' }}>\n        {fpsParam.fn({\n          value: { valid: true, value: appState.fps },\n          onChange: (x) => {\n            if (x.valid) {\n              onFpsChange(x.value);\n            }\n          },\n        })}\n      </div>\n      <Button\n        variant=\"contained\"\n        sx={{ maxWidth: '300px' }}\n        endIcon={\n          !computeState.loading && appState.dirty ? (\n            <Icon>priority_high</Icon>\n          ) : undefined\n        }\n        disabled={computeDisabled}\n        onClick={async () => {\n          const transformInputs = appState.transforms.map(\n            (t): TransformInput => ({\n              transformName: t.transformName,\n              params: t.paramsValues.map((p) => {\n                assert(p.valid, 'Got non-valid when compute box was clicked');\n                return p.value;\n              }),\n            })\n          );\n          setComputeState({ loading: true });\n          try {\n            assert(\n              appState.baseImage,\n              'No source image, this button should be disabled!'\n            );\n            const start = Date.now();\n            const timings: number[] = [];\n            setProgress(0);\n\n            const originalImage = await readImage(appState.baseImage);\n\n            const results: ImageTransformResult[] = [];\n\n            // Can't get web workers working with the dev build, so just use the synchrounous version\n            //  if not a prod build.\n            await (ENV === 'DEV' ? runTransforms : runTransformsAsync)(\n              {\n                inputDataUrl: appState.baseImage,\n                originalImage,\n                transformList: transformInputs,\n                fps: appState.fps,\n              },\n              (image) => {\n                results.push(image);\n                setProgress((results.length / transformInputs.length) * 100);\n                setComputeState({\n                  loading: false,\n                  computeTime: undefined,\n                  results: results.map((result, idx) => ({\n                    transformName: appState.transforms[idx].transformName,\n                    gif: result.gif,\n                  })),\n                });\n              }\n            );\n\n            const computeTime = Math.ceil((Date.now() - start) / 1000);\n            setComputeState({\n              loading: false,\n              computeTime,\n              results: results.map((result: any, idx: number) => ({\n                transformName: appState.transforms[idx].transformName,\n                gif: result.gif,\n              })),\n            });\n\n            // Google analytics\n            timings.forEach((timingValue, idx) => {\n              ga('send', {\n                hitType: 'timing',\n                timingCategory: 'computeStep',\n                timingVar: appState.transforms[idx].transformName,\n                timingValue,\n              });\n            });\n            ga('send', {\n              hitType: 'timing',\n              timingCategory: 'computeTotal',\n              timingVar: appState.transforms.length,\n              timingValue: computeTime,\n            });\n\n            setProgress(undefined);\n            onComputed();\n          } catch (err) {\n            console.error(err);\n            console.error((err as any).stack);\n          }\n        }}\n      >\n        {computeState.loading ? (\n          <CircularProgress color=\"inherit\" />\n        ) : (\n          'Compute'\n        )}\n      </Button>\n      {progress !== undefined && (\n        <LinearProgress variant=\"determinate\" value={progress} />\n      )}\n      {!computeState.loading && computeState.computeTime !== undefined && (\n        <>\n          <Divider />\n          <Typography variant=\"caption\">\n            Compute Time: {computeState.computeTime} second(s)\n          </Typography>\n        </>\n      )}\n\n      {!computeState.loading && computeState.results.length > 0 && (\n        <>\n          <Divider />\n          <Grid\n            container\n            spacing={2}\n            padding={1}\n            columns={{ xs: 4, sm: 8, md: 12 }}\n          >\n            {computeState.results.map(({ gif, transformName }, idx) => (\n              <Grid item xs={4} sm={4} md={4} key={`${transformName}-${idx}`}>\n                <Typography variant=\"subtitle2\">{transformName}</Typography>\n                <img\n                  src={gif}\n                  alt={`gif-${transformName}-${idx}`}\n                  style={{ maxWidth: '300px', maxHeight: 'auto' }}\n                ></img>\n              </Grid>\n            ))}\n          </Grid>\n        </>\n      )}\n    </Stack>\n  );\n};\n","import {\n  Autocomplete,\n  Divider,\n  FormControl,\n  Icon,\n  IconButton,\n  Paper,\n  Stack,\n  TextField,\n  Tooltip,\n  Typography,\n} from '@material-ui/core';\nimport React from 'react';\nimport { ParamFunction, ParamValue, Transform } from '../domain/types';\n\ninterface SelectedTransform {\n  transform: Transform<any>;\n  paramValues: ParamValue<any>[];\n}\n\ninterface ImageTransformProps {\n  selectedTransform: SelectedTransform;\n  possibleTransforms: Transform<any>[];\n  index: number;\n  onSelect: (selected: SelectedTransform) => void;\n  onRemove: () => void;\n  onMoveLeft?: () => void;\n  onMoveRight?: () => void;\n}\n\nexport const ImageTransform: React.FC<ImageTransformProps> = ({\n  selectedTransform,\n  possibleTransforms,\n  index,\n  onSelect,\n  onRemove,\n  onMoveLeft,\n  onMoveRight,\n}) => {\n  return (\n    <Paper style={{ padding: 8 }} elevation={3}>\n      <Stack spacing={1}>\n        <Stack direction=\"row\" spacing={2}>\n          <Typography variant=\"subtitle1\">{index + 1}</Typography>\n          <Tooltip title=\"Delete transform\">\n            <IconButton aria-label=\"delete\" onClick={onRemove}>\n              <Icon>delete</Icon>\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Move transform left\">\n            <IconButton\n              aria-label=\"delete\"\n              onClick={onMoveLeft}\n              disabled={!onMoveLeft}\n            >\n              <Icon>chevron_left</Icon>\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Move transform right\">\n            <IconButton\n              aria-label=\"delete\"\n              onClick={onMoveRight}\n              disabled={!onMoveRight}\n            >\n              <Icon>chevron_right</Icon>\n            </IconButton>\n          </Tooltip>\n        </Stack>\n        <Stack direction=\"row\" spacing={4}>\n          <FormControl fullWidth>\n            <Autocomplete\n              disableClearable\n              value={selectedTransform.transform.name}\n              options={possibleTransforms.map((t) => t.name)}\n              onChange={(event, newTransformName) => {\n                const t = possibleTransforms.find(\n                  (t) => t.name === newTransformName\n                )!;\n                // Reset all the params when you select a new transform\n                onSelect({\n                  transform: t,\n                  paramValues: t.params.map(\n                    (p: ParamFunction<any>) => p.defaultValue\n                  ),\n                });\n              }}\n              renderInput={(params) => (\n                <TextField {...params} label=\"Transform\" />\n              )}\n            />\n          </FormControl>\n        </Stack>\n        {selectedTransform.transform.description && (\n          <Typography variant=\"caption\">\n            {selectedTransform.transform.description}\n          </Typography>\n        )}\n        {selectedTransform.transform.params.length > 0 && (\n          <Typography variant=\"subtitle1\">Parameters</Typography>\n        )}\n        <Stack divider={<Divider />} spacing={2}>\n          {selectedTransform.transform.params.map(\n            // Create elements for each of the parameters for the selectect transform.\n            // Each of these would get an onChange event so we know when the user has\n            //  selected a value.\n            (param: ParamFunction<any>, idx: number) => {\n              const ele = param.fn({\n                value: selectedTransform.paramValues[idx],\n                onChange: (v) => {\n                  onSelect({\n                    ...selectedTransform,\n                    paramValues: selectedTransform.paramValues.map((x, i) => {\n                      if (i === idx) {\n                        return v;\n                      }\n                      return x;\n                    }),\n                  });\n                },\n              });\n              return (\n                <React.Fragment\n                  key={`${selectedTransform.transform.name}-${param.name}`}\n                >\n                  {ele}\n                </React.Fragment>\n              );\n            }\n          )}\n        </Stack>\n      </Stack>\n    </Paper>\n  );\n};\n","import { Button, Grid, Icon, Stack, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { ParamFunction, Transform, TransformWithParams } from '../domain/types';\nimport { transformByName } from '../transforms';\nimport { ImageTransform } from './ImageTransform';\n\ninterface TransformListProps {\n  currentTransforms: TransformWithParams<any>[];\n  possibleTransforms: Transform<any>[];\n  onTransformsChange: (t: TransformWithParams<any>[]) => void;\n}\n\nexport const ImageTransformList: React.FC<TransformListProps> = ({\n  currentTransforms,\n  possibleTransforms,\n  onTransformsChange,\n}) => (\n  <Stack spacing={1}>\n    <Typography variant=\"h5\">Image Transforms</Typography>\n    <Grid\n      container\n      spacing={2}\n      padding={1}\n      columns={{ xs: 4, sm: 8, md: 12 }}\n      rowSpacing={4}\n    >\n      {currentTransforms.map((t, tIdx) => (\n        <Grid item xs={4} sm={4} md={4} key={`${t.transformName}-${tIdx}`}>\n          <ImageTransform\n            index={tIdx}\n            possibleTransforms={possibleTransforms}\n            selectedTransform={{\n              transform: transformByName(t.transformName),\n              paramValues: t.paramsValues,\n            }}\n            onRemove={() =>\n              onTransformsChange(\n                currentTransforms.filter((nextT, newIdx) => newIdx !== tIdx)\n              )\n            }\n            onMoveLeft={\n              tIdx > 0\n                ? () =>\n                    onTransformsChange(\n                      currentTransforms.map((nextT, newIdx) => {\n                        if (newIdx === tIdx - 1) {\n                          // This is the next item in the list\n                          return currentTransforms[newIdx + 1];\n                        } else if (tIdx === newIdx) {\n                          // This is the previous item\n                          return currentTransforms[tIdx - 1];\n                        } else {\n                          return nextT;\n                        }\n                      })\n                    )\n                : undefined\n            }\n            onMoveRight={\n              tIdx < currentTransforms.length - 1\n                ? () =>\n                    onTransformsChange(\n                      currentTransforms.map((nextT, newIdx) => {\n                        if (newIdx === tIdx + 1) {\n                          // This is the previous item in the list\n                          return currentTransforms[newIdx - 1];\n                        } else if (tIdx === newIdx) {\n                          // This is the next item\n                          return currentTransforms[tIdx + 1];\n                        } else {\n                          return nextT;\n                        }\n                      })\n                    )\n                : undefined\n            }\n            onSelect={(selected) =>\n              onTransformsChange(\n                currentTransforms.map((nextT, nextTIdx) => {\n                  if (tIdx === nextTIdx) {\n                    // This is the one we just changed\n                    return {\n                      transformName: selected.transform.name,\n                      paramsValues: selected.paramValues,\n                      computedImage: undefined,\n                    };\n                  }\n                  // Reset all the images if we changed anything\n                  return {\n                    transformName: nextT.transformName,\n                    paramsValues: nextT.paramsValues,\n                    computedImage: undefined,\n                  };\n                })\n              )\n            }\n          />\n        </Grid>\n      ))}\n      <Grid item xs={4} sm={4} md={4}>\n        <Stack spacing={4}>\n          <Button\n            fullWidth={false}\n            variant=\"contained\"\n            startIcon={<Icon>add</Icon>}\n            onClick={() =>\n              onTransformsChange([\n                ...currentTransforms,\n                {\n                  transformName: possibleTransforms[0].name,\n                  paramsValues: possibleTransforms[0].params.map(\n                    (p: ParamFunction<any>) => p.defaultValue\n                  ),\n                },\n              ])\n            }\n          >\n            New Transform\n          </Button>\n        </Stack>\n      </Grid>\n    </Grid>\n  </Stack>\n);\n","import { Alert, Button, Icon, Stack, Typography } from '@material-ui/core';\nimport * as lz from 'lz-string';\nimport React from 'react';\nimport { AppState } from '../domain/types';\n\ninterface ImportExportProps {\n  state: AppState;\n  onImport: (o: AppState) => void;\n}\n\nexport const ImportExport: React.FC<ImportExportProps> = ({\n  state,\n  onImport,\n}) => {\n  const [info, setInfo] = React.useState<string | undefined>();\n  const [isInvalid, setInvalid] = React.useState(false);\n\n  const showInfo = (text: string) => {\n    setInfo(text);\n    setTimeout(() => setInfo(undefined), 2000);\n  };\n\n  const showError = () => {\n    setInvalid(true);\n    setTimeout(() => setInvalid(false), 2000);\n  };\n\n  return (\n    <Stack spacing={3}>\n      <Typography variant=\"h5\">Import/Export</Typography>\n      <Button\n        startIcon={<Icon>file_upload</Icon>}\n        sx={{ maxWidth: '300px' }}\n        variant=\"contained\"\n        onClick={() => {\n          const output = lz.compressToBase64(JSON.stringify(state));\n          navigator.clipboard.writeText(output);\n          showInfo('Copied to clipboard');\n        }}\n      >\n        Export to clipboard <br />\n        (With Source Image)\n      </Button>\n\n      <Button\n        startIcon={<Icon>file_download</Icon>}\n        sx={{ maxWidth: '300px' }}\n        variant=\"contained\"\n        onClick={async () => {\n          try {\n            const clipboardContents = await navigator.clipboard.readText();\n            if (!clipboardContents) {\n              showError();\n              return;\n            }\n            const data = JSON.parse(\n              lz.decompressFromBase64(clipboardContents)!\n            );\n            if (!Array.isArray(data.transforms)) {\n              showError();\n              return;\n            }\n            onImport(data);\n            setInvalid(false);\n          } catch (e) {\n            console.error(e);\n            showError();\n          }\n        }}\n      >\n        Import from clipboard\n      </Button>\n      {info && (\n        <Alert severity=\"info\" sx={{ maxWidth: '300px' }}>\n          {info}\n        </Alert>\n      )}\n      {isInvalid && (\n        <Alert severity=\"error\" sx={{ maxWidth: '300px' }}>\n          Error importing from clipboard\n        </Alert>\n      )}\n    </Stack>\n  );\n};\n","import { AppState } from './domain/types';\n\nconst LOCAL_STORAGE_KEY = 'partymoji-state';\n\nexport const getStoredAppState = (): AppState | undefined => {\n  try {\n    const stored = window.localStorage.getItem(LOCAL_STORAGE_KEY);\n    if (stored) {\n      const savedState = JSON.parse(stored);\n      if (Array.isArray(savedState.transforms)) {\n        return savedState;\n      }\n    }\n  } catch (err) {\n    // @ts-ignore\n    console.error('Error loading state from local storage', err.stack || err);\n  }\n\n  return undefined;\n};\n\nexport const saveAppState = (state: AppState) => {\n  try {\n    window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(state));\n  } catch (err) {\n    // @ts-ignore\n    console.error('Error saving state to local storage', err.stack || err);\n  }\n};\n\nexport const clearAppState = () => {\n  try {\n    window.localStorage.removeItem(LOCAL_STORAGE_KEY);\n  } catch (err) {\n    // @ts-ignore\n    console.error('Error clearing state from local storage', err.stack || err);\n  }\n};\n","import {\n  Button,\n  Container,\n  Divider,\n  Icon,\n  Paper,\n  Stack,\n  Typography,\n} from '@material-ui/core';\nimport ScopedCssBaseline from '@material-ui/core/ScopedCssBaseline';\nimport React from 'react';\n\nimport { ComputeBox } from './components/ComputeBox';\nimport { Help } from './components/Help';\nimport { ImagePicker } from './components/ImagePicker';\nimport { ImageTransformList } from './components/ImageTransformList';\nimport { ImportExport } from './components/ImportExport';\nimport { AppState } from './domain/types';\nimport * as localStorage from './localStorage';\nimport { POSSIBLE_TRANSFORMS, transformByName } from './transforms';\n\n// Set to true to print out the current state at the bottom of the page\nconst DEBUG = false;\n\nconst DEFAULT_STATE: AppState = {\n  dirty: false,\n  transforms: [],\n  baseImage: undefined,\n  fps: 20,\n};\n\nexport const App: React.FC = () => {\n  const [state, setStateRaw] = React.useState(DEFAULT_STATE);\n\n  React.useEffect(() => {\n    // If we have local storage state on startup, then reload that\n    const stored = localStorage.getStoredAppState();\n    if (stored) {\n      setStateRaw({ ...stored, dirty: true });\n    }\n  }, []);\n\n  const setState = (newState: AppState) => {\n    localStorage.saveAppState(newState);\n    setStateRaw(newState);\n  };\n\n  if (DEBUG) {\n    (window as any).STATE = state;\n  }\n\n  const computeBtnDisbled =\n    !state.baseImage ||\n    state.transforms.length === 0 ||\n    !state.dirty ||\n    state.transforms.some((t) => {\n      const params = transformByName(t.transformName).params;\n      return (\n        params.length > 0 && t.paramsValues.every((p) => p.valid === false)\n      );\n    });\n\n  return (\n    <>\n      <ScopedCssBaseline />\n      <Container>\n        <Stack spacing={4} justifyContent=\"space-evenly\" divider={<Divider />}>\n          <Typography variant=\"h2\" pt={4}>\n            Partymoji\n          </Typography>\n          <Stack spacing={4} divider={<Divider />}>\n            {DEBUG && (\n              <Paper style={{ padding: 16 }}>\n                <Help />\n              </Paper>\n            )}\n            <Paper style={{ padding: 16 }}>\n              <Stack spacing={1}>\n                <Typography variant=\"h5\">Source Image</Typography>\n                <ImagePicker\n                  name=\"Choose a source image\"\n                  currentImageUrl={state.baseImage}\n                  onChange={(baseImage) => {\n                    setState({\n                      ...state,\n                      baseImage,\n                      dirty: true,\n                    });\n                  }}\n                />\n              </Stack>\n            </Paper>\n            <Paper style={{ padding: 16 }}>\n              <ImageTransformList\n                currentTransforms={state.transforms}\n                possibleTransforms={POSSIBLE_TRANSFORMS}\n                onTransformsChange={(transforms) =>\n                  setState({\n                    ...state,\n                    dirty: true,\n                    transforms,\n                  })\n                }\n              />\n            </Paper>\n            <Paper style={{ padding: 16 }}>\n              <ComputeBox\n                computeDisabled={computeBtnDisbled}\n                appState={state}\n                onFpsChange={(fps) =>\n                  setState({\n                    ...state,\n                    fps,\n                    dirty: true,\n                  })\n                }\n                onComputed={() =>\n                  setState({\n                    ...state,\n                    dirty: false,\n                  })\n                }\n              />\n            </Paper>\n            <Paper style={{ padding: 16 }}>\n              <ImportExport\n                state={state}\n                onImport={(newState) => setState({ ...newState, dirty: true })}\n              />\n            </Paper>\n            <Paper style={{ padding: 16 }}>\n              <Stack spacing={3}>\n                <Typography variant=\"h5\">Clear State</Typography>\n                <Typography variant=\"body1\">\n                  Clicking this button will clear the source image and all\n                  transforms\n                </Typography>\n                <Button\n                  startIcon={<Icon>clear</Icon>}\n                  sx={{ maxWidth: '300px' }}\n                  variant=\"contained\"\n                  onClick={() => {\n                    localStorage.clearAppState();\n                    setStateRaw(DEFAULT_STATE);\n                  }}\n                >\n                  Clear State\n                </Button>\n              </Stack>\n            </Paper>\n            {DEBUG && (\n              <div>\n                <code>{JSON.stringify(state, null, 2)}</code>\n              </div>\n            )}\n            <a\n              href=\"https://github.com/MikeyBurkman/partymoji\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <img\n                src=\"https://upload.wikimedia.org/wikipedia/commons/9/91/Octicons-mark-github.svg\"\n                width={64}\n                height={64}\n                alt=\"Github Link\"\n              ></img>\n            </a>\n          </Stack>\n        </Stack>\n      </Container>\n    </>\n  );\n};\n","import { Button, Icon, Stack, Typography } from '@material-ui/core';\nimport React, { ErrorInfo } from 'react';\n\ninterface Props {\n  onClearLocalStorage: () => void;\n}\n\ninterface State {\n  hasError: boolean;\n}\n\nexport class TopLevelErrorBoundary extends React.Component<Props, State> {\n  public state: State = {\n    hasError: false,\n  };\n\n  static getDerivedStateFromError(error: Error): State {\n    console.error(error);\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('Uncaught error:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <Stack spacing={1}>\n          <Typography variant=\"h2\">Oh no!</Typography>\n          <Typography variant=\"body1\">\n            There seems to have been an issue\n          </Typography>\n          <Typography variant=\"body2\">\n            If refreshing the page doesn't fix things, click the below button to\n            clear local storage\n          </Typography>\n          <Button\n            variant=\"contained\"\n            sx={{ maxWidth: '300px' }}\n            endIcon={<Icon>priority_high</Icon>}\n            startIcon={<Icon>priority_high</Icon>}\n            onClick={this.props.onClearLocalStorage}\n          >\n            Clear storage and reload\n          </Button>\n        </Stack>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { TopLevelErrorBoundary } from './components/TopLevelErrorBoundary';\nimport * as localStorage from './localStorage';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TopLevelErrorBoundary\n      onClearLocalStorage={() => {\n        localStorage.clearAppState();\n        window.location.reload();\n      }}\n    >\n      <App />\n    </TopLevelErrorBoundary>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}