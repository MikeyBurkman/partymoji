{"version":3,"sources":["domain/types.ts","domain/utils.ts","components/HelpTooltip.tsx","params/sliderParam.tsx","params/intParam.tsx","transforms/adjust-image.ts","components/Expandable.tsx","params/colorPickerParam.tsx","transforms/background-color.ts","params/dropdownParam.tsx","domain/run.ts","components/ImagePicker.tsx","transforms/background-image.ts","params/imagePickerParam.tsx","transforms/bounce.ts","transforms/circle.ts","params/floatParam.tsx","transforms/double-vision.ts","transforms/expand.ts","transforms/fisheye.ts","transforms/grayscale.ts","transforms/hue-party.ts","params/huePickerParam.tsx","transforms/hue-shift.ts","params/textParam.tsx","transforms/lightning.ts","transforms/nuke.ts","transforms/party.ts","transforms/party-background.ts","params/variableLengthParam.tsx","transforms/pinwheel.ts","transforms/radiance.ts","transforms/index.ts","transforms/resize-image.ts","transforms/ripple.ts","transforms/rotate.ts","transforms/roxbury.ts","transforms/shake.ts","transforms/static.ts","transforms/static-background.ts","transforms/transparent-color.ts","transforms/transpose.ts","components/ComputeBox.tsx","components/ImageTransform.tsx","components/ImageTransformList.tsx","components/ImportExport.tsx","App.tsx","index.tsx"],"names":["buildTransform","args","name","params","description","fn","toHexColor","r","g","b","toHexValue","c","s","toString","toUpperCase","length","fromHexColor","hex","parseInt","substr","isTransparent","pixel","randomColor","random","Math","floor","int32","getAveragePixelValue","round","clamp","n","min","max","clampColor","a","TRANSPARENT_COLOR","getPixelFromSource","dimensions","image","coord","width","height","x","y","idx","getImageIndex","assert","condition","message","AssertionError","actual","mapFrames","cb","frames","map","frame","mapCoords","transformedImageData","Uint8Array","mapImage","parameters","imageData","frameIndex","frameCount","getSrcPixel","scaleImage","newWidth","newHeight","xRatio","yRatio","newImage","createNewImage","srcX","srcY","color","getPixel","setPixel","resizeImage","sourceWidth","sourceHeight","xPadding","yPadding","range","HelpTooltip","Tooltip","title","Icon","fontSize","SliderParam","value","step","onChange","Stack","spacing","direction","Typography","variant","sx","paddingLeft","paddingRight","Slider","aria-label","valueLabelDisplay","getAriaValueText","e","valid","sliderParam","defaultValue","undefined","IntParam","parse","React","useState","val","setVal","invalidText","setInvalidText","FormControl","TextField","error","onBlur","reason","target","FormHelperText","intParam","isNaN","adjustImage","brightness","contrast","hasFrameCount","hasScaleChange","isBiggerImage","averageValue","calculateAverageValue","currImage","setFrameCount","currColor","adjustBrightness","adjustContrast","currentFrames","i","totalLight","f","convert","hsv","amount","h","l","newLight","rgb","rawAmount","Expandable","mainEle","children","collapsed","setCollapsed","ClickAwayListener","onClickAway","Box","Button","onClick","style","textTransform","Collapse","in","ColorBox","backgroundColor","ColorPickerParam","disableAlpha","presetColors","onChangeComplete","colorPickerParam","p","DropdownParam","options","Select","autoWidth","event","t","MenuItem","dropdownParam","runTransforms","transformList","inputDataUrl","fps","onImageFinished","seedrandom","readImage","originalImage","results","currentImage","transformInput","result","transform","transparentColor","getTransparentColor","encodeTransparency","createGif","gif","push","img","Promise","resolve","gifEncoder","setFrameRate","setRepeat","hexColor","slice","setTransparent","writeHeader","data","on","chunk","dataUrl","URL","createObjectURL","Blob","type","forEach","addFrame","finish","res","rej","getPixels","err","shape","from","numFrames","sliceSize","subarray","hasTransparent","seenPixels","Set","attempt","px","add","findRandomColorNotInSet","set","attempts","col","has","ImagePicker","currentImageUrl","startIcon","maxWidth","component","hidden","accept","files","Array","file","readFile","baseImage","maxHeight","src","alt","reader","FileReader","onload","readAsDataURL","backgroundImage","imagePickerParam","otherImage","frameProgress","otherImageFrame","otherImageSrc","bounce","sin","PI","circle","radius","cos","FloatParam","floatParam","parseFloat","doubleVision","amplitude","dir","expand","dist","centerX","centerY","fisheye","expanding","angle","atan2","grayscale","srcPixel","gray","hueParty","hsl","HuePickerParam","hueShift","newHue","TextParam","lightningIntensities","lightning","textParam","flashIntensity","icf","nuke","threshold","PARTY_COLORS","party","partyColorIdx","partyColor","partyBackground","VariableLengthParam","newParamText","createNewParam","v","param","pValue","setParams","Paper","ele","newValue","oldP","IconButton","newParams","filter","variableLengthParam","DEFAULT_COLORS","pinwheel","offsetX","offsetY","groupCount","colors","ribbonCount","ribbonArcDegrees","colorsLength","toFixed","xRelCenter","yRelCenter","pointAngle","colorIdx","POSSIBLE_TRANSFORMS","colorList","flatMap","maxDist","sqrt","distFromCenter","resizeImageUtil","period","shift","offset","sign","phase","phaseIdx","maxAngle","rotatePointX","rotatePointY","newCoord","strength","isStatic","ceil","grey","inverse","tolerance","diff0","diff1","diff2","transX","transY","sort","transformByName","find","fpsParam","ComputeBox","computeDisabled","appState","onFpsChange","onComputed","loading","computeTime","computeState","setComputeState","progress","setProgress","endIcon","dirty","disabled","transformInputs","transforms","transformName","paramsValues","setTimeout","start","Date","now","currIdx","console","stack","CircularProgress","LinearProgress","Divider","Grid","container","padding","columns","xs","sm","md","item","ImageTransform","selectedTransform","possibleTransforms","index","onSelect","onRemove","onMoveLeft","onMoveRight","elevation","fullWidth","Autocomplete","disableClearable","newTransformName","paramValues","renderInput","label","divider","Fragment","ImageTransformList","currentTransforms","onTransformsChange","rowSpacing","tIdx","nextT","newIdx","selected","nextTIdx","computedImage","ImportExport","state","onImport","info","setInfo","isInvalid","setInvalid","showInfo","text","showError","output","lz","JSON","stringify","navigator","clipboard","writeText","readText","clipboardContents","isArray","Alert","severity","DEBUG","LOCAL_STORAGE_KEY","DEFAULT_STATE","App","setStateRaw","useEffect","stored","window","localStorage","getItem","savedState","setState","newState","setItem","computeBtnDisbled","some","every","ScopedCssBaseline","Container","justifyContent","pt","removeItem","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d84c2c9.chunk.js","sourcesContent":["import seedrandom from 'seedrandom';\n\n/**\n * [R, G, B, A] in values 0 - 255 inclusive\n */\nexport type Color = [number, number, number, number];\n\n/**\n * [x, y]\n */\nexport type Coord = [number, number];\n\n/**\n * [width, height]\n */\nexport type Dimensions = [number, number];\n\n/**\n * A one-dimensional array of pixels.\n * A 3x2 image would contain 24 (6*4) numbers, and would look like this:\n *  [\n *    r1,g1,b1,a1, r2,g2,b2,a2, r3,g3,b3,a3,\n *    r4,g4,b4,a4, r5,g5,b5,a5, r6,g6,b6,a6\n *  ]\n *\n * [0, 0] = index 0\n * [1, 0] = index 4\n * [2, 0] = index 8\n * [0, 1] = index 12\n * [1, 1] = index 16\n * [2, 1] = index 20\n * To get pixel [x, y], do (x + y * width) * 4\n */\nexport type ImageData = Uint8Array;\n\n/**\n * The results of get-pixels processImage()\n */\nexport interface Image {\n  dimensions: Dimensions;\n  frames: ImageData[];\n}\n\nexport type Random = seedrandom.prng;\n\nexport interface TransformFnOpts<Params> {\n  /**\n   * The image we're trying to transform\n   */\n  image: Image;\n\n  /**\n   * Use to generate \"random\" numbers. It's seeded, so that subsequent calls will yield the same value on the same image.\n   */\n  random: Random;\n\n  /**\n   * User-passed in parameters.\n   */\n  parameters: Params;\n}\n\nexport type ParamValue<T> = { valid: true; value: T } | { valid: false };\n\nexport interface Parameter<T> {\n  name: string;\n  defaultValue: T;\n  ele: JSX.Element;\n}\n\nexport interface Params<T> {\n  value: ParamValue<T>;\n  onChange: (v: ParamValue<T>) => void;\n}\n\nexport type ParamFunction<T> = {\n  name: string;\n  defaultValue: ParamValue<T>;\n  fn: (params: Params<T>) => JSX.Element;\n};\n\nexport type TransformFn<Params> = (opts: TransformFnOpts<Params>) => Image;\n\ntype ParamType<Type> = Type extends ParamFunction<infer X> ? X : never;\n\nexport interface Transform<T extends readonly ParamFunction<any>[]> {\n  name: string;\n  params: T;\n  description?: string;\n  fn: TransformFn<{ [P in keyof T]: ParamType<T[P]> }>;\n}\n\nexport interface TransformWithParams<T extends readonly ParamFunction<any>[]> {\n  transformName: string;\n  paramsValues: ParamValue<T>[];\n}\n\nexport interface TransformInput<T extends ParamFunction<any>[]> {\n  transform: Transform<T>;\n  params: T;\n}\n\nexport const buildTransform = <T extends readonly ParamFunction<any>[]>(args: {\n  name: string;\n  params: T;\n  description?: string;\n  fn: TransformFn<{ [P in keyof T]: ParamType<T[P]> }>;\n}): Transform<T> => ({\n  name: args.name,\n  params: args.params,\n  description: args.description,\n  fn: args.fn,\n});\n\nexport interface AppState {\n  baseImage?: string;\n  transforms: {\n    transformName: string;\n    paramsValues: ParamValue<any>[];\n    computedImage?: string;\n  }[];\n  fps: number;\n  dirty: boolean;\n}\n","import seedrandom from 'seedrandom';\nimport { AssertionError } from 'assert';\nimport { range } from 'remeda';\n\nimport {\n  Color,\n  Coord,\n  Dimensions,\n  ImageData,\n  Image,\n  Random,\n  TransformFn,\n  TransformFnOpts,\n} from './types';\n\n/**\n * Converts a Pixel into a hex string like '#00FF00'\n */\nexport const toHexColor = ([r, g, b]: Color) => {\n  const toHexValue = (c: number) => {\n    const s = c.toString(16).toUpperCase();\n    return s.length === 2 ? s : '0' + s;\n  };\n\n  return `#${toHexValue(r)}${toHexValue(g)}${toHexValue(b)}`;\n};\n\nexport const fromHexColor = (hex: string): Color => [\n  parseInt(hex.toUpperCase().substr(1, 2), 16),\n  parseInt(hex.toUpperCase().substr(3, 2), 16),\n  parseInt(hex.toUpperCase().substr(5, 2), 16),\n  255,\n];\n\nexport const isHexColor = (s: string) => /^#[0-9A-F]{6}$/.test(s);\n\nexport const isTransparent = (pixel: Color) => pixel[3] < 64;\n\nexport const randomColor = (random: seedrandom.prng): Color => [\n  Math.floor(random.int32() * 256),\n  Math.floor(random.int32() * 256),\n  Math.floor(random.int32() * 256),\n  255,\n];\n\nexport const getAveragePixelValue = ([r, g, b]: Color) =>\n  Math.round((r + g + b) / 3);\n\nexport const clamp = (n: number, min: number, max: number) =>\n  Math.max(Math.min(n, max), min);\n\nexport const clampColor = ([r, g, b, a]: Color): Color => [\n  clamp(r, 0, 255),\n  clamp(g, 0, 255),\n  clamp(b, 0, 255),\n  clamp(a, 0, 255),\n];\n\nexport const TRANSPARENT_COLOR: Color = [0, 0, 0, 0];\n\nexport const getPixelFromSource = (\n  dimensions: Dimensions,\n  image: ImageData,\n  coord: Coord\n): Color => {\n  const [width, height] = dimensions;\n  const [x, y] = coord;\n  if (x < 0 || x >= width || y < 0 || y >= height) {\n    return TRANSPARENT_COLOR; // Default to transparent if an invalid coordinate\n  }\n\n  const idx = getImageIndex(dimensions, x, y);\n  return [image[idx], image[idx + 1], image[idx + 2], image[idx + 3]];\n};\n\n/**\n * Asserts that a given value is truthy. Uses TypeScript 3.7 assertion types.\n *\n * @example\n * ```ts\n * const foo: string|undefined = getSomeData();\n * asert(foo, 'foo must be defined');\n * console.log(foo.length); // OK\n * ```\n */\nexport function assert(\n  condition: unknown,\n  message = 'Unexpected falsy value'\n): asserts condition {\n  if (!condition) {\n    throw new AssertionError({ message, actual: condition });\n  }\n}\n\n/********** Mapping Utils ***********/\n// Maps all frames from the original image into new frames.\n// Assumes all mapped frames are the same dimension as the original image.\nexport const mapFrames = (\n  image: Image,\n  cb: (\n    imageData: ImageData,\n    frameIndex: number,\n    frameCount: number\n  ) => ImageData\n): Image => ({\n  dimensions: image.dimensions,\n  frames: image.frames.map((frame, idx) => cb(frame, idx, image.frames.length)),\n});\n\n/**\n * Maps the coordinates in a given shape into an image\n */\nexport const mapCoords = (\n  dimensions: Dimensions,\n  cb: (coord: Coord) => Color\n): ImageData => {\n  const [width, height] = dimensions;\n  const transformedImageData = new Uint8Array(width * height * 4);\n  for (let y = 0; y < height; y += 1) {\n    for (let x = 0; x < width; x += 1) {\n      const c = clampColor(cb([x, y]));\n      const idx = getImageIndex(dimensions, x, y);\n      transformedImageData[idx] = c[0];\n      transformedImageData[idx + 1] = c[1];\n      transformedImageData[idx + 2] = c[2];\n      transformedImageData[idx + 3] = c[3];\n    }\n  }\n  return transformedImageData;\n};\n\n/**\n * Combines mapFrames and mapCoords into one function.\n * Used for transforming each pixel in an image into another pixel.\n */\nexport const mapImage = <T>(\n  cb: (args: {\n    image: Image;\n    dimensions: Dimensions;\n    random: Random;\n    parameters: T;\n    coord: Coord;\n    frameCount: number;\n    frameIndex: number;\n    getSrcPixel: (coord: Coord) => Color;\n  }) => Color\n): TransformFn<T> => {\n  return ({ image, random, parameters }: TransformFnOpts<T>) =>\n    mapFrames(image, (imageData, frameIndex, frameCount) =>\n      mapCoords(image.dimensions, (coord) =>\n        cb({\n          image,\n          dimensions: image.dimensions,\n          random,\n          parameters,\n          coord,\n          frameCount,\n          frameIndex,\n          getSrcPixel: (c: Coord) =>\n            getPixelFromSource(image.dimensions, imageData, c),\n        })\n      )\n    );\n};\n\nexport const getImageIndex = ([width]: Dimensions, x: number, y: number) =>\n  (x + y * width) * 4;\n\n/**\n * Change the dimensions of the image, scaling it to make it fit the new dimensions\n */\nexport const scaleImage = (args: {\n  image: Image;\n  newWidth: number;\n  newHeight: number;\n}): Image => {\n  const { image, newWidth, newHeight } = args;\n  const [width, height] = image.dimensions;\n  const xRatio = width / newWidth;\n  const yRatio = height / newHeight;\n\n  const newImage = createNewImage({\n    dimensions: [newWidth, newHeight],\n    frameCount: image.frames.length,\n  });\n\n  for (\n    let frameIndex = 0;\n    frameIndex < newImage.frames.length;\n    frameIndex += 1\n  ) {\n    for (let y = 0; y < newHeight; y += 1) {\n      for (let x = 0; x < newWidth; x += 1) {\n        // Simple nearest-neighbor image scaling.\n        // Arguably the worst of the scaling algorithms, but it's quick,\n        //  and we're generally dealing with small images anyhow.\n        const srcX = Math.floor(x * xRatio);\n        const srcY = Math.floor(y * yRatio);\n\n        const color = getPixel({\n          image,\n          frameIndex,\n          coord: [srcX, srcY],\n        });\n        setPixel({\n          image: newImage,\n          frameIndex,\n          color,\n          coord: [x, y],\n        });\n      }\n    }\n  }\n\n  return newImage;\n};\n\n/**\n * Will change the image dimensions without altering the scale.\n * If the new dimensions are larger, the image will be centered.\n * If the new dimensions are smaller, it'll be cropped\n */\nexport const resizeImage = ({\n  image,\n  newWidth,\n  newHeight,\n}: {\n  image: Image;\n  newWidth: number;\n  newHeight: number;\n}): Image => {\n  const [sourceWidth, sourceHeight] = image.dimensions;\n\n  const xPadding = Math.round((newWidth - sourceWidth) / 2);\n  const yPadding = Math.round((newHeight - sourceHeight) / 2);\n\n  const newImage = createNewImage({\n    dimensions: [newWidth, newHeight],\n    frameCount: image.frames.length,\n  });\n\n  for (\n    let frameIndex = 0;\n    frameIndex < newImage.frames.length;\n    frameIndex += 1\n  ) {\n    for (let y = 0; y < newHeight; y += 1) {\n      for (let x = 0; x < newWidth; x += 1) {\n        const color: Color =\n          x > xPadding &&\n          x < newWidth - xPadding &&\n          y > yPadding &&\n          y < newHeight - yPadding\n            ? getPixel({\n                image,\n                frameIndex,\n                coord: [x - xPadding, y - yPadding],\n              })\n            : TRANSPARENT_COLOR;\n        setPixel({\n          image: newImage,\n          frameIndex,\n          coord: [x, y],\n          color,\n        });\n      }\n    }\n  }\n\n  return newImage;\n};\n\nexport const createNewImage = (args: {\n  frameCount: number;\n  dimensions: Dimensions;\n}): Image => ({\n  dimensions: args.dimensions,\n  frames: range(0, args.frameCount).map(\n    // 4 == bytes used per color (RGBA)\n    () => new Uint8Array(args.dimensions[0] * args.dimensions[1] * 4)\n  ),\n});\n\nexport const getPixel = (args: {\n  image: Image;\n  frameIndex: number;\n  coord: Coord;\n}) =>\n  getPixelFromSource(\n    args.image.dimensions,\n    args.image.frames[args.frameIndex],\n    args.coord\n  );\n\nexport const setPixel = (args: {\n  image: Image;\n  frameIndex: number;\n  coord: Coord;\n  color: Color;\n}) => {\n  const idx = getImageIndex(\n    args.image.dimensions,\n    args.coord[0],\n    args.coord[1]\n  );\n  const frame = args.image.frames[args.frameIndex];\n  frame[idx] = args.color[0];\n  frame[idx + 1] = args.color[1];\n  frame[idx + 2] = args.color[2];\n  frame[idx + 3] = args.color[3];\n};\n","import React from 'react';\nimport { Tooltip, Icon } from '@material-ui/core';\n\ninterface TooltipProps {\n  description?: string;\n}\n\nexport const HelpTooltip: React.FC<TooltipProps> = ({ description }) =>\n  description ? (\n    <Tooltip title={description}>\n      <Icon fontSize=\"small\" color=\"action\">\n        help\n      </Icon>\n    </Tooltip>\n  ) : null;\n","import { Slider, Stack, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { HelpTooltip } from '../components/HelpTooltip';\n\nimport { ParamValue, ParamFunction } from '../domain/types';\n\nconst SliderParam: React.FC<{\n  name: string;\n  min: number;\n  max: number;\n  step?: number;\n  value?: number;\n  description?: string;\n  onChange: (v: ParamValue<number>) => void;\n}> = ({ name, value, min, max, step, description, onChange }) => {\n  return (\n    <Stack spacing={1}>\n      <Stack direction=\"row\" spacing={1}>\n        <Typography variant=\"body2\">{name}</Typography>\n        <HelpTooltip description={description} />\n      </Stack>\n      <Stack\n        direction=\"row\"\n        spacing={2}\n        sx={{ paddingLeft: '8px', paddingRight: '8px' }}\n      >\n        <Slider\n          aria-label={name}\n          value={value}\n          step={step}\n          valueLabelDisplay=\"off\"\n          getAriaValueText={(x) => x.toString()}\n          min={min}\n          max={max}\n          onChange={(e, value) =>\n            onChange({ valid: true, value: value as number })\n          }\n        />\n        <Typography variant=\"body2\">{value}</Typography>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport function sliderParam(args: {\n  name: string;\n  min: number;\n  max: number;\n  step?: number;\n  defaultValue?: number;\n  description?: string;\n}): ParamFunction<number> {\n  return {\n    name: args.name,\n    defaultValue:\n      args.defaultValue !== undefined\n        ? { valid: true, value: args.defaultValue }\n        : { valid: false },\n    fn: (params) => {\n      return (\n        <SliderParam\n          name={args.name}\n          value={params.value.valid ? params.value.value : undefined}\n          onChange={params.onChange}\n          min={args.min}\n          max={args.max}\n          step={args.step}\n          description={args.description}\n        />\n      );\n    },\n  };\n}\n","import {\n  FormControl,\n  FormHelperText,\n  Stack,\n  TextField,\n  Typography,\n} from '@material-ui/core';\nimport React from 'react';\nimport { HelpTooltip } from '../components/HelpTooltip';\nimport { ParamValue, ParamFunction } from '../domain/types';\n\ntype ParsedParam<T> =\n  | { valid: true; value: T }\n  | { valid: false; reason: string };\n\nconst IntParam: React.FC<{\n  name: string;\n  value?: number;\n  description?: string;\n  parse: (s: string) => ParsedParam<number>;\n  onChange: (v: ParamValue<number>) => void;\n}> = ({ name, value, description, parse, onChange }) => {\n  const [val, setVal] = React.useState(\n    value === undefined ? undefined : value.toString()\n  );\n  const [invalidText, setInvalidText] = React.useState('');\n\n  const onBlur = () => {\n    if (val === undefined) {\n      // Only if no default value provided and no changes have happened\n      return;\n    }\n\n    if (value && val === value.toString()) {\n      return; // Don't fire an onChange event if things haven't changed\n    }\n    const n = parse(val);\n    if (n.valid) {\n      setInvalidText('');\n    } else {\n      setInvalidText(n.reason);\n    }\n    onChange(n);\n  };\n\n  return (\n    <Stack spacing={1}>\n      <Stack direction=\"row\" spacing={1}>\n        <Typography variant=\"body2\">{name}</Typography>\n        <HelpTooltip description={description} />\n      </Stack>\n      <FormControl>\n        <TextField\n          error={!!invalidText}\n          value={val}\n          onBlur={onBlur}\n          onChange={(e) => {\n            setVal(e.target.value);\n          }}\n        />\n        {invalidText && <FormHelperText>{invalidText}</FormHelperText>}\n      </FormControl>\n    </Stack>\n  );\n};\n\nexport const intParam = (args: {\n  name: string;\n  defaultValue?: number;\n  min?: number;\n  max?: number;\n  description?: string;\n}): ParamFunction<number> => ({\n  name: args.name,\n  defaultValue:\n    args.defaultValue !== undefined\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n  fn: (params) => {\n    const { min, max } = args;\n    const parse = (s: string): ParsedParam<number> => {\n      const n = parseInt(s, 10);\n      if (isNaN(n) || n.toString() !== s) {\n        return { valid: false, reason: 'Must be an integer' };\n      }\n      if (min !== undefined && n < min) {\n        return {\n          valid: false,\n          reason: `Must be greater than or equal to ${min}`,\n        };\n      }\n      if (max !== undefined && n > max) {\n        return { valid: false, reason: `Must be less than or equal to ${max}` };\n      }\n      return { valid: true, value: n };\n    };\n\n    return (\n      <IntParam\n        name={args.name}\n        description={args.description}\n        parse={parse}\n        onChange={params.onChange}\n        value={params.value.valid ? params.value.value : undefined}\n      />\n    );\n  },\n});\n","import { range } from 'remeda';\n\nimport { buildTransform, Color, Image } from '../domain/types';\nimport {\n  clampColor,\n  getPixelFromSource,\n  mapCoords,\n  mapFrames,\n  scaleImage,\n} from '../domain/utils';\nimport * as convert from 'color-convert';\nimport { sliderParam } from '../params/sliderParam';\nimport { intParam } from '../params/intParam';\n\nexport const adjustImage = buildTransform({\n  name: 'Adjust Image',\n  description: 'Leave a parameter at 0 if you want to not change it',\n  params: [\n    sliderParam({\n      name: 'Number of Frames',\n      description:\n        'Set how many frames of animation there will be. Leave at 0 to not change the current frame count.',\n      defaultValue: 0,\n      min: 0,\n      max: 60,\n    }),\n    intParam({\n      name: 'Width',\n      description: 'Leave at 0 to not change the image',\n      defaultValue: 0,\n      min: 0,\n    }),\n    intParam({\n      name: 'Height',\n      description: 'Leave at 0 to not change the image',\n      defaultValue: 0,\n      min: 0,\n    }),\n    sliderParam({\n      name: 'Brightness',\n      min: -100,\n      max: 100,\n      step: 5,\n      defaultValue: 0,\n    }),\n    sliderParam({\n      name: 'Contrast',\n      min: -100,\n      max: 100,\n      step: 5,\n      defaultValue: 0,\n    }),\n  ],\n  fn: ({ image, parameters }) => {\n    const [frameCount, newWidth, newHeight, brightness, contrast] = parameters;\n\n    const hasFrameCount = frameCount !== 0;\n\n    const hasScaleChange = newWidth > 0 && newHeight > 0;\n    // Use this to figure out when we should optimally resize the image\n    const isBiggerImage =\n      newWidth * newHeight > image.dimensions[0] * image.dimensions[1];\n\n    const averageValue = contrast !== 0 ? calculateAverageValue(image) : 0;\n\n    let currImage = image;\n\n    if (hasFrameCount && frameCount < image.frames.length) {\n      // Reducing the number of frames, so do that first so we have fewer pixels to change\n      currImage = setFrameCount(currImage, frameCount);\n    }\n\n    // If making a smaller image, might as well do the brightness/contrast after making it smaller\n    if (hasScaleChange && !isBiggerImage) {\n      currImage = scaleImage({ image: currImage, newWidth, newHeight });\n    }\n\n    currImage = mapFrames(currImage, (imageData) =>\n      mapCoords(currImage.dimensions, (coord) => {\n        let currColor = getPixelFromSource(\n          currImage.dimensions,\n          imageData,\n          coord\n        );\n\n        if (brightness !== 0) {\n          currColor = adjustBrightness(currColor, brightness);\n        }\n\n        if (contrast !== 0) {\n          currColor = adjustContrast(currColor, averageValue, contrast);\n        }\n\n        return currColor;\n      })\n    );\n\n    // If the image will be made bigger, we'll run that after adjusting the brightness/contrast\n    if (hasScaleChange && isBiggerImage) {\n      currImage = scaleImage({ image: currImage, newWidth, newHeight });\n    }\n\n    // Finally change the number of frames if we're adding frames\n    if (hasFrameCount && frameCount > image.frames.length) {\n      currImage = setFrameCount(currImage, frameCount);\n    }\n\n    return currImage;\n  },\n});\n\nconst setFrameCount = (image: Image, frameCount: number): Image => {\n  const currentFrames = image.frames;\n\n  // Resulting image will contain frameCount frames.\n  // If the original image had less than that, then we'll copy the last frame until we have enough.\n  // If the original has more frames, then we'll discard the last ones.\n  return {\n    dimensions: image.dimensions,\n    frames: range(0, frameCount).map((i) =>\n      currentFrames[i]\n        ? currentFrames[i]\n        : currentFrames[currentFrames.length - 1]\n    ),\n  };\n};\n\nconst calculateAverageValue = (image: Image): number => {\n  const [width, height] = image.dimensions;\n\n  // Find average value of all pixels\n  let totalLight = 0;\n  for (let f = 0; f < image.frames.length; f += 1) {\n    for (let x = 0; x < width; x += 1) {\n      for (let y = 0; y < height; y += 1) {\n        const [r, g, b] = getPixelFromSource(\n          image.dimensions,\n          image.frames[f],\n          [x, y]\n        );\n        const [, , l] = convert.rgb.hsv(r, g, b);\n        totalLight += l;\n      }\n    }\n  }\n  return totalLight / (image.frames.length * width * height);\n};\n\n// Amount = -100 to 100\nconst adjustContrast = (\n  color: Color,\n  averageValue: number,\n  amount: number\n): Color => {\n  const [r, g, b, a] = color;\n  const [h, s, l] = convert.rgb.hsv(r, g, b);\n  const diff = l - averageValue;\n  const newLight = l + diff * (amount / 100);\n  const [newR, newG, newB] = convert.hsv.rgb([h, s, newLight]);\n  return [newR, newG, newB, a];\n};\n\n// Amount: -100 to 100\nconst adjustBrightness = (color: Color, amount: number): Color => {\n  const rawAmount = (amount / 100) * 255;\n  return clampColor([\n    color[0] + rawAmount,\n    color[1] + rawAmount,\n    color[2] + rawAmount,\n    color[3],\n  ]);\n};\n","import React from 'react';\nimport {\n  Collapse,\n  Icon,\n  Box,\n  Button,\n  ClickAwayListener,\n  Stack,\n} from '@material-ui/core';\n\ninterface ExpandableProps {\n  mainEle: JSX.Element;\n}\n\nexport const Expandable: React.FC<ExpandableProps> = ({\n  mainEle,\n  children,\n}) => {\n  const [collapsed, setCollapsed] = React.useState(true);\n\n  return (\n    <ClickAwayListener onClickAway={() => setCollapsed(true)}>\n      <Box>\n        <Button\n          onClick={() => setCollapsed(!collapsed)}\n          style={{ textTransform: 'none', color: 'black' }}\n        >\n          <Stack direction=\"row\" spacing={4}>\n            <div>{mainEle}</div>\n            <Icon>{collapsed ? 'expand_less' : 'expand_more'}</Icon>\n          </Stack>\n        </Button>\n        <Collapse in={!collapsed}>{children}</Collapse>\n      </Box>\n    </ClickAwayListener>\n  );\n};\n","import { Stack, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { SketchPicker } from 'react-color';\nimport { Expandable } from '../components/Expandable';\nimport { HelpTooltip } from '../components/HelpTooltip';\n\nimport { ParamValue, ParamFunction, Color } from '../domain/types';\nimport { fromHexColor, toHexColor } from '../domain/utils';\n\nconst ColorBox: React.FC<{ color: Color }> = ({ color }) => (\n  <div\n    style={{\n      width: '1.5em',\n      height: '1.5em',\n      backgroundColor: toHexColor(color),\n    }}\n  />\n);\n\nconst ColorPickerParam: React.FC<{\n  name: string;\n  value?: Color;\n  description?: string;\n  onChange: (v: ParamValue<Color>) => void;\n}> = ({ name, value, description, onChange }) => {\n  return (\n    <Expandable\n      mainEle={\n        <Stack direction=\"row\" spacing={4}>\n          <Typography variant=\"body2\">{name}</Typography>\n          <HelpTooltip description={description} />\n          {value && <ColorBox color={value} />}\n        </Stack>\n      }\n    >\n      <SketchPicker\n        disableAlpha={true}\n        presetColors={[]}\n        color={value ? toHexColor(value) : undefined}\n        onChangeComplete={(c) =>\n          onChange({ valid: true, value: fromHexColor(c.hex) })\n        }\n      />\n    </Expandable>\n  );\n};\n\nexport function colorPickerParam(args: {\n  name: string;\n  defaultValue?: Color;\n  description?: string;\n}): ParamFunction<Color> {\n  return {\n    name: args.name,\n    defaultValue: args.defaultValue\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n    fn: (params) => {\n      return (\n        <ColorPickerParam\n          name={args.name}\n          value={params.value.valid ? params.value.value : undefined}\n          onChange={params.onChange}\n          description={args.description}\n        />\n      );\n    },\n  };\n}\n","import { buildTransform } from '../domain/types';\nimport { mapImage, isTransparent, fromHexColor } from '../domain/utils';\nimport { colorPickerParam } from '../params/colorPickerParam';\n\nexport const backgroundColor = buildTransform({\n  name: 'Background Color',\n  description: 'Change all transparent pixles to the given color',\n  params: [\n    colorPickerParam({\n      name: 'Color',\n      defaultValue: fromHexColor('#000000'),\n    }),\n  ],\n  fn: mapImage(({ coord, getSrcPixel, parameters }) => {\n    const [color] = parameters;\n    const p = getSrcPixel(coord);\n    return isTransparent(p) ? color : p;\n  }),\n});\n","import {\n  FormControl,\n  Select,\n  MenuItem,\n  Stack,\n  Typography,\n} from '@material-ui/core';\nimport React from 'react';\nimport { HelpTooltip } from '../components/HelpTooltip';\nimport { ParamValue, ParamFunction } from '../domain/types';\n\nconst DropdownParam: React.FC<{\n  name: string;\n  options: readonly { name: string; value: any }[];\n  value?: any;\n  description?: string;\n  onChange: (v: ParamValue<any>) => void;\n}> = ({ name, options, value, description, onChange }) => {\n  return (\n    <Stack spacing={1}>\n      <Stack direction=\"row\" spacing={1}>\n        <Typography variant=\"body2\">{name}</Typography>\n        <HelpTooltip description={description} />\n      </Stack>\n      <FormControl>\n        <Select\n          autoWidth\n          value={value}\n          onChange={(event) =>\n            onChange({ valid: true, value: event.target.value })\n          }\n        >\n          {options.map((t) => (\n            <MenuItem key={t.value} value={t.value}>\n              {t.name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </Stack>\n  );\n};\n\nexport function dropdownParam<T>(args: {\n  name: string;\n  options: readonly { name: string; value: T }[];\n  description?: string;\n  defaultValue?: T;\n}): ParamFunction<T> {\n  return {\n    name: args.name,\n    defaultValue: args.defaultValue\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n    fn: (params) => {\n      return (\n        <DropdownParam\n          name={args.name}\n          value={params.value.valid ? params.value.value : undefined}\n          options={args.options}\n          description={args.description}\n          onChange={params.onChange}\n        />\n      );\n    },\n  };\n}\n","// @ts-ignore\nimport getPixels from 'get-pixels';\n// @ts-ignore\nimport gifEncoder from 'gif-encoder';\nimport seedrandom from 'seedrandom';\n\nimport { Color, TransformInput, Image, Dimensions, ImageData } from './types';\nimport {\n  toHexColor,\n  getPixelFromSource,\n  randomColor,\n  fromHexColor,\n  isTransparent,\n} from './utils';\n\ninterface RunArgs {\n  inputDataUrl: string;\n  transformList: TransformInput<any>[];\n  fps: number;\n  onImageFinished: () => void;\n}\n\ninterface ImageResult {\n  gif: string;\n  width: number;\n  height: number;\n}\n\n// Returns a list of gif data URLs, for each transform\nexport const runTransforms = async ({\n  transformList,\n  inputDataUrl,\n  fps,\n  onImageFinished,\n}: RunArgs): Promise<ImageResult[]> => {\n  const random = seedrandom(inputDataUrl);\n\n  const originalImage = await readImage(inputDataUrl);\n\n  const results: ImageResult[] = [];\n  let currentImage = originalImage;\n\n  for (const transformInput of transformList) {\n    const result = transformInput.transform.fn({\n      image: currentImage,\n      parameters: transformInput.params,\n      random,\n    });\n\n    const transparentColor = getTransparentColor(result, random);\n\n    // Transform any of our transparent pixels to what our gif understands to be transparent\n    const image = encodeTransparency(result.frames, transparentColor);\n\n    const gif = await createGif(\n      result.dimensions,\n      image,\n      transparentColor,\n      fps\n    );\n\n    onImageFinished();\n\n    currentImage = result;\n    results.push({\n      gif,\n      width: result.dimensions[0],\n      height: result.dimensions[1],\n    });\n  }\n\n  return results;\n};\n\n/**\n * Each pixel in our image has an alpha channel, but gifs don't.\n * We transform each pixel that appears transparent to be a designated transparent color.\n */\nconst encodeTransparency = (\n  frames: ImageData[],\n  transparentColor: Color | undefined\n): ImageData[] => {\n  const image = frames.map((frame) => {\n    const img = new Uint8Array(frame.length);\n    for (let i = 0; i < frame.length; i += 4) {\n      if (transparentColor && frame[i + 3] < 128) {\n        // Anything more than halfway transparent is considered transparent\n        img[i] = transparentColor[0];\n        img[i + 1] = transparentColor[1];\n        img[i + 2] = transparentColor[2];\n        img[i + 3] = transparentColor[3];\n      } else {\n        img[i] = frame[i];\n        img[i + 1] = frame[i + 1];\n        img[i + 2] = frame[i + 2];\n        img[i + 3] = 255; // Gifs don't do transparency, I dunno why they take in an alpha value...\n      }\n    }\n    return img;\n  });\n\n  return image;\n};\n\nconst createGif = async (\n  dimensions: Dimensions,\n  frames: ImageData[],\n  transparentColor: Color | undefined,\n  fps: number\n): Promise<string> =>\n  new Promise<string>((resolve) => {\n    const [width, height] = dimensions;\n    const gif = new gifEncoder(width, height);\n\n    gif.setFrameRate(fps);\n    gif.setRepeat(0); // Loop indefinitely\n    if (transparentColor) {\n      // Need to convert '#RRGGBB' to '0xRRGGBB'\n      const hexColor = toHexColor(transparentColor).slice(1);\n      gif.setTransparent(`0x${hexColor}`);\n    }\n\n    // gif.setQuality(10);\n    gif.writeHeader();\n\n    let data: any[] = [];\n    gif.on('data', (chunk: any) => {\n      data.push(chunk);\n    });\n    gif.on('end', () => {\n      const dataUrl = URL.createObjectURL(\n        new Blob(data, { type: 'image/gif' })\n      );\n      resolve(dataUrl);\n    });\n\n    frames.forEach((f) => {\n      gif.addFrame(f);\n    });\n\n    gif.finish();\n  });\n\nexport const readImage = (dataUrl: string): Promise<Image> =>\n  new Promise<Image>((res, rej) =>\n    getPixels(\n      dataUrl,\n      (err: Error, results: { shape: number[]; data: ImageData }) => {\n        if (err) {\n          return rej(err);\n        }\n\n        if (results.shape.length === 3) {\n          // Single frame\n          return res({\n            frames: [Uint8Array.from(results.data)],\n            dimensions: [results.shape[0], results.shape[1]],\n          });\n        }\n\n        // Multiple frames, need to slice up the image data into numFrames slices\n        const [numFrames, width, height] = results.shape;\n        const sliceSize = width * height * 4;\n        const frames: Uint8Array[] = [];\n        for (let i = 0; i < numFrames; i += 1) {\n          frames.push(\n            results.data.subarray(i * sliceSize, (i + 1) * sliceSize)\n          );\n        }\n        return res({\n          frames,\n          dimensions: [width, height],\n        });\n      }\n    )\n  );\n\nconst getTransparentColor = (\n  image: Image,\n  random: seedrandom.prng\n): Color | undefined => {\n  let hasTransparent = false;\n  const seenPixels = new Set<string>();\n  const [width, height] = image.dimensions;\n  let attempt = toHexColor([0, 255, 0, 255]); // Just start with green for now, since it's a likely candidate\n  image.frames.forEach((frame) => {\n    for (let y = 0; y < height; y += 1) {\n      for (let x = 0; x < width; x += 1) {\n        const px = getPixelFromSource(image.dimensions, frame, [x, y]);\n        if (isTransparent(px)) {\n          hasTransparent = true;\n        } else {\n          const hex = toHexColor(px);\n          seenPixels.add(hex);\n          if (hex === attempt) {\n            // Uh oh, can't use our current pick for transparent because it exists in the image already\n            attempt = findRandomColorNotInSet(random, seenPixels);\n          }\n        }\n      }\n    }\n  });\n  return hasTransparent ? fromHexColor(attempt) : undefined;\n};\n\nconst findRandomColorNotInSet = (\n  random: seedrandom.prng,\n  set: Set<string>,\n  attempts = 0\n): string => {\n  const col = toHexColor(randomColor(random));\n  if (attempts > 2000) {\n    // Just give up in order to prevent a stack overflow or something...\n    return col;\n  }\n  return set.has(col)\n    ? findRandomColorNotInSet(random, set, attempts + 1)\n    : col;\n};\n","import { Button, Icon, Stack } from '@material-ui/core';\nimport React from 'react';\n\ninterface ImagePickerProps {\n  currentImageUrl?: string;\n  name?: string;\n  width?: number;\n  height?: number;\n  onChange: (imageUrl: string) => void;\n}\n\nexport const ImagePicker: React.FC<ImagePickerProps> = ({\n  currentImageUrl,\n  name,\n  onChange,\n}) => (\n  <Stack spacing={4}>\n    <Button\n      startIcon={<Icon>image</Icon>}\n      sx={{ maxWidth: '300px' }}\n      variant=\"contained\"\n      component=\"label\"\n    >\n      {name}\n      <input\n        type=\"file\"\n        hidden\n        accept=\"image/png,image/jpg,image/gif\"\n        name=\"source-png\"\n        onChange={async (event) => {\n          const files = Array.from(event.target.files ?? []);\n          const file = files[0];\n          if (file) {\n            // Will be undefined if user clicked the cancel button\n            const baseImage = await readFile(file);\n            onChange(baseImage);\n          }\n        }}\n      />\n    </Button>\n    {currentImageUrl && (\n      <img\n        style={{ maxWidth: '300px', maxHeight: 'auto' }}\n        src={currentImageUrl}\n        alt=\"Source\"\n      ></img>\n    )}\n  </Stack>\n);\n\nconst readFile = (file: File) =>\n  new Promise<string>((resolve) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result as string);\n    reader.readAsDataURL(file);\n  });\n","import { dropdownParam } from '../params/dropdownParam';\nimport { imagePickerParam } from '../params/imagePickerParam';\nimport { buildTransform } from '../domain/types';\nimport {\n  isTransparent,\n  mapFrames,\n  mapCoords,\n  resizeImage,\n  getPixel,\n} from '../domain/utils';\n\nexport const backgroundImage = buildTransform({\n  name: 'Background Image',\n  description: 'Select another image to be used as a background or foreground',\n  params: [\n    imagePickerParam({\n      name: 'Image',\n    }),\n    dropdownParam({\n      name: 'Type',\n      defaultValue: 'background',\n      options: [\n        {\n          name: 'Background',\n          value: 'background',\n        },\n        {\n          name: 'Foreground',\n          value: 'foreground',\n        },\n      ] as const,\n    }),\n  ] as const,\n  fn: ({ image, parameters }) => {\n    const otherImage = resizeImage({\n      image: parameters[0].image,\n      newWidth: image.dimensions[0],\n      newHeight: image.dimensions[1],\n    });\n    const type = parameters[1];\n\n    return mapFrames(image, (data, frameIndex) => {\n      return mapCoords(image.dimensions, (coord) => {\n        const frameProgress = frameIndex / image.frames.length;\n        const otherImageFrame = Math.floor(\n          frameProgress * otherImage.frames.length\n        );\n        const otherImageSrc = getPixel({\n          image: otherImage,\n          frameIndex: otherImageFrame,\n          coord,\n        });\n\n        const src = getPixel({\n          image,\n          frameIndex,\n          coord,\n        });\n\n        if (type === 'background') {\n          // Only print the other image if the src image is transparent here\n          return isTransparent(src) ? otherImageSrc : src;\n        } else {\n          return isTransparent(otherImageSrc) ? src : otherImageSrc;\n        }\n      });\n    });\n  },\n});\n","import React from 'react';\n\nimport { readImage } from '../domain/run';\nimport { ParamFunction, Image } from '../domain/types';\nimport { ImagePicker } from '../components/ImagePicker';\n\ninterface ImagePickerParamsProps {\n  name: string;\n}\n\nexport function imagePickerParam({\n  name,\n}: ImagePickerParamsProps): ParamFunction<{ dataUrl: string; image: Image }> {\n  return {\n    name,\n    defaultValue: { valid: false },\n    fn: (params) => (\n      <ImagePicker\n        currentImageUrl={\n          params.value.valid ? params.value.value.dataUrl : undefined\n        }\n        name={name}\n        width={64}\n        height={64}\n        onChange={async (dataUrl) => {\n          const image = await readImage(dataUrl);\n          params.onChange({ valid: true, value: { dataUrl, image } });\n        }}\n      />\n    ),\n  };\n}\n","import { buildTransform } from '../domain/types';\nimport { mapImage } from '../domain/utils';\nimport { intParam } from '../params/intParam';\n\nexport const bounce = buildTransform({\n  name: 'Bounce',\n  description: 'Make the image bounce up and down',\n  params: [\n    intParam({\n      name: 'Bounce Speed',\n      description: 'Positive number',\n      defaultValue: 5,\n      min: 0,\n    }),\n  ],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel, parameters }) => {\n    const [x, y] = coord;\n    const yOffset =\n      y +\n      Math.round(\n        parameters[0] * Math.sin((frameIndex / frameCount) * 2 * Math.PI)\n      );\n\n    return getSrcPixel([x, yOffset]);\n  }),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage } from '../domain/utils';\nimport { intParam } from '../params/intParam';\n\nexport const circle = buildTransform({\n  name: 'Circle',\n  description: 'Make the image move in a circular pattern',\n  params: [\n    intParam({\n      name: 'Radius',\n      description: 'Positive number',\n      defaultValue: 10,\n      min: 0,\n    }),\n  ],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel, parameters }) => {\n    const [radius] = parameters;\n    const [x, y] = coord;\n    const xOffset = Math.round(\n      radius * Math.sin(-2 * Math.PI * (frameIndex / frameCount))\n    );\n    const yOffset = Math.round(\n      radius * Math.cos(-2 * Math.PI * (frameIndex / frameCount))\n    );\n    return getSrcPixel([x + xOffset, y + yOffset]);\n  }),\n});\n","import {\n  FormControl,\n  FormHelperText,\n  Stack,\n  TextField,\n  Typography,\n} from '@material-ui/core';\nimport React from 'react';\nimport { HelpTooltip } from '../components/HelpTooltip';\nimport { ParamValue, ParamFunction } from '../domain/types';\n\ntype ParsedParam<T> =\n  | { valid: true; value: T }\n  | { valid: false; reason: string };\n\nconst FloatParam: React.FC<{\n  name: string;\n  value?: number;\n  description?: string;\n  parse: (s: string) => ParsedParam<number>;\n  onChange: (v: ParamValue<number>) => void;\n}> = ({ name, value, description, parse, onChange }) => {\n  const [val, setVal] = React.useState(\n    value === undefined ? undefined : value.toString()\n  );\n  const [invalidText, setInvalidText] = React.useState('');\n\n  const onBlur = () => {\n    if (val === undefined) {\n      // Only if no default value provided and no changes have happened\n      return;\n    }\n\n    if (value && val === value.toString()) {\n      return; // Don't fire an onChange event if things haven't changed\n    }\n    const n = parse(val);\n    if (n.valid) {\n      setInvalidText('');\n    } else {\n      setInvalidText(n.reason);\n    }\n    onChange(n);\n  };\n\n  return (\n    <Stack spacing={1}>\n      <Stack direction=\"row\" spacing={1}>\n        <Typography variant=\"body2\">{name}</Typography>\n        <HelpTooltip description={description} />\n      </Stack>\n      <FormControl>\n        <TextField\n          error={!!invalidText}\n          value={val}\n          onBlur={onBlur}\n          onChange={(e) => {\n            setVal(e.target.value);\n          }}\n        />\n        {invalidText && <FormHelperText>{invalidText}</FormHelperText>}\n      </FormControl>\n    </Stack>\n  );\n};\n\nexport const floatParam = (args: {\n  name: string;\n  defaultValue?: number;\n  min?: number;\n  max?: number;\n  description?: string;\n}): ParamFunction<number> => ({\n  name: args.name,\n  defaultValue:\n    args.defaultValue !== undefined\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n  fn: (params) => {\n    const { min, max } = args;\n    const parse = (s: string): ParsedParam<number> => {\n      const n = parseFloat(s);\n      if (isNaN(n) || n.toString() !== s) {\n        return { valid: false, reason: 'Must be a number' };\n      }\n      if (min !== undefined && n < min) {\n        return {\n          valid: false,\n          reason: `Must be greater than or equal to ${min}`,\n        };\n      }\n      if (max !== undefined && n > max) {\n        return { valid: false, reason: `Must be less than or equal to ${max}` };\n      }\n      return { valid: true, value: n };\n    };\n\n    return (\n      <FloatParam\n        name={args.name}\n        description={args.description}\n        parse={parse}\n        onChange={params.onChange}\n        value={params.value.valid ? params.value.value : undefined}\n      />\n    );\n  },\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage } from '../domain/utils';\nimport { floatParam } from '../params/floatParam';\n\nexport const doubleVision = buildTransform({\n  name: 'Double Vision',\n  description: 'See the image in double',\n  params: [floatParam({ name: 'Amplitude', defaultValue: 10, min: 0 })],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel, parameters }) => {\n    const [amplitude] = parameters;\n    const [x, y] = coord;\n    const dir = x % 2 === 0 ? -1 : 1;\n    const xOffset = Math.round(\n      dir * amplitude * Math.sin(-2 * Math.PI * (frameIndex / frameCount))\n    );\n    return getSrcPixel([x + xOffset, y]);\n  }),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage } from '../domain/utils';\nimport { intParam } from '../params/intParam';\n\nexport const expand = buildTransform({\n  name: 'Expand',\n  description: 'Make the image grow and shrink',\n  params: [\n    intParam({\n      name: 'Radius',\n      description: 'Positive number',\n      defaultValue: 10,\n      min: 0,\n    }),\n  ],\n  fn: mapImage(\n    ({\n      dimensions,\n      coord,\n      frameCount,\n      frameIndex,\n      getSrcPixel,\n      parameters,\n    }) => {\n      const idx = frameIndex / frameCount;\n      const dist = Math.cos(idx * 2 * Math.PI) * parameters[0];\n\n      // Kind of follows the same algorithm as resize, except the amount is dynamic\n      const [width, height] = dimensions;\n      const centerX = width / 2;\n      const centerY = height / 2;\n\n      const [x, y] = coord;\n      const xRatio = (x - centerX) / width;\n      const yRatio = (y - centerY) / height;\n\n      const xOffset = Math.floor(dist * xRatio);\n      const yOffset = Math.round(dist * yRatio);\n      return getSrcPixel([x - xOffset, y - yOffset]);\n    }\n  ),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage } from '../domain/utils';\nimport { intParam } from '../params/intParam';\n\n// Probably still needs work -- the inner pixels get all funky still\nexport const fisheye = buildTransform({\n  name: 'Fisheye',\n  description: 'Make the image grow and shrink in a distorted fashion',\n  params: [\n    intParam({\n      name: 'Radius',\n      description: 'Positive Number',\n      defaultValue: 10,\n      min: 0,\n    }),\n  ],\n  fn: mapImage(\n    ({\n      dimensions,\n      coord,\n      frameCount,\n      frameIndex,\n      getSrcPixel,\n      parameters,\n    }) => {\n      const idx = frameIndex / frameCount;\n      const expanding = idx < 0.5;\n      const [width, height] = dimensions;\n      const dist = (expanding ? idx : 1 - idx) * parameters[0];\n      const centerX = width / 2;\n      const centerY = height / 2;\n\n      const [x, y] = coord;\n      const angle = Math.atan2(centerY - y, centerX - x);\n\n      const xOffset = Math.round(dist * Math.cos(angle));\n      const yOffset = Math.round(dist * Math.sin(angle));\n      return getSrcPixel([x + xOffset, y + yOffset]);\n    }\n  ),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage, isTransparent, getAveragePixelValue } from '../domain/utils';\n\nexport const grayscale = buildTransform({\n  name: 'Grayscale',\n  description: 'Make the image black and white',\n  params: [],\n  fn: mapImage(({ coord, getSrcPixel }) => {\n    const srcPixel = getSrcPixel(coord);\n\n    if (isTransparent(srcPixel)) {\n      return [0, 0, 0, 0];\n    }\n\n    const gray = getAveragePixelValue(srcPixel);\n\n    return [gray, gray, gray, 255];\n  }),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage } from '../domain/utils';\nimport * as convert from 'color-convert';\n\nexport const hueParty = buildTransform({\n  name: 'Hue Party',\n  description: 'Shift through all the hues',\n  params: [],\n  fn: mapImage(({ coord, getSrcPixel, frameCount, frameIndex }) => {\n    const [r, g, b, a] = getSrcPixel(coord);\n    const [, s, l] = convert.rgb.hsl([r, g, b]);\n    const [newR, newG, newB] = convert.hsl.rgb([\n      (frameIndex / frameCount) * 255,\n      s,\n      l,\n    ]);\n    return [(r + newR) / 2, (g + newG) / 2, (b + newB) / 2, a];\n  }),\n});\n","import { Stack, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { HuePicker } from 'react-color';\nimport * as convert from 'color-convert';\n\nimport { ParamValue, ParamFunction } from '../domain/types';\nimport { toHexColor } from '../domain/utils';\nimport { HelpTooltip } from '../components/HelpTooltip';\n\nconst HuePickerParam: React.FC<{\n  name: string;\n  value?: number;\n  description?: string;\n  onChange: (v: ParamValue<number>) => void;\n}> = ({ name, value, description, onChange }) => {\n  const hexColor =\n    value === undefined\n      ? undefined\n      : toHexColor([...convert.hsl.rgb([value, 255, 255]), 255]);\n  return (\n    <Stack spacing={1}>\n      <Stack direction=\"row\" spacing={1}>\n        <Typography variant=\"body2\">{name}</Typography>\n        <HelpTooltip description={description} />\n      </Stack>\n      <HuePicker\n        color={hexColor}\n        onChangeComplete={({ hsl }) => onChange({ valid: true, value: hsl.h })}\n      />\n    </Stack>\n  );\n};\n\nexport function huePickerParam(args: {\n  name: string;\n  defaultValue?: number;\n  description?: string;\n}): ParamFunction<number> {\n  return {\n    name: args.name,\n    defaultValue: args.defaultValue\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n    fn: (params) => {\n      return (\n        <HuePickerParam\n          name={args.name}\n          value={params.value.valid ? params.value.value : undefined}\n          onChange={params.onChange}\n        />\n      );\n    },\n  };\n}\n","import { buildTransform } from '../domain/types';\nimport { mapImage } from '../domain/utils';\nimport * as convert from 'color-convert';\nimport { huePickerParam } from '../params/huePickerParam';\n\nexport const hueShift = buildTransform({\n  name: 'Hue Shift',\n  description: 'Shift the hue to some other color',\n  params: [\n    huePickerParam({\n      name: 'Hue',\n      defaultValue: 128,\n    }),\n  ],\n  fn: mapImage(({ coord, getSrcPixel, parameters }) => {\n    const [newHue] = parameters;\n    const [r, g, b, a] = getSrcPixel(coord);\n    const [, s, l] = convert.rgb.hsl(r, g, b);\n    const [newR, newG, newB] = convert.hsl.rgb([newHue, s, l]);\n    return [newR, newG, newB, a];\n  }),\n});\n","import { FormControl, Stack, TextField, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { HelpTooltip } from '../components/HelpTooltip';\nimport { ParamFunction, ParamValue } from '../domain/types';\n\nconst TextParam: React.FC<{\n  name: string;\n  value?: string;\n  description?: string;\n  onChange: (v: ParamValue<string>) => void;\n}> = ({ name, value, description, onChange }) => {\n  const [val, setVal] = React.useState(value);\n\n  return (\n    <Stack spacing={1}>\n      <Stack direction=\"row\" spacing={1}>\n        <Typography variant=\"body2\">{name}</Typography>\n        <HelpTooltip description={description} />\n      </Stack>\n      <FormControl>\n        <TextField\n          value={val}\n          onChange={(e) => setVal(e.target.value)}\n          onBlur={() =>\n            onChange(val ? { valid: true, value: val } : { valid: false })\n          }\n        />\n      </FormControl>\n    </Stack>\n  );\n};\n\nexport const textParam = (args: {\n  name: string;\n  description?: string;\n  defaultValue?: string;\n}): ParamFunction<string> => ({\n  name: args.name,\n  defaultValue:\n    args.defaultValue !== undefined\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n  fn: (params) => (\n    <TextParam\n      name={args.name}\n      description={args.description}\n      onChange={params.onChange}\n      value={params.value.valid ? params.value.value : undefined}\n    />\n  ),\n});\n","import { buildTransform } from '../domain/types';\nimport seedrandom from 'seedrandom';\n\nimport { Color } from '../domain/types';\nimport {\n  mapFrames,\n  mapCoords,\n  getPixelFromSource,\n  isTransparent,\n} from '../domain/utils';\nimport { textParam } from '../params/textParam';\n\nconst lightningIntensities: Color[] = [\n  [0, 15, 40, 255], // dark color\n  [150, 150, 175, 255],\n  [180, 180, 205, 255],\n  [210, 210, 235, 255],\n];\n\nexport const lightning = buildTransform({\n  name: 'Lightning',\n  description: 'Make the background look like a thunderstorm',\n  params: [\n    textParam({\n      name: 'Random Seed',\n      description:\n        'Can be anything. Will determine the randomness of the lightning.',\n      defaultValue: 'lightning',\n    }),\n  ],\n  fn: ({ image, parameters }) => {\n    const random = seedrandom(parameters[0]);\n    return mapFrames(image, (data) => {\n      const i = random();\n      const flashIntensity = i < 0.9 ? 0 : i < 0.95 ? 1 : i < 0.98 ? 2 : 3;\n\n      return mapCoords(image.dimensions, (coord) => {\n        const src = getPixelFromSource(image.dimensions, data, coord);\n\n        if (isTransparent(src)) {\n          return lightningIntensities[flashIntensity];\n        }\n\n        if (flashIntensity > 0) {\n          // We're flashing, so brighten up the image a little\n          const icf = 1.02 * flashIntensity;\n          return [src[0] * icf, src[1] * icf, src[2] * icf, src[3]];\n        }\n\n        // No lightning\n        return src;\n      });\n    });\n  },\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage } from '../domain/utils';\nimport * as convert from 'color-convert';\n\nexport const nuke = buildTransform({\n  name: 'Nuke',\n  description: 'Oh no...',\n  params: [],\n  fn: mapImage(({ coord, getSrcPixel, frameCount, frameIndex }) => {\n    const threshold = (frameIndex / frameCount) * 255;\n    const [r, g, b, a] = getSrcPixel(coord);\n    const [h, s, l] = convert.rgb.hsl(r, g, b);\n    const [newR, newG, newB] = convert.hsl.rgb([h, s, l > threshold ? l : 0]);\n    return [newR, newG, newB, l > threshold ? a : 0];\n  }),\n});\n","import { buildTransform, Color } from '../domain/types';\nimport { isTransparent, getAveragePixelValue, mapImage } from '../domain/utils';\n\nconst PARTY_COLORS: Color[] = [\n  [255, 141, 139, 255],\n  [254, 214, 137, 255],\n  [136, 255, 137, 255],\n  [135, 255, 255, 255],\n  [139, 181, 254, 255],\n  [215, 140, 255, 255],\n  [255, 140, 255, 255],\n  [255, 104, 247, 255],\n  [254, 108, 183, 255],\n  [255, 105, 104, 255],\n];\n\nexport const party = buildTransform({\n  name: 'Party',\n  description: 'Make the image flash different colors',\n  params: [],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel }) => {\n    const srcPixel = getSrcPixel(coord);\n\n    if (isTransparent(srcPixel)) {\n      return [0, 0, 0, 0];\n    }\n\n    const partyColorIdx = Math.floor(\n      (frameIndex / frameCount) * PARTY_COLORS.length\n    );\n    const partyColor = PARTY_COLORS[partyColorIdx];\n\n    const gray = getAveragePixelValue(srcPixel);\n\n    return [\n      (gray * partyColor[0]) / 255,\n      (gray * partyColor[1]) / 255,\n      (gray * partyColor[2]) / 255,\n      255,\n    ];\n  }),\n});\n","import { buildTransform, Color } from '../domain/types';\nimport { mapImage, isTransparent } from '../domain/utils';\n\nconst PARTY_COLORS: Color[] = [\n  [255, 141, 139, 255],\n  [254, 214, 137, 255],\n  [136, 255, 137, 255],\n  [135, 255, 255, 255],\n  [139, 181, 254, 255],\n  [215, 140, 255, 255],\n  [255, 140, 255, 255],\n  [255, 104, 247, 255],\n  [254, 108, 183, 255],\n  [255, 105, 104, 255],\n];\n\nexport const partyBackground = buildTransform({\n  name: 'Party Background',\n  description: 'Transparent pixels will flash bright party colors',\n  params: [],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel }) => {\n    const srcPixel = getSrcPixel(coord);\n\n    // Make the transparent parts colorful\n    if (isTransparent(srcPixel)) {\n      const partyColorIdx = Math.floor(\n        (frameIndex / frameCount) * PARTY_COLORS.length\n      );\n      return PARTY_COLORS[partyColorIdx];\n    }\n\n    return srcPixel;\n  }),\n});\n","import {\n  Icon,\n  IconButton,\n  Button,\n  Paper,\n  Typography,\n  Stack,\n} from '@material-ui/core';\nimport React from 'react';\nimport { HelpTooltip } from '../components/HelpTooltip';\nimport { ParamValue, ParamFunction } from '../domain/types';\n\ninterface VariableLengthProps<T> {\n  name: string;\n  newParamText: string;\n  createNewParam: () => ParamFunction<T>;\n  value?: T[];\n  description?: string;\n  onChange: (v: ParamValue<T>) => void;\n}\n\nconst VariableLengthParam: React.FC<VariableLengthProps<any>> = ({\n  name,\n  newParamText,\n  createNewParam,\n  value,\n  description,\n  onChange,\n}) => {\n  const [params, setParams] = React.useState<\n    { param: ParamFunction<any>; pValue: any }[]\n  >(\n    value === undefined\n      ? []\n      : value.map((v, idx) => ({ param: createNewParam(), pValue: v }))\n  );\n  return (\n    <Paper>\n      <Stack spacing={1}>\n        <Stack direction=\"row\" spacing={1}>\n          <Typography variant=\"body2\">{name}</Typography>\n          <HelpTooltip description={description} />\n        </Stack>\n        {params.map(({ param, pValue }, idx) => {\n          const ele = param.fn({\n            value: { valid: true, value: pValue },\n            onChange: (newValue) => {\n              if (newValue.valid) {\n                const p = params.map((oldP, i) => {\n                  if (idx === i) {\n                    return {\n                      param,\n                      pValue: newValue.value,\n                    };\n                  }\n                  return oldP;\n                });\n                setParams(p);\n                onChange({\n                  valid: true,\n                  value: p.map((n) => n.pValue),\n                });\n              }\n            },\n          });\n\n          return (\n            <Stack direction=\"row\" key={`${name}-${idx}`}>\n              <IconButton\n                onClick={() => {\n                  const newParams = params.filter((x, i) => i !== idx);\n                  setParams(newParams);\n                  onChange({\n                    valid: true,\n                    value: newParams.map((n) => n.pValue),\n                  });\n                }}\n              >\n                <Icon>delete</Icon>\n              </IconButton>\n              {ele}\n            </Stack>\n          );\n        })}\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            const p = createNewParam();\n            const newParams = [\n              ...params,\n              {\n                param: p,\n                pValue: p.defaultValue.valid ? p.defaultValue.value : undefined,\n              },\n            ];\n            setParams(newParams);\n            if (p.defaultValue.valid) {\n              onChange({\n                valid: true,\n                value: newParams.map((n) => n.pValue),\n              });\n            }\n          }}\n        >\n          {newParamText}\n        </Button>\n      </Stack>\n    </Paper>\n  );\n};\n\nexport function variableLengthParam<T>(args: {\n  name: string;\n  newParamText: string;\n  createNewParam: () => ParamFunction<T>;\n  description?: string;\n  defaultValue?: T[];\n}): ParamFunction<T[]> {\n  return {\n    name: args.name,\n    defaultValue: args.defaultValue\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n    fn: (params) => {\n      return (\n        <VariableLengthParam\n          name={args.name}\n          newParamText={args.newParamText}\n          value={params.value.valid ? params.value.value : undefined}\n          createNewParam={args.createNewParam}\n          description={args.description}\n          onChange={params.onChange}\n        />\n      );\n    },\n  };\n}\n","import { buildTransform } from '../domain/types';\nimport { mapImage, isTransparent, fromHexColor } from '../domain/utils';\nimport { colorPickerParam } from '../params/colorPickerParam';\nimport { intParam } from '../params/intParam';\nimport { sliderParam } from '../params/sliderParam';\nimport { variableLengthParam } from '../params/variableLengthParam';\n\nconst DEFAULT_COLORS = [\n  '#FF0000',\n  '#FF9600',\n  '#FFFF00',\n  '#00FF00',\n  '#00FF96',\n  '#00FFFF',\n  '#0000FF',\n  '#B400FF',\n].map(fromHexColor);\n\nexport const pinwheel = buildTransform({\n  name: 'Pinwheel',\n  description: 'Create a pinwheel of colors',\n  params: [\n    intParam({\n      name: 'Offset X',\n      description: 'Change the horizontal center of the pinwheel',\n      defaultValue: 0,\n    }),\n    intParam({\n      name: 'Offset Y',\n      description: 'Change the vertical center of the pinwheel',\n      defaultValue: 40,\n    }),\n    sliderParam({\n      name: 'Group Count',\n      description: 'How many times each color is repeated. Positive integer',\n      defaultValue: 1,\n      min: 1,\n      max: 80,\n    }),\n    variableLengthParam({\n      name: 'Colors',\n      newParamText: 'New Color',\n      description: 'Colors for the pinwheel',\n      defaultValue: DEFAULT_COLORS,\n      createNewParam: () =>\n        colorPickerParam({\n          name: 'Color',\n        }),\n    }),\n  ] as const,\n  fn: mapImage(\n    ({\n      coord,\n      dimensions,\n      frameCount,\n      frameIndex,\n      getSrcPixel,\n      parameters,\n    }) => {\n      const srcPixel = getSrcPixel(coord);\n\n      const [offsetX, offsetY, groupCount, colors] = parameters;\n\n      const ribbonCount = colors.length * groupCount;\n      const ribbonArcDegrees = Math.round(360 / ribbonCount);\n      // Need to make sure ribbonCount is always a multiple of the number of images, otherwise we\n      //  won't get a smooth transition.\n      // We'll cut off colors from the end of the list until we get an even multiple.\n      let colorsLength = colors.length;\n      while ((ribbonCount / colorsLength).toFixed(2).slice(-2) !== '00') {\n        colorsLength -= 1;\n      }\n\n      // Make the transparent parts colorful\n      if (isTransparent(srcPixel)) {\n        const centerX = dimensions[0] / 2 + offsetX;\n        const centerY = dimensions[1] / 2 + offsetY;\n        const [x, y] = coord;\n        const xRelCenter = x - centerX;\n        const yRelCenter = y - centerY;\n\n        const pointAngle =\n          (360 + (Math.atan2(yRelCenter, xRelCenter) * 180) / Math.PI) % 360;\n\n        const colorIdx =\n          Math.floor(pointAngle / ribbonArcDegrees) % colorsLength;\n\n        // Increment colorIdx based on current frame progress\n        const frameProgress = frameIndex / frameCount;\n        const idx =\n          (Math.floor(frameProgress * colorsLength) + colorIdx) % colorsLength;\n        return colors[idx];\n      }\n\n      return srcPixel;\n    }\n  ),\n});\n","import { range } from 'remeda';\n\nimport { buildTransform } from '../domain/types';\nimport {\n  isTransparent,\n  fromHexColor,\n  mapFrames,\n  mapCoords,\n  getPixelFromSource,\n} from '../domain/utils';\nimport { colorPickerParam } from '../params/colorPickerParam';\nimport { sliderParam } from '../params/sliderParam';\nimport { variableLengthParam } from '../params/variableLengthParam';\n\nconst DEFAULT_COLORS = [\n  '#FF0000',\n  '#FF9600',\n  '#FFFF00',\n  '#00FF00',\n  '#00FF96',\n  '#00FFFF',\n  '#0000FF',\n  '#B400FF',\n].map(fromHexColor);\n\nexport const radiance = buildTransform({\n  name: 'Radiance',\n  description: 'Radiate colors out in rings',\n  params: [\n    sliderParam({\n      name: 'Group Count',\n      description: 'How many times each color is repeated. Positive integer',\n      defaultValue: 1,\n      min: 1,\n      max: 90,\n    }),\n    variableLengthParam({\n      name: 'Colors',\n      newParamText: 'New Color',\n      description: 'The colors that make up each ring',\n      defaultValue: DEFAULT_COLORS,\n      createNewParam: () =>\n        colorPickerParam({\n          name: 'Color',\n        }),\n    }),\n  ] as const,\n  fn: ({ image, parameters }) => {\n    const [groupCount, colors] = parameters;\n    const colorList = range(0, groupCount).flatMap(() => colors);\n    const [width, height] = image.dimensions;\n    const centerX = width / 2;\n    const centerY = height / 2;\n\n    return mapFrames(image, (imageData, frameIndex, frameCount) =>\n      mapCoords(image.dimensions, (coord) => {\n        const srcPixel = getPixelFromSource(image.dimensions, imageData, coord);\n\n        // Make the transparent parts colorful\n        if (isTransparent(srcPixel)) {\n          const [x, y] = coord;\n          const xRelCenter = x - centerX;\n          const yRelCenter = y - centerY;\n\n          const maxDist = Math.sqrt(\n            (width / 2) * (width / 2) + (height / 2) * (height / 2)\n          );\n          const distFromCenter = Math.sqrt(\n            yRelCenter * yRelCenter + xRelCenter * xRelCenter\n          );\n\n          const colorIdx =\n            Math.floor((1 - distFromCenter / maxDist) * colorList.length) %\n            colorList.length;\n\n          // Increment colorIdx based on current frame progress\n          const frameProgress = frameIndex / frameCount;\n          const idx =\n            (Math.floor(frameProgress * colorList.length) + colorIdx) %\n            colorList.length;\n          return colorList[idx];\n        }\n\n        return srcPixel;\n      })\n    );\n  },\n});\n","import { adjustImage } from './adjust-image';\nimport { backgroundColor } from './background-color';\nimport { backgroundImage } from './background-image';\nimport { bounce } from './bounce';\nimport { circle } from './circle';\nimport { doubleVision } from './double-vision';\nimport { expand } from './expand';\nimport { fisheye } from './fisheye';\nimport { grayscale } from './grayscale';\nimport { hueParty } from './hue-party';\nimport { hueShift } from './hue-shift';\nimport { lightning } from './lightning';\nimport { nuke } from './nuke';\nimport { party } from './party';\nimport { partyBackground } from './party-background';\nimport { pinwheel } from './pinwheel';\nimport { radiance } from './radiance';\nimport { resizeImage } from './resize-image';\nimport { ripple } from './ripple';\nimport { rotate } from './rotate';\nimport { roxbury } from './roxbury';\nimport { shake } from './shake';\nimport { staticc } from './static';\nimport { staticBackground } from './static-background';\nimport { transparentColor } from './transparent-color';\nimport { transpose } from './transpose';\n\nimport { assert } from '../domain/utils';\n\nexport const POSSIBLE_TRANSFORMS = [\n  adjustImage,\n  backgroundColor,\n  backgroundImage,\n  bounce,\n  circle,\n  doubleVision,\n  expand,\n  fisheye,\n  grayscale,\n  hueParty,\n  hueShift,\n  lightning,\n  nuke,\n  party,\n  partyBackground,\n  pinwheel,\n  radiance,\n  resizeImage,\n  ripple,\n  rotate,\n  roxbury,\n  shake,\n  staticc,\n  staticBackground,\n  transparentColor,\n  transpose,\n].sort((x, y) => (x.name > y.name ? 1 : -1));\n\nexport const transformByName = (name: string) => {\n  const t = POSSIBLE_TRANSFORMS.find((t) => t.name === name);\n  assert(t);\n  return t;\n};\n","import { buildTransform } from '../domain/types';\nimport { resizeImage as resizeImageUtil } from '../domain/utils';\nimport { intParam } from '../params/intParam';\n\nexport const resizeImage = buildTransform({\n  name: 'Resize Image',\n  description:\n    'Change the dimensions of the image. ' +\n    'If bigger than original, the extra space will be transparent. ' +\n    'If smaller, the image will be cropped. ',\n  params: [\n    intParam({ name: 'Width', defaultValue: 128, min: 0 }),\n    intParam({ name: 'Height', defaultValue: 128, min: 0 }),\n  ],\n  fn: ({ image, parameters }) =>\n    resizeImageUtil({\n      image,\n      newWidth: parameters[0],\n      newHeight: parameters[1],\n    }),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapFrames, mapCoords, getPixelFromSource } from '../domain/utils';\nimport { floatParam } from '../params/floatParam';\nimport { intParam } from '../params/intParam';\n\nexport const ripple = buildTransform({\n  name: 'Ripple',\n  description: 'Create a ripple effect, like water',\n  params: [\n    floatParam({\n      name: 'Amplitude',\n      defaultValue: 10,\n      description: 'How strong the ripple effect should be',\n    }),\n    intParam({\n      name: 'Period',\n      defaultValue: 2,\n      min: 0,\n      description: 'How many ripples you want. Positive number.',\n    }),\n  ],\n  fn: ({ image, parameters }) =>\n    mapFrames(image, (data, frameIndex, frameCount) => {\n      const [amplitude, period] = parameters;\n\n      const height = image.dimensions[1];\n      const shift = (frameIndex / frameCount) * 2 * Math.PI;\n      return mapCoords(image.dimensions, ([x, y]) => {\n        const offset = Math.round(\n          amplitude * Math.sin((y / height) * period * Math.PI + shift)\n        );\n\n        return getPixelFromSource(image.dimensions, data, [x + offset, y]);\n      });\n    }),\n});\n","import { mapImage } from '../domain/utils';\nimport { buildTransform, Coord } from '../domain/types';\nimport { dropdownParam } from '../params/dropdownParam';\n\nexport const rotate = buildTransform({\n  name: 'Rotate',\n  description: 'Make the image rotate about the center point',\n  params: [\n    dropdownParam({\n      name: 'Direction',\n      defaultValue: -1,\n      options: [\n        { name: 'Clockwise', value: -1 },\n        { name: 'Counter-Clockwise', value: 1 },\n      ],\n    }),\n  ],\n  fn: mapImage(\n    ({\n      dimensions,\n      coord,\n      frameCount,\n      frameIndex,\n      getSrcPixel,\n      parameters,\n    }) => {\n      const [sign] = parameters;\n      const centerX = dimensions[0] / 2;\n      const centerY = dimensions[1] / 2;\n      const [x, y] = coord;\n      const xRelCenter = x - centerX;\n      const yRelCenter = y - centerY;\n\n      const amount = (frameIndex / frameCount) * (sign || 1);\n      const cos = Math.cos(2 * Math.PI * amount);\n      const sin = Math.sin(2 * Math.PI * amount);\n\n      const newCoord: Coord = [\n        Math.round(centerX + xRelCenter * cos - yRelCenter * sin),\n        Math.round(centerY + yRelCenter * cos + xRelCenter * sin),\n      ];\n\n      return getSrcPixel(newCoord);\n    }\n  ),\n});\n","import { mapFrames, mapCoords, getPixelFromSource } from '../domain/utils';\nimport { buildTransform, Coord } from '../domain/types';\n\nexport const roxbury = buildTransform({\n  name: 'Roxbury',\n  description: \"Baby, don't hurt me\",\n  params: [],\n  fn: ({ image }) =>\n    mapFrames(image, (data, frameIndex, frameCount) => {\n      const idx = frameIndex / frameCount;\n      // 4 phases:\n      //  0 -> freeze\n      //  1 -> rotate clockwise\n      //  2 -> freeze\n      //  3 -> rotate counter-clockwise\n      const phase = Math.floor(idx * 4);\n      const phaseIdx = (idx - phase / 4) * 4;\n\n      const maxAngle = (Math.PI / 2) * 0.2; // 40% of 90 degrees\n\n      const angle =\n        phase === 0\n          ? 0\n          : phase === 1\n          ? phaseIdx * maxAngle // Rotate clockwise\n          : phase === 2\n          ? maxAngle // Freeze!\n          : (1 - phaseIdx) * maxAngle; // Rotate counter-clockwise\n\n      const cos = Math.cos(-angle * 1.35);\n      const sin = Math.sin(-angle * 1.35);\n\n      const rotatePointX = image.dimensions[0] * 0.25;\n      const rotatePointY = image.dimensions[1] * 0.7;\n\n      return mapCoords(image.dimensions, (coord) => {\n        const [x, y] = coord;\n        const xRelCenter = Math.floor(x - rotatePointX + 8 * Math.sin(angle));\n        const yRelCenter = Math.floor(y - rotatePointY + 8 * Math.cos(angle));\n\n        const newCoord: Coord = [\n          Math.round(rotatePointX + xRelCenter * cos - yRelCenter * sin),\n          Math.round(rotatePointY + yRelCenter * cos + xRelCenter * sin),\n        ];\n\n        return getPixelFromSource(image.dimensions, data, newCoord);\n      });\n    }),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage } from '../domain/utils';\nimport { floatParam } from '../params/floatParam';\n\nexport const shake = buildTransform({\n  name: 'Shake',\n  description: 'Make the image shake back and forth',\n  params: [floatParam({ name: 'Amplitude', defaultValue: 10, min: 0 })],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel, parameters }) => {\n    const [amplitude] = parameters;\n    const [x, y] = coord;\n    const xOffset =\n      x +\n      Math.round(amplitude * Math.cos((frameIndex / frameCount) * 2 * Math.PI));\n\n    return getSrcPixel([xOffset, y]);\n  }),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage, isTransparent } from '../domain/utils';\nimport { sliderParam } from '../params/sliderParam';\n\nexport const staticc = buildTransform({\n  name: 'Static',\n  description: 'Adds random static to the image',\n  params: [\n    sliderParam({\n      name: 'Strength',\n      description: 'Higher number increases the amount of static pixels',\n      defaultValue: 25,\n      min: 5,\n      max: 100,\n      step: 5,\n    }),\n  ],\n  fn: mapImage(({ coord, getSrcPixel, parameters, random }) => {\n    const [strength] = parameters;\n    const src = getSrcPixel(coord);\n\n    if (isTransparent(src)) {\n      return [0, 0, 0, 0];\n    }\n\n    const isStatic = Math.ceil(random() * 100) < strength;\n    const grey = Math.ceil(random() * 255);\n\n    return isStatic ? [grey, grey, grey, src[3]] : src;\n  }),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage, isTransparent } from '../domain/utils';\nimport { sliderParam } from '../params/sliderParam';\n\nexport const staticBackground = buildTransform({\n  name: 'Static Background',\n  description: 'Adds random static to the background',\n  params: [\n    sliderParam({\n      name: 'Strength',\n      description: 'Higher number increases the amount of static pixels',\n      defaultValue: 25,\n      min: 5,\n      max: 100,\n      step: 5,\n    }),\n  ],\n  fn: mapImage(({ coord, getSrcPixel, parameters, random }) => {\n    const [strength] = parameters;\n    const src = getSrcPixel(coord);\n\n    if (isTransparent(src)) {\n      const inverse = Math.ceil(random() * 100) < strength;\n      const grey = Math.ceil(random() * 255);\n\n      return inverse ? [grey, grey, grey, 255] : src;\n    }\n\n    return src;\n  }),\n});\n","import { buildTransform } from '../domain/types';\nimport { fromHexColor, mapImage } from '../domain/utils';\nimport { colorPickerParam } from '../params/colorPickerParam';\nimport { sliderParam } from '../params/sliderParam';\n\nexport const transparentColor = buildTransform({\n  name: 'Transparent Color',\n  description:\n    'All pixels similar in color to the chosen one will be made transparent',\n  params: [\n    colorPickerParam({\n      name: 'Transparent Color',\n      defaultValue: fromHexColor('#000000'),\n    }),\n    sliderParam({\n      name: 'Tolerance',\n      description:\n        'A higher number will mean colors that are \"close\" to the chosen color will be transparent. (0 - 100)',\n      defaultValue: 10,\n      min: 0,\n      max: 100,\n      step: 5,\n    }),\n  ] as const,\n  fn: mapImage(({ coord, getSrcPixel, parameters }) => {\n    const [color, tolerance] = parameters;\n    const p = getSrcPixel(coord);\n    const diff0 = p[0] - color[0];\n    const diff1 = p[1] - color[1];\n    const diff2 = p[2] - color[2];\n    const diff = Math.sqrt(diff0 * diff0 + diff1 * diff1 + diff2 * diff2);\n    if ((diff / 255) * 100 <= tolerance) {\n      return [p[0], p[1], p[2], 0];\n    }\n    return p;\n  }),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage } from '../domain/utils';\nimport { intParam } from '../params/intParam';\n\nexport const transpose = buildTransform({\n  name: 'Transpose',\n  description: 'Move the image left or right, up or down',\n  params: [\n    intParam({ name: 'X', defaultValue: 0 }),\n    intParam({ name: 'Y', defaultValue: 0 }),\n  ],\n  fn: mapImage(({ coord, getSrcPixel, parameters }) => {\n    const [transX, transY] = parameters;\n    const [x, y] = coord;\n\n    return getSrcPixel([x + transX, y + transY]);\n  }),\n});\n","import React from 'react';\nimport {\n  Button,\n  CircularProgress,\n  Divider,\n  Grid,\n  Icon,\n  LinearProgress,\n  Stack,\n  Typography,\n} from '@material-ui/core';\n\nimport { assert } from '../domain/utils';\nimport { runTransforms } from '../domain/run';\nimport { AppState, TransformInput } from '../domain/types';\nimport { transformByName } from '../transforms';\nimport { sliderParam } from '../params/sliderParam';\n\ninterface ComputeBoxProps {\n  computeDisabled: boolean;\n  appState: AppState;\n  onFpsChange: (fps: number) => void;\n  onComputed: () => void;\n}\n\ntype ComputeState =\n  | {\n      loading: false;\n      results: { transformName: string; gif: string }[];\n      computeTime: number | undefined;\n    }\n  | { loading: true };\n\nconst DEFAULT_FPS = 20;\nconst fpsParam = sliderParam({\n  name: 'Frames per Second',\n  defaultValue: DEFAULT_FPS,\n  min: 1,\n  max: 60,\n});\n\nexport const ComputeBox: React.FC<ComputeBoxProps> = ({\n  computeDisabled,\n  appState,\n  onFpsChange,\n  onComputed,\n}) => {\n  const [computeState, setComputeState] = React.useState<ComputeState>({\n    loading: false,\n    results: [],\n    computeTime: undefined,\n  });\n  const [progress, setProgress] = React.useState<number | undefined>();\n\n  return (\n    <Stack spacing={1}>\n      <Typography variant=\"h5\">Create Gif</Typography>\n\n      <div style={{ maxWidth: '300px' }}>\n        {fpsParam.fn({\n          value: { valid: true, value: appState.fps },\n          onChange: (x) => {\n            if (x.valid) {\n              onFpsChange(x.value);\n            }\n          },\n        })}\n      </div>\n      <Button\n        variant=\"contained\"\n        sx={{ maxWidth: '300px' }}\n        endIcon={\n          !computeState.loading && appState.dirty ? (\n            <Icon>priority_high</Icon>\n          ) : undefined\n        }\n        disabled={computeDisabled}\n        onClick={async () => {\n          const transformInputs = appState.transforms.map(\n            (t): TransformInput<any> => ({\n              transform: transformByName(t.transformName),\n              params: t.paramsValues.map((p) => {\n                assert(p.valid);\n                return p.value;\n              }),\n            })\n          );\n          setComputeState({ loading: true });\n          setTimeout(async () => {\n            try {\n              assert(\n                appState.baseImage,\n                'No source image, this button should be disabled!'\n              );\n              const start = Date.now();\n              let currIdx = 0;\n              setProgress(0);\n              const results = await runTransforms({\n                inputDataUrl: appState.baseImage,\n                transformList: transformInputs,\n                fps: appState.fps,\n                onImageFinished: () => {\n                  currIdx += 1;\n                  setProgress((currIdx / transformInputs.length) * 100);\n                },\n              });\n              const computeTime = Math.ceil((Date.now() - start) / 1000);\n              setComputeState({\n                loading: false,\n                computeTime,\n                results: results.map((result, idx) => ({\n                  transformName: appState.transforms[idx].transformName,\n                  gif: result.gif,\n                })),\n              });\n              setProgress(undefined);\n              onComputed();\n            } catch (err) {\n              console.error(err);\n              console.error((err as any).stack);\n            }\n          });\n        }}\n      >\n        {computeState.loading ? (\n          <CircularProgress color=\"inherit\" />\n        ) : (\n          'Compute'\n        )}\n      </Button>\n      {progress !== undefined && (\n        <LinearProgress variant=\"determinate\" value={progress} />\n      )}\n      {!computeState.loading && computeState.computeTime !== undefined && (\n        <>\n          <Divider />\n          <Typography variant=\"caption\">\n            Compute Time: {computeState.computeTime} second(s)\n          </Typography>\n        </>\n      )}\n\n      {!computeState.loading && computeState.results.length > 0 && (\n        <>\n          <Divider />\n          <Grid\n            container\n            spacing={2}\n            padding={1}\n            columns={{ xs: 4, sm: 8, md: 12 }}\n          >\n            {computeState.results.map(({ gif, transformName }, idx) => (\n              <Grid item xs={4} sm={4} md={4} key={`${transformName}-${idx}`}>\n                <Typography variant=\"subtitle2\">{transformName}</Typography>\n                <img\n                  src={gif}\n                  alt={`gif-${transformName}-${idx}`}\n                  style={{ maxWidth: '300px', maxHeight: 'auto' }}\n                ></img>\n              </Grid>\n            ))}\n          </Grid>\n        </>\n      )}\n    </Stack>\n  );\n};\n","import {\n  FormControl,\n  IconButton,\n  Icon,\n  Tooltip,\n  Stack,\n  Typography,\n  Paper,\n  Autocomplete,\n  TextField,\n  Divider,\n} from '@material-ui/core';\nimport React from 'react';\n\nimport { ParamFunction, ParamValue, Transform } from '../domain/types';\n\ninterface SelectedTransform {\n  transform: Transform<any>;\n  paramValues: ParamValue<any>[];\n}\n\ninterface ImageTransformProps {\n  selectedTransform: SelectedTransform;\n  possibleTransforms: Transform<any>[];\n  index: number;\n  onSelect: (selected: SelectedTransform) => void;\n  onRemove: () => void;\n  onMoveLeft?: () => void;\n  onMoveRight?: () => void;\n}\n\nexport const ImageTransform: React.FC<ImageTransformProps> = ({\n  selectedTransform,\n  possibleTransforms,\n  index,\n  onSelect,\n  onRemove,\n  onMoveLeft,\n  onMoveRight,\n}) => {\n  return (\n    <Paper style={{ padding: 8 }} elevation={3}>\n      <Stack spacing={1}>\n        <Stack direction=\"row\" spacing={2}>\n          <Typography variant=\"subtitle1\">{index + 1}</Typography>\n          <Tooltip title=\"Delete transform\">\n            <IconButton aria-label=\"delete\" onClick={onRemove}>\n              <Icon>delete</Icon>\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Move transform left\">\n            <IconButton\n              aria-label=\"delete\"\n              onClick={onMoveLeft}\n              disabled={!onMoveLeft}\n            >\n              <Icon>chevron_left</Icon>\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Move transform right\">\n            <IconButton\n              aria-label=\"delete\"\n              onClick={onMoveRight}\n              disabled={!onMoveRight}\n            >\n              <Icon>chevron_right</Icon>\n            </IconButton>\n          </Tooltip>\n        </Stack>\n        <Stack direction=\"row\" spacing={4}>\n          <FormControl fullWidth>\n            <Autocomplete\n              disableClearable\n              value={selectedTransform.transform.name}\n              options={possibleTransforms.map((t) => t.name)}\n              onChange={(event, newTransformName) => {\n                const t = possibleTransforms.find(\n                  (t) => t.name === newTransformName\n                )!;\n                // Reset all the params when you select a new transform\n                onSelect({\n                  transform: t,\n                  paramValues: t.params.map(\n                    (p: ParamFunction<any>) => p.defaultValue\n                  ),\n                });\n              }}\n              renderInput={(params) => (\n                <TextField {...params} label=\"Transform\" />\n              )}\n            />\n          </FormControl>\n        </Stack>\n        {selectedTransform.transform.description && (\n          <Typography variant=\"caption\">\n            {selectedTransform.transform.description}\n          </Typography>\n        )}\n        {selectedTransform.transform.params.length > 0 && (\n          <Typography variant=\"subtitle1\">Parameters</Typography>\n        )}\n        <Stack divider={<Divider />} spacing={2}>\n          {selectedTransform.transform.params.map(\n            // Create elements for each of the parameters for the selectect transform.\n            // Each of these would get an onChange event so we know when the user has\n            //  selected a value.\n            (param: ParamFunction<any>, idx: number) => {\n              const ele = param.fn({\n                value: selectedTransform.paramValues[idx],\n                onChange: (v) => {\n                  onSelect({\n                    ...selectedTransform,\n                    paramValues: selectedTransform.paramValues.map((x, i) => {\n                      if (i === idx) {\n                        return v;\n                      }\n                      return x;\n                    }),\n                  });\n                },\n              });\n              return (\n                <React.Fragment\n                  key={`${selectedTransform.transform.name}-${param.name}`}\n                >\n                  {ele}\n                </React.Fragment>\n              );\n            }\n          )}\n        </Stack>\n      </Stack>\n    </Paper>\n  );\n};\n","import { Button, Grid, Icon, Stack, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { ParamFunction, Transform, TransformWithParams } from '../domain/types';\nimport { transformByName } from '../transforms';\nimport { ImageTransform } from './ImageTransform';\n\ninterface TransformListProps {\n  currentTransforms: TransformWithParams<any>[];\n  possibleTransforms: Transform<any>[];\n  onTransformsChange: (t: TransformWithParams<any>[]) => void;\n}\n\nexport const ImageTransformList: React.FC<TransformListProps> = ({\n  currentTransforms,\n  possibleTransforms,\n  onTransformsChange,\n}) => (\n  <Stack spacing={1}>\n    <Typography variant=\"h5\">Image Transforms</Typography>\n    <Grid\n      container\n      spacing={2}\n      padding={1}\n      columns={{ xs: 4, sm: 8, md: 12 }}\n      rowSpacing={4}\n    >\n      {currentTransforms.map((t, tIdx) => (\n        <Grid item xs={4} sm={4} md={4} key={`${t.transformName}-${tIdx}`}>\n          <ImageTransform\n            index={tIdx}\n            possibleTransforms={possibleTransforms}\n            selectedTransform={{\n              transform: transformByName(t.transformName),\n              paramValues: t.paramsValues,\n            }}\n            onRemove={() =>\n              onTransformsChange(\n                currentTransforms.filter((nextT, newIdx) => newIdx !== tIdx)\n              )\n            }\n            onMoveLeft={\n              tIdx > 0\n                ? () =>\n                    onTransformsChange(\n                      currentTransforms.map((nextT, newIdx) => {\n                        if (newIdx === tIdx - 1) {\n                          // This is the next item in the list\n                          return currentTransforms[newIdx + 1];\n                        } else if (tIdx === newIdx) {\n                          // This is the previous item\n                          return currentTransforms[tIdx - 1];\n                        } else {\n                          return nextT;\n                        }\n                      })\n                    )\n                : undefined\n            }\n            onMoveRight={\n              tIdx < currentTransforms.length - 1\n                ? () =>\n                    onTransformsChange(\n                      currentTransforms.map((nextT, newIdx) => {\n                        if (newIdx === tIdx + 1) {\n                          // This is the previous item in the list\n                          return currentTransforms[newIdx - 1];\n                        } else if (tIdx === newIdx) {\n                          // This is the next item\n                          return currentTransforms[tIdx + 1];\n                        } else {\n                          return nextT;\n                        }\n                      })\n                    )\n                : undefined\n            }\n            onSelect={(selected) =>\n              onTransformsChange(\n                currentTransforms.map((nextT, nextTIdx) => {\n                  if (tIdx === nextTIdx) {\n                    // This is the one we just changed\n                    return {\n                      transformName: selected.transform.name,\n                      paramsValues: selected.paramValues,\n                      computedImage: undefined,\n                    };\n                  }\n                  // Reset all the images if we changed anything\n                  return {\n                    transformName: nextT.transformName,\n                    paramsValues: nextT.paramsValues,\n                    computedImage: undefined,\n                  };\n                })\n              )\n            }\n          />\n        </Grid>\n      ))}\n      <Grid item xs={4} sm={4} md={4}>\n        <Stack spacing={4}>\n          <Button\n            fullWidth={false}\n            variant=\"contained\"\n            startIcon={<Icon>add</Icon>}\n            onClick={() =>\n              onTransformsChange([\n                ...currentTransforms,\n                {\n                  transformName: possibleTransforms[0].name,\n                  paramsValues: possibleTransforms[0].params.map(\n                    (p: ParamFunction<any>) => p.defaultValue\n                  ),\n                },\n              ])\n            }\n          >\n            New Transform\n          </Button>\n        </Stack>\n      </Grid>\n    </Grid>\n  </Stack>\n);\n","import { Stack, Button, Icon, Typography, Alert } from '@material-ui/core';\nimport React from 'react';\nimport * as lz from 'lz-string';\nimport { AppState } from '../domain/types';\n\ninterface ImportExportProps {\n  state: AppState;\n  onImport: (o: AppState) => void;\n}\n\nexport const ImportExport: React.FC<ImportExportProps> = ({\n  state,\n  onImport,\n}) => {\n  const [info, setInfo] = React.useState<string | undefined>();\n  const [isInvalid, setInvalid] = React.useState(false);\n\n  const showInfo = (text: string) => {\n    setInfo(text);\n    setTimeout(() => setInfo(undefined), 2000);\n  };\n\n  const showError = () => {\n    setInvalid(true);\n    setTimeout(() => setInvalid(false), 2000);\n  };\n\n  return (\n    <Stack spacing={3}>\n      <Typography variant=\"h5\">Import/Export</Typography>\n      <Button\n        startIcon={<Icon>file_upload</Icon>}\n        sx={{ maxWidth: '300px' }}\n        variant=\"contained\"\n        onClick={() => {\n          const output = lz.compressToBase64(\n            JSON.stringify({ ...state, baseImage: undefined })\n          );\n          navigator.clipboard.writeText(output);\n          showInfo('Copied to clipboard');\n        }}\n      >\n        Export to clipboard <br /> (NO Source Image)\n      </Button>\n      <Button\n        startIcon={<Icon>file_upload</Icon>}\n        sx={{ maxWidth: '300px' }}\n        variant=\"contained\"\n        onClick={() => {\n          const output = lz.compressToBase64(JSON.stringify(state));\n          navigator.clipboard.writeText(output);\n          showInfo('Copied to clipboard');\n        }}\n      >\n        Export to clipboard <br />\n        (With Source Image)\n      </Button>\n      <Button\n        startIcon={<Icon>file_download</Icon>}\n        sx={{ maxWidth: '300px' }}\n        variant=\"contained\"\n        onClick={async () => {\n          try {\n            const clipboardContents = await navigator.clipboard.readText();\n            if (!clipboardContents) {\n              showError();\n              return;\n            }\n            const data = JSON.parse(\n              lz.decompressFromBase64(clipboardContents)!\n            );\n            if (!Array.isArray(data.transforms)) {\n              showError();\n              return;\n            }\n            onImport(data);\n            setInvalid(false);\n          } catch (e) {\n            console.error(e);\n            showError();\n          }\n        }}\n      >\n        Import from clipboard\n      </Button>\n      {info && (\n        <Alert severity=\"info\" sx={{ maxWidth: '300px' }}>\n          {info}\n        </Alert>\n      )}\n      {isInvalid && (\n        <Alert severity=\"error\" sx={{ maxWidth: '300px' }}>\n          Error importing from clipboard\n        </Alert>\n      )}\n    </Stack>\n  );\n};\n","import React from 'react';\nimport ScopedCssBaseline from '@material-ui/core/ScopedCssBaseline';\nimport {\n  Container,\n  Stack,\n  Divider,\n  Paper,\n  Typography,\n  Button,\n  Icon,\n} from '@material-ui/core';\n\nimport { POSSIBLE_TRANSFORMS, transformByName } from './transforms';\nimport { ParamFunction, AppState } from './domain/types';\nimport { ComputeBox } from './components/ComputeBox';\nimport { ImagePicker } from './components/ImagePicker';\nimport { ImageTransformList } from './components/ImageTransformList';\nimport { ImportExport } from './components/ImportExport';\nimport { Help } from './components/Help';\n\n// Set to true to print out the current state at the bottom of the page\nconst DEBUG = false;\n\nconst LOCAL_STORAGE_KEY = 'partymoji-state';\n\nconst DEFAULT_STATE: AppState = {\n  dirty: false,\n  transforms: [],\n  baseImage: undefined,\n  fps: 20,\n};\n\nexport const App: React.FC = () => {\n  const [state, setStateRaw] = React.useState(DEFAULT_STATE);\n\n  React.useEffect(() => {\n    // If we have local storage state on startup, then reload that\n    try {\n      const stored = window.localStorage.getItem(LOCAL_STORAGE_KEY);\n      if (stored) {\n        const savedState = JSON.parse(stored);\n        if (!Array.isArray(savedState.transforms)) {\n          // Dunno what we just loaded, not the right thing\n          return;\n        }\n\n        setStateRaw(savedState);\n      }\n    } catch (err) {\n      // @ts-ignore\n      console.error('Error loading state from local storage', err.stack || err);\n    }\n  }, []);\n\n  const setState = (newState: AppState) => {\n    try {\n      window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(newState));\n    } catch (err) {\n      // @ts-ignore\n      console.error('Error saving state to local storage', err.stack || err);\n    }\n    setStateRaw(newState);\n  };\n\n  if (DEBUG) {\n    (window as any).STATE = state;\n  }\n\n  const computeBtnDisbled =\n    !state.baseImage ||\n    state.transforms.length === 0 ||\n    !state.dirty ||\n    state.transforms.some((t) => {\n      const params = transformByName(t.transformName)\n        .params as ParamFunction<any>[];\n      return (\n        params.length > 0 && t.paramsValues.every((p, i) => p.valid === false)\n      );\n    });\n\n  return (\n    <>\n      <ScopedCssBaseline />\n      <Container>\n        <Stack spacing={4} justifyContent=\"space-evenly\" divider={<Divider />}>\n          <Typography variant=\"h2\" pt={4}>\n            Partymoji\n          </Typography>\n          <Stack spacing={4} divider={<Divider />}>\n            {DEBUG && (\n              <Paper style={{ padding: 16 }}>\n                <Help />\n              </Paper>\n            )}\n            <Paper style={{ padding: 16 }}>\n              <Stack spacing={1}>\n                <Typography variant=\"h5\">Source Image</Typography>\n                <ImagePicker\n                  name=\"Choose a source image\"\n                  currentImageUrl={state.baseImage}\n                  onChange={(baseImage) => {\n                    setState({\n                      ...state,\n                      baseImage,\n                      dirty: true,\n                    });\n                  }}\n                />\n              </Stack>\n            </Paper>\n            <Paper style={{ padding: 16 }}>\n              <ImageTransformList\n                currentTransforms={state.transforms}\n                possibleTransforms={POSSIBLE_TRANSFORMS}\n                onTransformsChange={(transforms) =>\n                  setState({\n                    ...state,\n                    dirty: true,\n                    transforms,\n                  })\n                }\n              />\n            </Paper>\n            <Paper style={{ padding: 16 }}>\n              <ComputeBox\n                computeDisabled={computeBtnDisbled}\n                appState={state}\n                onFpsChange={(fps) =>\n                  setState({\n                    ...state,\n                    fps,\n                    dirty: true,\n                  })\n                }\n                onComputed={() =>\n                  setState({\n                    ...state,\n                    dirty: false,\n                  })\n                }\n              />\n            </Paper>\n            <Paper style={{ padding: 16 }}>\n              <ImportExport\n                state={state}\n                onImport={(newState) => setState({ ...newState, dirty: true })}\n              />\n            </Paper>\n            <Paper style={{ padding: 16 }}>\n              <Stack spacing={3}>\n                <Typography variant=\"h5\">Clear State</Typography>\n                <Typography variant=\"body1\">\n                  Clicking this button will clear the source image and all\n                  transforms\n                </Typography>\n                <Button\n                  startIcon={<Icon>clear</Icon>}\n                  sx={{ maxWidth: '300px' }}\n                  variant=\"contained\"\n                  onClick={() => {\n                    window.localStorage.removeItem(LOCAL_STORAGE_KEY);\n                    setStateRaw(DEFAULT_STATE);\n                  }}\n                >\n                  Clear State\n                </Button>\n              </Stack>\n            </Paper>\n            {DEBUG && (\n              <div>\n                <code>{JSON.stringify(state, null, 2)}</code>\n              </div>\n            )}\n            <a\n              href=\"https://github.com/MikeyBurkman/partymoji\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <img\n                src=\"https://upload.wikimedia.org/wikipedia/commons/9/91/Octicons-mark-github.svg\"\n                width={64}\n                height={64}\n                alt=\"Github Link\"\n              ></img>\n            </a>\n          </Stack>\n        </Stack>\n      </Container>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}