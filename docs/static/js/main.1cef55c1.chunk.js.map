{"version":3,"sources":["domain/types.ts","domain/utils.ts","transforms/background-party.ts","params/dropdownParam.tsx","domain/run.ts","components/ImagePicker.tsx","transforms/background-image.ts","params/textParam.tsx","params/imagePickerParam.tsx","params/floatParam.tsx","transforms/bounce.ts","params/intParam.tsx","transforms/brightness.ts","transforms/circle.ts","transforms/expand.ts","transforms/fisheye.ts","transforms/frame-count.ts","transforms/grayscale.ts","transforms/hue-party.ts","transforms/hue-shift.ts","transforms/lightning.ts","transforms/party.ts","components/Expandable.tsx","params/colorPickerParam.tsx","params/variableLengthParam.tsx","transforms/pinwheel.ts","transforms/radiance.ts","transforms/index.ts","transforms/resize.ts","transforms/resize-background.ts","transforms/ripple.ts","transforms/rotate.ts","transforms/roxbury.ts","transforms/shake.ts","transforms/solid-background.ts","transforms/static.ts","transforms/transparency.ts","transforms/transpose.ts","components/ComputeBox.tsx","components/ImageTransform.tsx","components/ImageTransformList.tsx","components/ImportExport.tsx","App.tsx","index.tsx"],"names":["buildTransform","args","name","params","description","fn","toHexColor","r","g","b","toHexValue","c","s","toString","toUpperCase","length","fromHexColor","hex","parseInt","substr","isTransparent","pixel","randomColor","random","Math","floor","int32","getAveragePixelValue","round","clampColor","a","clamp","n","max","min","getPixelFromSource","dimensions","image","coord","width","height","x","y","idx","getImageIndex","assert","condition","message","AssertionError","actual","mapFrames","cb","frames","map","frame","data","mapCoords","transformedImageData","Uint8Array","mapImage","parameters","imageData","frameIndex","frameCount","getSrcPixel","repeat","times","Array","_","i","writePixel","color","resizeImage","newWidth","newHeight","xRatio","yRatio","newDimensions","srcX","srcY","PARTY_COLORS","backgroundParty","srcPixel","partyColorIdx","DropdownParam","options","value","onChange","Stack","spacing","direction","Typography","variant","Tooltip","title","Icon","fontSize","FormControl","Select","autoWidth","event","valid","target","t","MenuItem","dropdownParam","defaultValue","undefined","runTransforms","inputDataUrl","transformList","fps","seedrandom","readImage","originalImage","images","reduce","transformInput","result","transform","push","Promise","all","newImage","transparentColor","getTransparentColor","encodeTransparency","f","createGif","img","resolve","gif","gifEncoder","setFrameRate","setRepeat","hexColor","slice","setTransparent","writeHeader","on","chunk","dataUrl","URL","createObjectURL","Blob","type","forEach","addFrame","finish","res","rej","getPixels","err","getPixelResults","from","shape","hasTransparent","seenPixels","Set","attempt","px","add","findRandomColorNotInSet","set","attempts","col","has","ImagePicker","currentImageUrl","maxWidth","Button","startIcon","component","hidden","accept","files","file","readFile","baseImage","src","alt","reader","FileReader","onload","readAsDataURL","backgroundImage","imagePickerParam","otherImage","otherImageSrc","FloatParam","parse","React","useState","val","setVal","invalidText","setInvalidText","TextField","error","onBlur","reason","e","FormHelperText","floatParam","parseFloat","isNaN","bounce","sin","PI","IntParam","intParam","brightness","rawAmount","p","circle","radius","cos","expand","dist","centerX","centerY","fisheye","expanding","angle","atan2","currentFrames","grayscale","gray","hueParty","convert","hsl","h","l","newH","rgb","hueShift","TextParam","lightningIntensities","lightning","flashIntensity","icf","party","partyColor","Expandable","mainEle","children","collapsed","setCollapsed","ClickAwayListener","onClickAway","Box","onClick","style","textTransform","Collapse","in","ColorBox","backgroundColor","ColorPickerParam","disableAlpha","presetColors","onChangeComplete","colorPickerParam","VariableLengthParam","newParamText","createNewParam","v","param","pValue","setParams","Paper","ele","newValue","oldP","IconButton","newParams","filter","variableLengthParam","DEFAULT_COLORS","pinwheel","offsetX","offsetY","groupCount","colors","ribbonCount","ribbonArcDegrees","colorsLength","toFixed","xRelCenter","yRelCenter","pointAngle","colorIdx","frameProgress","POSSIBLE_TRANSFORMS","colorList","flatMap","maxDist","sqrt","distFromCenter","xPadding","yPadding","amplitude","period","shift","offset","sign","amount","phase","phaseIdx","maxAngle","rotatePointX","rotatePointY","newCoord","shakeSpeed","strength","ceil","tolerance","diff0","diff1","diff2","transX","transY","transformByName","find","fpsParam","ComputeBox","isDirty","computeDisabled","baseImageUrl","transforms","onComputed","loading","results","computeTime","state","setState","fpsChanged","setFpsChanged","setFps","buttonDisabled","endIcon","disabled","transformInputs","transformName","paramsValues","setTimeout","start","Date","now","gifs","console","stack","CircularProgress","Divider","Grid","container","padding","columns","xs","sm","md","item","ImageTransform","selectedTransform","possibleTransforms","index","onSelect","onRemove","onMoveLeft","onMoveRight","elevation","aria-label","fullWidth","Autocomplete","disableClearable","newTransformName","paramValues","renderInput","label","divider","Fragment","ImageTransformList","currentTransforms","onTransformsChange","tIdx","nextT","newIdx","selected","nextTIdx","computedImage","ImportExport","onImport","info","setInfo","isInvalid","setInvalid","Alert","severity","output","lz","JSON","stringify","navigator","clipboard","writeText","readText","clipboardContents","App","dirty","computeBtnDisbled","some","every","ScopedCssBaseline","Container","justifyContent","pt","newState","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1cef55c1.chunk.js","sourcesContent":["import seedrandom from 'seedrandom';\n\n/**\n * [R, G, B, A] in values 0 - 255 inclusive\n */\nexport type Color = [number, number, number, number];\n\n/**\n * [x, y]\n */\nexport type Coord = [number, number];\n\n/**\n * [width, height]\n */\nexport type Dimensions = [number, number];\n\n/**\n * A one-dimensional array of pixels.\n * A 3x2 image would contain 24 (6*4) numbers, and would look like this:\n *  [\n *    r1,g1,b1,a1, r2,g2,b2,a2, r3,g3,b3,a3,\n *    r4,g4,b4,a4, r5,g5,b5,a5, r6,g6,b6,a6\n *  ]\n *\n * [0, 0] = index 0\n * [1, 0] = index 4\n * [2, 0] = index 8\n * [0, 1] = index 12\n * [1, 1] = index 16\n * [2, 1] = index 20\n * To get pixel [x, y], do (x + y * width) * 4\n */\nexport type ImageData = Uint8Array;\n\nexport type Frame = {\n  data: ImageData;\n};\n\n/**\n * The results of get-pixels processImage()\n */\nexport interface Image {\n  dimensions: Dimensions;\n  frames: Frame[];\n}\n\nexport type Random = seedrandom.prng;\n\nexport interface TransformFnOpts<Params> {\n  /**\n   * The image we're trying to transform\n   */\n  image: Image;\n\n  /**\n   * Use to generate \"random\" numbers. It's seeded, so that subsequent calls will yield the same value on the same image.\n   */\n  random: Random;\n\n  /**\n   * User-passed in parameters.\n   */\n  parameters: Params;\n}\n\nexport type ParamValue<T> = { valid: true; value: T } | { valid: false };\n\nexport interface Parameter<T> {\n  name: string;\n  defaultValue: T;\n  ele: JSX.Element;\n}\n\nexport interface Params<T> {\n  value: ParamValue<T>;\n  onChange: (v: ParamValue<T>) => void;\n}\n\nexport type ParamFunction<T> = {\n  name: string;\n  defaultValue: ParamValue<T>;\n  fn: (params: Params<T>) => JSX.Element;\n};\n\nexport type TransformFn<Params> = (opts: TransformFnOpts<Params>) => Image;\n\ntype ParamType<Type> = Type extends ParamFunction<infer X> ? X : never;\n\nexport interface Transform<T extends readonly ParamFunction<any>[]> {\n  name: string;\n  params: T;\n  description?: string;\n  fn: TransformFn<{ [P in keyof T]: ParamType<T[P]> }>;\n}\n\nexport interface TransformWithParams<T extends readonly ParamFunction<any>[]> {\n  transformName: string;\n  paramsValues: ParamValue<T>[];\n}\n\nexport interface TransformInput<T extends ParamFunction<any>[]> {\n  transform: Transform<T>;\n  params: T;\n}\n\nexport const buildTransform = <T extends readonly ParamFunction<any>[]>(args: {\n  name: string;\n  params: T;\n  description?: string;\n  fn: TransformFn<{ [P in keyof T]: ParamType<T[P]> }>;\n}): Transform<T> => ({\n  name: args.name,\n  params: args.params,\n  description: args.description,\n  fn: args.fn,\n});\n","import seedrandom from 'seedrandom';\nimport { AssertionError } from 'assert';\n\nimport {\n  Color,\n  Coord,\n  Dimensions,\n  ImageData,\n  Image,\n  Random,\n  TransformFn,\n  TransformFnOpts,\n} from './types';\n\n/**\n * Converts a Pixel into a hex string like '#00FF00'\n */\nexport const toHexColor = ([r, g, b]: Color) => {\n  const toHexValue = (c: number) => {\n    const s = c.toString(16).toUpperCase();\n    return s.length === 2 ? s : '0' + s;\n  };\n\n  return `#${toHexValue(r)}${toHexValue(g)}${toHexValue(b)}`;\n};\n\nexport const fromHexColor = (hex: string): Color => [\n  parseInt(hex.toUpperCase().substr(1, 2), 16),\n  parseInt(hex.toUpperCase().substr(3, 2), 16),\n  parseInt(hex.toUpperCase().substr(5, 2), 16),\n  255,\n];\n\nexport const isHexColor = (s: string) => /^#[0-9A-F]{6}$/.test(s);\n\nexport const isTransparent = (pixel: Color) => pixel[3] < 64;\n\nexport const randomColor = (random: seedrandom.prng): Color => [\n  Math.floor(random.int32() * 256),\n  Math.floor(random.int32() * 256),\n  Math.floor(random.int32() * 256),\n  255,\n];\n\nexport const getAveragePixelValue = ([r, g, b]: Color) =>\n  Math.round((r + g + b) / 3);\n\nexport const clampColor = ([r, g, b, a]: Color): Color => {\n  const clamp = (n: number) => Math.max(Math.min(n, 255), 0);\n\n  return [clamp(r), clamp(g), clamp(b), clamp(a)];\n};\n\nexport const getPixelFromSource = (\n  dimensions: Dimensions,\n  image: ImageData,\n  coord: Coord\n): Color => {\n  const [width, height] = dimensions;\n  const [x, y] = coord;\n  if (x < 0 || x >= width || y < 0 || y >= height) {\n    return [0, 0, 0, 0]; // Default to transparent if an invalid coordinate\n  }\n\n  const idx = getImageIndex(dimensions, x, y);\n  return [image[idx], image[idx + 1], image[idx + 2], image[idx + 3]];\n};\n\n/**\n * Asserts that a given value is truthy. Uses TypeScript 3.7 assertion types.\n *\n * @example\n * ```ts\n * const foo: string|undefined = getSomeData();\n * asert(foo, 'foo must be defined');\n * console.log(foo.length); // OK\n * ```\n */\nexport function assert(\n  condition: unknown,\n  message = 'Unexpected falsy value'\n): asserts condition {\n  if (!condition) {\n    throw new AssertionError({ message, actual: condition });\n  }\n}\n\n/********** Mapping Utils ***********/\n// Maps all frames from the original image into new frames.\n// Assumes all mapped frames are the same dimension as the original image.\nexport const mapFrames = (\n  image: Image,\n  cb: (\n    imageData: ImageData,\n    frameIndex: number,\n    frameCount: number\n  ) => ImageData\n): Image => {\n  const frames = image.frames.map((frame, idx) => ({\n    data: cb(frame.data, idx, image.frames.length),\n  }));\n  return {\n    dimensions: image.dimensions,\n    frames,\n  };\n};\n\n/**\n * Maps the coordinates in a given shape into an image\n */\nexport const mapCoords = (\n  dimensions: Dimensions,\n  cb: (coord: Coord) => Color\n): ImageData => {\n  const [width, height] = dimensions;\n  const transformedImageData = new Uint8Array(width * height * 4);\n  for (let y = 0; y < height; y += 1) {\n    for (let x = 0; x < width; x += 1) {\n      const c = clampColor(cb([x, y]));\n      const idx = getImageIndex(dimensions, x, y);\n      transformedImageData[idx] = c[0];\n      transformedImageData[idx + 1] = c[1];\n      transformedImageData[idx + 2] = c[2];\n      transformedImageData[idx + 3] = c[3];\n    }\n  }\n  return transformedImageData;\n};\n\n/**\n * Combines mapFrames and mapCoords into one function.\n * Used for transforming each pixel in an image into another pixel.\n */\nexport const mapImage = <T>(\n  cb: (args: {\n    image: Image;\n    dimensions: Dimensions;\n    random: Random;\n    parameters: T;\n    coord: Coord;\n    frameCount: number;\n    frameIndex: number;\n    getSrcPixel: (coord: Coord) => Color;\n  }) => Color\n): TransformFn<T> => {\n  return ({ image, random, parameters }: TransformFnOpts<T>) =>\n    mapFrames(image, (imageData, frameIndex, frameCount) =>\n      mapCoords(image.dimensions, (coord) =>\n        cb({\n          image,\n          dimensions: image.dimensions,\n          random,\n          parameters,\n          coord,\n          frameCount,\n          frameIndex,\n          getSrcPixel: (c: Coord) =>\n            getPixelFromSource(image.dimensions, imageData, c),\n        })\n      )\n    );\n};\n\n/** Create a new array [0, 1, 2, ...N-1] */\nexport const repeat = (times: number): number[] =>\n  [...new Array(times)].map((_, i) => i);\n\nexport const getImageIndex = ([width]: Dimensions, x: number, y: number) =>\n  (x + y * width) * 4;\n\nexport const writePixel = (args: {\n  image: ImageData;\n  dimensions: Dimensions;\n  coord: Coord;\n  color: Color;\n}): void => {\n  const idx = getImageIndex(args.dimensions, args.coord[0], args.coord[1]);\n  args.image[idx] = args.color[0];\n  args.image[idx + 1] = args.color[1];\n  args.image[idx + 2] = args.color[2];\n  args.image[idx + 3] = args.color[3];\n};\n\nexport const resizeImage = (args: {\n  image: Image;\n  newWidth: number;\n  newHeight: number;\n}): Image => {\n  const { image, newWidth, newHeight } = args;\n  const [width, height] = image.dimensions;\n  const xRatio = width / newWidth;\n  const yRatio = height / newHeight;\n\n  const newDimensions: Dimensions = [newWidth, newHeight];\n\n  const newFrames = image.frames.map((frame) => {\n    const transformedImageData = new Uint8Array(newWidth * newHeight * 4);\n    for (let y = 0; y < newHeight; y += 1) {\n      for (let x = 0; x < newWidth; x += 1) {\n        // Simple nearest-neighbor image scaling.\n        // Arguably the worst of the scaling algorithms, but it's quick,\n        //  and we're generally dealing with small images anyhow.\n        const srcX = Math.floor(x * xRatio);\n        const srcY = Math.floor(y * yRatio);\n\n        const pixel = getPixelFromSource(image.dimensions, frame.data, [\n          srcX,\n          srcY,\n        ]);\n        writePixel({\n          color: pixel,\n          coord: [x, y],\n          dimensions: newDimensions,\n          image: transformedImageData,\n        });\n      }\n    }\n    return {\n      data: transformedImageData,\n    };\n  });\n\n  return {\n    frames: newFrames,\n    dimensions: [newWidth, newHeight],\n  };\n};\n","import { buildTransform, Color } from '../domain/types';\nimport { mapImage, isTransparent } from '../domain/utils';\n\nconst PARTY_COLORS: Color[] = [\n  [255, 141, 139, 255],\n  [254, 214, 137, 255],\n  [136, 255, 137, 255],\n  [135, 255, 255, 255],\n  [139, 181, 254, 255],\n  [215, 140, 255, 255],\n  [255, 140, 255, 255],\n  [255, 104, 247, 255],\n  [254, 108, 183, 255],\n  [255, 105, 104, 255],\n];\n\nexport const backgroundParty = buildTransform({\n  name: 'Background Party',\n  description: 'Transparent pixels will flash bright party colors',\n  params: [],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel }) => {\n    const srcPixel = getSrcPixel(coord);\n\n    // Make the transparent parts colorful\n    if (isTransparent(srcPixel)) {\n      const partyColorIdx = Math.floor(\n        (frameIndex / frameCount) * PARTY_COLORS.length\n      );\n      return PARTY_COLORS[partyColorIdx];\n    }\n\n    return srcPixel;\n  }),\n});\n","import {\n  Tooltip,\n  Icon,\n  FormControl,\n  Select,\n  MenuItem,\n  Stack,\n  Typography,\n} from '@material-ui/core';\nimport React from 'react';\nimport { ParamValue, ParamFunction } from '../domain/types';\n\nconst DropdownParam: React.FC<{\n  name: string;\n  options: readonly { name: string; value: any }[];\n  value?: any;\n  description?: string;\n  onChange: (v: ParamValue<any>) => void;\n}> = ({ name, options, value, description, onChange }) => {\n  return (\n    <Stack spacing={1}>\n      <Stack direction=\"row\" spacing={1}>\n        <Typography variant=\"body2\">{name}</Typography>\n        {description && (\n          <Tooltip title={description}>\n            <Icon fontSize=\"small\">help</Icon>\n          </Tooltip>\n        )}\n      </Stack>\n      <FormControl>\n        <Select\n          autoWidth\n          value={value}\n          onChange={(event) =>\n            onChange({ valid: true, value: event.target.value })\n          }\n        >\n          {options.map((t) => (\n            <MenuItem key={t.value} value={t.value}>\n              {t.name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </Stack>\n  );\n};\n\nexport function dropdownParam<T>(args: {\n  name: string;\n  options: readonly { name: string; value: T }[];\n  description?: string;\n  defaultValue?: T;\n}): ParamFunction<T> {\n  return {\n    name: args.name,\n    defaultValue: args.defaultValue\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n    fn: (params) => {\n      return (\n        <DropdownParam\n          name={args.name}\n          value={params.value.valid ? params.value.value : undefined}\n          options={args.options}\n          description={args.description}\n          onChange={params.onChange}\n        />\n      );\n    },\n  };\n}\n","// @ts-ignore\nimport getPixels from 'get-pixels';\n// @ts-ignore\nimport gifEncoder from 'gif-encoder';\nimport seedrandom from 'seedrandom';\n\nimport { Color, TransformInput, Image, Dimensions, ImageData } from './types';\nimport {\n  toHexColor,\n  getPixelFromSource,\n  randomColor,\n  fromHexColor,\n  isTransparent,\n} from './utils';\n\n// Returns a list of gif data URLs, for each transform\nexport const runTransforms = async (\n  inputDataUrl: string,\n  transformList: TransformInput<any>[],\n  fps: number\n): Promise<string[]> => {\n  const random = seedrandom(inputDataUrl);\n\n  const originalImage = await readImage(inputDataUrl);\n\n  const images: Image[] = [];\n  transformList.reduce((image, transformInput) => {\n    const result = transformInput.transform.fn({\n      image,\n      parameters: transformInput.params,\n      random,\n    });\n    images.push(result);\n    return result;\n  }, originalImage);\n\n  return await Promise.all(\n    images.map(async (newImage) => {\n      const transparentColor = getTransparentColor(newImage, random);\n\n      // Transform any of our transparent pixels to what our gif understands to be transparent\n      const image = encodeTransparency(\n        newImage.frames.map((f) => f.data),\n        transparentColor\n      );\n\n      return await createGif(newImage.dimensions, image, transparentColor, fps);\n    })\n  );\n};\n\n/**\n * Each pixel in our image has an alpha channel, but gifs don't.\n * We transform each pixel that appears transparent to be a designated transparent color.\n */\nconst encodeTransparency = (\n  frames: ImageData[],\n  transparentColor: Color | undefined\n): ImageData[] => {\n  const image = frames.map((frame) => {\n    const img = new Uint8Array(frame.length);\n    for (let i = 0; i < frame.length; i += 4) {\n      if (transparentColor && frame[i + 3] < 128) {\n        // Anything more than halfway transparent is considered transparent\n        img[i] = transparentColor[0];\n        img[i + 1] = transparentColor[1];\n        img[i + 2] = transparentColor[2];\n        img[i + 3] = transparentColor[3];\n      } else {\n        img[i] = frame[i];\n        img[i + 1] = frame[i + 1];\n        img[i + 2] = frame[i + 2];\n        img[i + 3] = 255; // Gifs don't do transparency, I dunno why they take in an alpha value...\n      }\n    }\n    return img;\n  });\n\n  return image;\n};\n\nconst createGif = async (\n  dimensions: Dimensions,\n  frames: ImageData[],\n  transparentColor: Color | undefined,\n  fps: number\n): Promise<string> =>\n  new Promise<string>((resolve) => {\n    const [width, height] = dimensions;\n    const gif = new gifEncoder(width, height);\n\n    gif.setFrameRate(fps);\n    gif.setRepeat(0); // Loop indefinitely\n    if (transparentColor) {\n      // Need to convert '#RRGGBB' to '0xRRGGBB'\n      const hexColor = toHexColor(transparentColor).slice(1);\n      gif.setTransparent(`0x${hexColor}`);\n    }\n\n    // gif.setQuality(10);\n    gif.writeHeader();\n\n    let data: any[] = [];\n    gif.on('data', (chunk: any) => {\n      data.push(chunk);\n    });\n    gif.on('end', () => {\n      const dataUrl = URL.createObjectURL(\n        new Blob(data, { type: 'image/gif' })\n      );\n      resolve(dataUrl);\n    });\n\n    frames.forEach((f) => {\n      gif.addFrame(f);\n    });\n\n    gif.finish();\n  });\n\nexport const readImage = (dataUrl: string): Promise<Image> =>\n  new Promise<Image>((res, rej) =>\n    getPixels(\n      dataUrl,\n      (err: Error, getPixelResults: { shape: Dimensions; data: ImageData }) => {\n        if (err) {\n          return rej(err);\n        } else {\n          return res({\n            frames: [\n              {\n                data: Uint8Array.from(getPixelResults.data),\n              },\n            ],\n            dimensions: [getPixelResults.shape[0], getPixelResults.shape[1]],\n          });\n        }\n      }\n    )\n  );\n\nconst getTransparentColor = (\n  image: Image,\n  random: seedrandom.prng\n): Color | undefined => {\n  let hasTransparent = false;\n  const seenPixels = new Set<string>();\n  const [width, height] = image.dimensions;\n  let attempt = toHexColor([0, 255, 0, 255]); // Just start with green for now, since it's a likely candidate\n  image.frames.forEach((frame) => {\n    for (let y = 0; y < height; y += 1) {\n      for (let x = 0; x < width; x += 1) {\n        const px = getPixelFromSource(image.dimensions, frame.data, [x, y]);\n        if (isTransparent(px)) {\n          hasTransparent = true;\n        } else {\n          const hex = toHexColor(px);\n          seenPixels.add(hex);\n          if (hex === attempt) {\n            // Uh oh, can't use our current pick for transparent because it exists in the image already\n            attempt = findRandomColorNotInSet(random, seenPixels);\n          }\n        }\n      }\n    }\n  });\n  return hasTransparent ? fromHexColor(attempt) : undefined;\n};\n\nconst findRandomColorNotInSet = (\n  random: seedrandom.prng,\n  set: Set<string>,\n  attempts = 0\n): string => {\n  const col = toHexColor(randomColor(random));\n  if (attempts > 2000) {\n    // Just give up in order to prevent a stack overflow or something...\n    return col;\n  }\n  return set.has(col)\n    ? findRandomColorNotInSet(random, set, attempts + 1)\n    : col;\n};\n","import { Button, Icon, Stack } from '@material-ui/core';\nimport React from 'react';\n\ninterface ImagePickerProps {\n  currentImageUrl?: string;\n  name?: string;\n  width?: number;\n  height?: number;\n  onChange: (imageUrl: string) => void;\n}\n\nexport const ImagePicker: React.FC<ImagePickerProps> = ({\n  currentImageUrl,\n  name,\n  width,\n  height,\n  onChange,\n}) => (\n  <Stack maxWidth={300}>\n    <Button\n      startIcon={<Icon>image</Icon>}\n      variant=\"contained\"\n      component=\"label\"\n    >\n      {name}\n      <input\n        type=\"file\"\n        hidden\n        accept=\"image/png,image/jpg\"\n        name=\"source-png\"\n        onChange={async (event) => {\n          const files = Array.from(event.target.files ?? []);\n          const file = files[0];\n          const baseImage = await readFile(file);\n          onChange(baseImage);\n        }}\n      />\n    </Button>\n    {currentImageUrl && (\n      <img\n        width={width}\n        height={height}\n        src={currentImageUrl}\n        alt=\"Source\"\n      ></img>\n    )}\n  </Stack>\n);\n\nconst readFile = (file: File) =>\n  new Promise<string>((resolve) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result as string);\n    reader.readAsDataURL(file);\n  });\n","import { dropdownParam } from '../params/dropdownParam';\nimport { imagePickerParam } from '../params/imagePickerParam';\nimport { buildTransform } from '../domain/types';\nimport {\n  isTransparent,\n  getPixelFromSource,\n  mapFrames,\n  mapCoords,\n  resizeImage,\n} from '../domain/utils';\n\nexport const backgroundImage = buildTransform({\n  name: 'Background Image',\n  description: 'Select another image to be used as a background or foreground',\n  params: [\n    imagePickerParam({\n      name: 'Image',\n    }),\n    dropdownParam({\n      name: 'Type',\n      defaultValue: 'background',\n      options: [\n        {\n          name: 'Background',\n          value: 'background',\n        },\n        {\n          name: 'Foreground',\n          value: 'foreground',\n        },\n      ] as const,\n    }),\n  ] as const,\n  fn: ({ image, parameters }) => {\n    const otherImage = resizeImage({\n      image: parameters[0].image,\n      newWidth: image.dimensions[0],\n      newHeight: image.dimensions[1],\n    });\n    const type = parameters[1];\n\n    return mapFrames(image, (data) => {\n      return mapCoords(image.dimensions, (coord) => {\n        const src = getPixelFromSource(image.dimensions, data, coord);\n        const otherImageSrc = getPixelFromSource(\n          otherImage.dimensions,\n          otherImage.frames[0].data,\n          coord\n        );\n\n        if (type === 'background') {\n          // Only print the other image if the src image is transparent here\n          return isTransparent(src) ? otherImageSrc : src;\n        } else {\n          return isTransparent(otherImageSrc) ? src : otherImageSrc;\n        }\n      });\n    });\n  },\n});\n","import {\n  FormControl,\n  Icon,\n  Stack,\n  TextField,\n  Tooltip,\n  Typography,\n} from '@material-ui/core';\nimport React from 'react';\nimport { ParamFunction, ParamValue } from '../domain/types';\n\nconst TextParam: React.FC<{\n  name: string;\n  value?: string;\n  description?: string;\n  onChange: (v: ParamValue<string>) => void;\n}> = ({ name, value, description, onChange }) => {\n  const [val, setVal] = React.useState(value);\n\n  return (\n    <Stack spacing={1}>\n      <Stack direction=\"row\" spacing={1}>\n        <Typography variant=\"body2\">{name}</Typography>\n        {description && (\n          <Tooltip title={description}>\n            <Icon fontSize=\"small\">help</Icon>\n          </Tooltip>\n        )}\n      </Stack>\n      <FormControl>\n        <TextField\n          defaultValue={value}\n          onChange={(e) => setVal(e.target.value)}\n          onBlur={() =>\n            onChange(val ? { valid: true, value: val } : { valid: false })\n          }\n        />\n      </FormControl>\n    </Stack>\n  );\n};\n\nexport const textParam = (args: {\n  name: string;\n  description?: string;\n  defaultValue?: string;\n}): ParamFunction<string> => ({\n  name: args.name,\n  defaultValue:\n    args.defaultValue !== undefined\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n  fn: (params) => (\n    <TextParam\n      name={args.name}\n      description={args.description}\n      onChange={params.onChange}\n      value={params.value.valid ? params.value.value : undefined}\n    />\n  ),\n});\n","import React from 'react';\nimport { FormControl } from '@material-ui/core';\n\nimport { readImage } from '../domain/run';\nimport { ParamFunction, Image } from '../domain/types';\nimport { ImagePicker } from '../components/ImagePicker';\n\ninterface ImagePickerParamsProps {\n  name: string;\n}\n\nexport function imagePickerParam({\n  name,\n}: ImagePickerParamsProps): ParamFunction<{ dataUrl: string; image: Image }> {\n  return {\n    name,\n    defaultValue: { valid: false },\n    fn: (params) => (\n      <FormControl>\n        <ImagePicker\n          currentImageUrl={\n            params.value.valid ? params.value.value.dataUrl : undefined\n          }\n          name={name}\n          width={64}\n          height={64}\n          onChange={async (dataUrl) => {\n            const image = await readImage(dataUrl);\n            params.onChange({ valid: true, value: { dataUrl, image } });\n          }}\n        />\n      </FormControl>\n    ),\n  };\n}\n","import {\n  FormControl,\n  FormHelperText,\n  Icon,\n  Stack,\n  TextField,\n  Tooltip,\n  Typography,\n} from '@material-ui/core';\nimport React from 'react';\nimport { ParamValue, ParamFunction } from '../domain/types';\n\ntype ParsedParam<T> =\n  | { valid: true; value: T }\n  | { valid: false; reason: string };\n\nconst FloatParam: React.FC<{\n  name: string;\n  value?: number;\n  description?: string;\n  parse: (s: string) => ParsedParam<number>;\n  onChange: (v: ParamValue<number>) => void;\n}> = ({ name, value, description, parse, onChange }) => {\n  const [val, setVal] = React.useState(\n    value === undefined ? undefined : value.toString()\n  );\n  const [invalidText, setInvalidText] = React.useState('');\n\n  const onBlur = () => {\n    if (val === undefined) {\n      // Only if no default value provided and no changes have happened\n      return;\n    }\n\n    if (value && val === value.toString()) {\n      return; // Don't fire an onChange event if things haven't changed\n    }\n    const n = parse(val);\n    if (n.valid) {\n      setInvalidText('');\n    } else {\n      setInvalidText(n.reason);\n    }\n    onChange(n);\n  };\n\n  return (\n    <Stack spacing={1}>\n      <Stack direction=\"row\" spacing={1}>\n        <Typography variant=\"body2\">{name}</Typography>\n        {description && (\n          <Tooltip title={description}>\n            <Icon fontSize=\"small\">help</Icon>\n          </Tooltip>\n        )}\n      </Stack>\n      <FormControl>\n        <TextField\n          error={!!invalidText}\n          defaultValue={value}\n          onBlur={onBlur}\n          onChange={(e) => {\n            setVal(e.target.value);\n          }}\n        />\n        {invalidText && <FormHelperText>{invalidText}</FormHelperText>}\n      </FormControl>\n    </Stack>\n  );\n};\n\nexport const floatParam = (args: {\n  name: string;\n  defaultValue?: number;\n  min?: number;\n  max?: number;\n  description?: string;\n}): ParamFunction<number> => ({\n  name: args.name,\n  defaultValue:\n    args.defaultValue !== undefined\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n  fn: (params) => {\n    const { min, max } = args;\n    const parse = (s: string): ParsedParam<number> => {\n      const n = parseFloat(s);\n      if (isNaN(n)) {\n        return { valid: false, reason: 'Must be a number' };\n      }\n      if (min !== undefined && n < min) {\n        return {\n          valid: false,\n          reason: `Must be greater than or equal to ${min}`,\n        };\n      }\n      if (max !== undefined && n > max) {\n        return { valid: false, reason: `Must be less than or equal to ${max}` };\n      }\n      return { valid: true, value: n };\n    };\n\n    return (\n      <FloatParam\n        name={args.name}\n        description={args.description}\n        parse={parse}\n        onChange={params.onChange}\n        value={params.value.valid ? params.value.value : undefined}\n      />\n    );\n  },\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage } from '../domain/utils';\nimport { floatParam } from '../params/floatParam';\n\nexport const bounce = buildTransform({\n  name: 'Bounce',\n  description: 'Make the image bounce up and down',\n  params: [\n    floatParam({\n      name: 'Bounce Speed',\n      defaultValue: 5,\n      min: 0,\n    }),\n  ],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel, parameters }) => {\n    const [x, y] = coord;\n    const yOffset =\n      y +\n      Math.round(\n        parameters[0] * Math.sin((frameIndex / frameCount) * 2 * Math.PI)\n      );\n\n    return getSrcPixel([x, yOffset]);\n  }),\n});\n","import {\n  FormControl,\n  FormHelperText,\n  Icon,\n  Stack,\n  TextField,\n  Tooltip,\n  Typography,\n} from '@material-ui/core';\nimport React from 'react';\nimport { ParamValue, ParamFunction } from '../domain/types';\n\ntype ParsedParam<T> =\n  | { valid: true; value: T }\n  | { valid: false; reason: string };\n\nconst IntParam: React.FC<{\n  name: string;\n  value?: number;\n  description?: string;\n  parse: (s: string) => ParsedParam<number>;\n  onChange: (v: ParamValue<number>) => void;\n}> = ({ name, value, description, parse, onChange }) => {\n  const [val, setVal] = React.useState(\n    value === undefined ? undefined : value.toString()\n  );\n  const [invalidText, setInvalidText] = React.useState('');\n\n  const onBlur = () => {\n    if (val === undefined) {\n      // Only if no default value provided and no changes have happened\n      return;\n    }\n\n    if (value && val === value.toString()) {\n      return; // Don't fire an onChange event if things haven't changed\n    }\n    const n = parse(val);\n    if (n.valid) {\n      setInvalidText('');\n    } else {\n      setInvalidText(n.reason);\n    }\n    onChange(n);\n  };\n\n  return (\n    <Stack spacing={1}>\n      <Stack direction=\"row\" spacing={1}>\n        <Typography variant=\"body2\">{name}</Typography>\n        {description && (\n          <Tooltip title={description}>\n            <Icon fontSize=\"small\">help</Icon>\n          </Tooltip>\n        )}\n      </Stack>\n      <FormControl>\n        <TextField\n          error={!!invalidText}\n          defaultValue={value}\n          onBlur={onBlur}\n          onChange={(e) => {\n            setVal(e.target.value);\n          }}\n        />\n        {invalidText && <FormHelperText>{invalidText}</FormHelperText>}\n      </FormControl>\n    </Stack>\n  );\n};\n\nexport const intParam = (args: {\n  name: string;\n  defaultValue?: number;\n  min?: number;\n  max?: number;\n  description?: string;\n}): ParamFunction<number> => ({\n  name: args.name,\n  defaultValue:\n    args.defaultValue !== undefined\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n  fn: (params) => {\n    const { min, max } = args;\n    const parse = (s: string): ParsedParam<number> => {\n      const n = parseInt(s, 10);\n      if (isNaN(n)) {\n        return { valid: false, reason: 'Must be an integer' };\n      }\n      if (min !== undefined && n < min) {\n        return {\n          valid: false,\n          reason: `Must be greater than or equal to ${min}`,\n        };\n      }\n      if (max !== undefined && n > max) {\n        return { valid: false, reason: `Must be less than or equal to ${max}` };\n      }\n      return { valid: true, value: n };\n    };\n\n    return (\n      <IntParam\n        name={args.name}\n        description={args.description}\n        parse={parse}\n        onChange={params.onChange}\n        value={params.value.valid ? params.value.value : undefined}\n      />\n    );\n  },\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage, clampColor } from '../domain/utils';\nimport { intParam } from '../params/intParam';\n\nexport const brightness = buildTransform({\n  name: 'Brightness',\n  description: 'Increase or decrease the brightness of the image',\n  params: [\n    intParam({\n      name: 'Amount',\n      defaultValue: 0,\n      min: -100,\n      max: 100,\n    }),\n  ],\n  fn: mapImage(({ coord, getSrcPixel, parameters }) => {\n    const [amount] = parameters;\n    const rawAmount = (amount / 100) * 255;\n    const p = getSrcPixel(coord);\n    return clampColor([\n      p[0] + rawAmount,\n      p[1] + rawAmount,\n      p[2] + rawAmount,\n      p[3],\n    ]);\n  }),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage } from '../domain/utils';\nimport { floatParam } from '../params/floatParam';\n\nexport const circle = buildTransform({\n  name: 'Circle',\n  params: [\n    floatParam({\n      name: 'Radius',\n      defaultValue: 10,\n      min: 0,\n    }),\n  ],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel, parameters }) => {\n    const [radius] = parameters;\n    const [x, y] = coord;\n    const xOffset = Math.round(\n      radius * Math.sin(-2 * Math.PI * (frameIndex / frameCount))\n    );\n    const yOffset = Math.round(\n      radius * Math.cos(-2 * Math.PI * (frameIndex / frameCount))\n    );\n    return getSrcPixel([x + xOffset, y + yOffset]);\n  }),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage } from '../domain/utils';\nimport { floatParam } from '../params/floatParam';\n\nexport const expand = buildTransform({\n  name: 'Expand',\n  params: [\n    floatParam({\n      name: 'Radius',\n      defaultValue: 10,\n      min: 0,\n    }),\n  ],\n  fn: mapImage(\n    ({\n      dimensions,\n      coord,\n      frameCount,\n      frameIndex,\n      getSrcPixel,\n      parameters,\n    }) => {\n      const idx = frameIndex / frameCount;\n      const dist = Math.cos(idx * 2 * Math.PI) * parameters[0];\n\n      // Kind of follows the same algorithm as resize, except the amount is dynamic\n      const [width, height] = dimensions;\n      const centerX = width / 2;\n      const centerY = height / 2;\n\n      const [x, y] = coord;\n      const xRatio = (x - centerX) / width;\n      const yRatio = (y - centerY) / height;\n\n      const xOffset = Math.floor(dist * xRatio);\n      const yOffset = Math.round(dist * yRatio);\n      return getSrcPixel([x - xOffset, y - yOffset]);\n    }\n  ),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage } from '../domain/utils';\nimport { floatParam } from '../params/floatParam';\n\n// Probably still needs work -- the inner pixels get all funky still\nexport const fisheye = buildTransform({\n  name: 'Fisheye',\n  params: [floatParam({ name: 'radius', defaultValue: 10, min: 0 })],\n  fn: mapImage(\n    ({\n      dimensions,\n      coord,\n      frameCount,\n      frameIndex,\n      getSrcPixel,\n      parameters,\n    }) => {\n      const idx = frameIndex / frameCount;\n      const expanding = idx < 0.5;\n      const [width, height] = dimensions;\n      const dist = (expanding ? idx : 1 - idx) * parameters[0];\n      const centerX = width / 2;\n      const centerY = height / 2;\n\n      const [x, y] = coord;\n      const angle = Math.atan2(centerY - y, centerX - x);\n\n      const xOffset = Math.round(dist * Math.cos(angle));\n      const yOffset = Math.round(dist * Math.sin(angle));\n      return getSrcPixel([x + xOffset, y + yOffset]);\n    }\n  ),\n});\n","import { Frame, buildTransform } from '../domain/types';\nimport { repeat } from '../domain/utils';\nimport { intParam } from '../params/intParam';\n\nexport const frameCount = buildTransform({\n  name: 'Frame Count',\n  description:\n    'Set how many frames of animation there will be. This is required for all animation transforms',\n  params: [\n    intParam({\n      name: 'Number of Frames',\n      defaultValue: 10,\n      min: 1,\n    }),\n  ],\n  fn: ({ image, parameters }) => {\n    const [frameCount] = parameters;\n\n    const currentFrames = image.frames;\n\n    // Resulting image will contain frameCount frames.\n    // If the original image had less than that, then we'll copy the last frame until we have enough.\n    // If the original has more frames, then we'll discard the last ones.\n    const frames = repeat(frameCount).map(\n      (i): Frame => ({\n        data: currentFrames[i]\n          ? currentFrames[i].data\n          : currentFrames[currentFrames.length - 1].data,\n      })\n    );\n\n    return {\n      dimensions: image.dimensions,\n      frames,\n    };\n  },\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage, isTransparent, getAveragePixelValue } from '../domain/utils';\n\nexport const grayscale = buildTransform({\n  name: 'Grayscale',\n  params: [],\n  fn: mapImage(({ coord, getSrcPixel }) => {\n    const srcPixel = getSrcPixel(coord);\n\n    if (isTransparent(srcPixel)) {\n      return [0, 0, 0, 0];\n    }\n\n    const gray = getAveragePixelValue(srcPixel);\n\n    return [gray, gray, gray, 255];\n  }),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage } from '../domain/utils';\nimport * as convert from 'color-convert';\n\nexport const hueParty = buildTransform({\n  name: 'Hue Party',\n  description: 'Shift the hue by some amount',\n  params: [],\n  fn: mapImage(({ coord, getSrcPixel, frameCount, frameIndex }) => {\n    const rawAmount = (frameIndex / frameCount) * 255;\n    const [r, g, b, a] = getSrcPixel(coord);\n    const [h, s, l] = convert.rgb.hsl(r, g, b);\n    const newH = (h + rawAmount) % 255;\n    const [newR, newG, newB] = convert.hsl.rgb([newH, s, l]);\n    return [newR, newG, newB, a];\n  }),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage } from '../domain/utils';\nimport { intParam } from '../params/intParam';\nimport * as convert from 'color-convert';\n\nexport const hueShift = buildTransform({\n  name: 'Hue Shift',\n  description: 'Shift the hue by some amount',\n  params: [\n    intParam({\n      name: 'Amount',\n      defaultValue: 0,\n      min: 0,\n      max: 100,\n    }),\n  ],\n  fn: mapImage(({ coord, getSrcPixel, parameters }) => {\n    const [amount] = parameters;\n    const rawAmount = (amount / 100) * 255;\n    const [r, g, b, a] = getSrcPixel(coord);\n    const [h, s, l] = convert.rgb.hsl(r, g, b);\n    const newH = (h + rawAmount) % 255;\n    const [newR, newG, newB] = convert.hsl.rgb([newH, s, l]);\n    return [newR, newG, newB, a];\n  }),\n});\n","import { buildTransform } from '../domain/types';\nimport seedrandom from 'seedrandom';\n\nimport { Color } from '../domain/types';\nimport {\n  mapFrames,\n  mapCoords,\n  getPixelFromSource,\n  isTransparent,\n} from '../domain/utils';\nimport { textParam } from '../params/textParam';\n\nconst lightningIntensities: Color[] = [\n  [0, 15, 40, 255], // dark color\n  [150, 150, 175, 255],\n  [180, 180, 205, 255],\n  [210, 210, 235, 255],\n];\n\nexport const lightning = buildTransform({\n  name: 'Lightning',\n  params: [\n    textParam({\n      name: 'Random Seed',\n      defaultValue: 'lightning',\n    }),\n  ],\n  fn: ({ image, parameters }) => {\n    const random = seedrandom(parameters[0]);\n    return mapFrames(image, (data) => {\n      const i = random();\n      const flashIntensity = i < 0.9 ? 0 : i < 0.95 ? 1 : i < 0.98 ? 2 : 3;\n\n      return mapCoords(image.dimensions, (coord) => {\n        const src = getPixelFromSource(image.dimensions, data, coord);\n\n        if (isTransparent(src)) {\n          return lightningIntensities[flashIntensity];\n        }\n\n        if (flashIntensity > 0) {\n          // We're flashing, so brighten up the image a little\n          const icf = 1.02 * flashIntensity;\n          return [src[0] * icf, src[1] * icf, src[2] * icf, src[3]];\n        }\n\n        // No lightning\n        return src;\n      });\n    });\n  },\n});\n","import { buildTransform, Color } from '../domain/types';\nimport { isTransparent, getAveragePixelValue, mapImage } from '../domain/utils';\n\nconst PARTY_COLORS: Color[] = [\n  [255, 141, 139, 255],\n  [254, 214, 137, 255],\n  [136, 255, 137, 255],\n  [135, 255, 255, 255],\n  [139, 181, 254, 255],\n  [215, 140, 255, 255],\n  [255, 140, 255, 255],\n  [255, 104, 247, 255],\n  [254, 108, 183, 255],\n  [255, 105, 104, 255],\n];\n\nexport const party = buildTransform({\n  name: 'Party',\n  params: [],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel }) => {\n    const srcPixel = getSrcPixel(coord);\n\n    if (isTransparent(srcPixel)) {\n      return [0, 0, 0, 0];\n    }\n\n    const partyColorIdx = Math.floor(\n      (frameIndex / frameCount) * PARTY_COLORS.length\n    );\n    const partyColor = PARTY_COLORS[partyColorIdx];\n\n    const gray = getAveragePixelValue(srcPixel);\n\n    return [\n      (gray * partyColor[0]) / 255,\n      (gray * partyColor[1]) / 255,\n      (gray * partyColor[2]) / 255,\n      255,\n    ];\n  }),\n});\n","import React from 'react';\nimport {\n  Collapse,\n  Icon,\n  Box,\n  Button,\n  ClickAwayListener,\n  Stack,\n} from '@material-ui/core';\n\ninterface ExpandableProps {\n  mainEle: JSX.Element;\n}\n\nexport const Expandable: React.FC<ExpandableProps> = ({\n  mainEle,\n  children,\n}) => {\n  const [collapsed, setCollapsed] = React.useState(true);\n\n  return (\n    <ClickAwayListener onClickAway={() => setCollapsed(true)}>\n      <Box>\n        <Button\n          onClick={() => setCollapsed(!collapsed)}\n          style={{ textTransform: 'none' }}\n        >\n          <Stack direction=\"row\" spacing={4}>\n            <div>{mainEle}</div>\n            <Icon>{collapsed ? 'expand_less' : 'expand_more'}</Icon>\n          </Stack>\n        </Button>\n        <Collapse in={!collapsed}>{children}</Collapse>\n      </Box>\n    </ClickAwayListener>\n  );\n};\n","import { Icon, Stack, Tooltip } from '@material-ui/core';\nimport React from 'react';\nimport { SketchPicker } from 'react-color';\nimport { Expandable } from '../components/Expandable';\n\nimport { ParamValue, ParamFunction, Color } from '../domain/types';\nimport { fromHexColor, toHexColor } from '../domain/utils';\n\nconst ColorBox: React.FC<{ color: Color }> = ({ color }) => (\n  <div\n    style={{\n      width: '1.5em',\n      height: '1.5em',\n      backgroundColor: toHexColor(color),\n    }}\n  />\n);\n\nconst ColorPickerParam: React.FC<{\n  name: string;\n  value?: Color;\n  description?: string;\n  onChange: (v: ParamValue<Color>) => void;\n}> = ({ name, value, description, onChange }) => {\n  return (\n    <Expandable\n      mainEle={\n        <Stack direction=\"row\" spacing={4}>\n          <div>{name}</div>\n          {description && (\n            <Tooltip title={description}>\n              <Icon>help</Icon>\n            </Tooltip>\n          )}\n          {value && <ColorBox color={value} />}\n        </Stack>\n      }\n    >\n      <SketchPicker\n        disableAlpha={true}\n        presetColors={[]}\n        color={value ? toHexColor(value) : undefined}\n        onChangeComplete={(c) =>\n          onChange({ valid: true, value: fromHexColor(c.hex) })\n        }\n      />\n    </Expandable>\n  );\n};\n\nexport function colorPickerParam(args: {\n  name: string;\n  defaultValue?: Color;\n  description?: string;\n}): ParamFunction<Color> {\n  return {\n    name: args.name,\n    defaultValue: args.defaultValue\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n    fn: (params) => {\n      return (\n        <ColorPickerParam\n          name={args.name}\n          value={params.value.valid ? params.value.value : undefined}\n          onChange={params.onChange}\n        />\n      );\n    },\n  };\n}\n","import {\n  Tooltip,\n  Icon,\n  IconButton,\n  Button,\n  Paper,\n  Typography,\n  Stack,\n} from '@material-ui/core';\nimport React from 'react';\nimport { ParamValue, ParamFunction } from '../domain/types';\n\ninterface VariableLengthProps<T> {\n  name: string;\n  newParamText: string;\n  createNewParam: () => ParamFunction<T>;\n  value?: T[];\n  description?: string;\n  onChange: (v: ParamValue<T>) => void;\n}\n\nconst VariableLengthParam: React.FC<VariableLengthProps<any>> = ({\n  name,\n  newParamText,\n  createNewParam,\n  value,\n  description,\n  onChange,\n}) => {\n  const [params, setParams] = React.useState<\n    { param: ParamFunction<any>; pValue: any }[]\n  >(\n    value === undefined\n      ? []\n      : value.map((v, idx) => ({ param: createNewParam(), pValue: v }))\n  );\n  return (\n    <Paper>\n      <Stack>\n        <Stack direction=\"row\" spacing={4}>\n          <Typography variant=\"h5\" component=\"div\">\n            {name}\n          </Typography>\n          {description && (\n            <Tooltip title={description}>\n              <Icon>help</Icon>\n            </Tooltip>\n          )}\n        </Stack>\n        {params.map(({ param, pValue }, idx) => {\n          const ele = param.fn({\n            value: { valid: true, value: pValue },\n            onChange: (newValue) => {\n              if (newValue.valid) {\n                const p = params.map((oldP, i) => {\n                  if (idx === i) {\n                    return {\n                      param,\n                      pValue: newValue.value,\n                    };\n                  }\n                  return oldP;\n                });\n                setParams(p);\n                onChange({\n                  valid: true,\n                  value: p.map((n) => n.pValue),\n                });\n              }\n            },\n          });\n\n          return (\n            <Stack direction=\"row\" key={`${name}-${idx}`}>\n              <IconButton\n                onClick={() => {\n                  const newParams = params.filter((x, i) => i !== idx);\n                  setParams(newParams);\n                  onChange({\n                    valid: true,\n                    value: newParams.map((n) => n.pValue),\n                  });\n                }}\n              >\n                <Icon>delete</Icon>\n              </IconButton>\n              {ele}\n            </Stack>\n          );\n        })}\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            const p = createNewParam();\n            const newParams = [\n              ...params,\n              {\n                param: p,\n                pValue: p.defaultValue.valid ? p.defaultValue.value : undefined,\n              },\n            ];\n            setParams(newParams);\n            if (p.defaultValue.valid) {\n              onChange({\n                valid: true,\n                value: newParams.map((n) => n.pValue),\n              });\n            }\n          }}\n        >\n          {newParamText}\n        </Button>\n      </Stack>\n    </Paper>\n  );\n};\n\nexport function variableLengthParam<T>(args: {\n  name: string;\n  newParamText: string;\n  createNewParam: () => ParamFunction<T>;\n  description?: string;\n  defaultValue?: T[];\n}): ParamFunction<T[]> {\n  return {\n    name: args.name,\n    defaultValue: args.defaultValue\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n    fn: (params) => {\n      return (\n        <VariableLengthParam\n          name={args.name}\n          newParamText={args.newParamText}\n          value={params.value.valid ? params.value.value : undefined}\n          createNewParam={args.createNewParam}\n          description={args.description}\n          onChange={params.onChange}\n        />\n      );\n    },\n  };\n}\n","import { buildTransform } from '../domain/types';\nimport { mapImage, isTransparent, fromHexColor } from '../domain/utils';\nimport { colorPickerParam } from '../params/colorPickerParam';\nimport { intParam } from '../params/intParam';\nimport { variableLengthParam } from '../params/variableLengthParam';\n\nconst DEFAULT_COLORS = [\n  '#FF0000',\n  '#FF9600',\n  '#FFFF00',\n  '#00FF00',\n  '#00FF96',\n  '#00FFFF',\n  '#0000FF',\n  '#B400FF',\n].map(fromHexColor);\n\nexport const pinwheel = buildTransform({\n  name: 'Pinwheel',\n  description: 'Create a pinwheel of colors',\n  params: [\n    intParam({\n      name: 'Offset X',\n      defaultValue: 0,\n    }),\n    intParam({\n      name: 'Offset Y',\n      defaultValue: 40,\n    }),\n    intParam({\n      name: 'Group Count',\n      defaultValue: 1,\n      min: 1,\n    }),\n    variableLengthParam({\n      name: 'Colors',\n      newParamText: 'New Color',\n      description: 'Colors for the pinwheel',\n      defaultValue: DEFAULT_COLORS,\n      createNewParam: () =>\n        colorPickerParam({\n          name: 'Color',\n        }),\n    }),\n  ] as const,\n  fn: mapImage(\n    ({\n      coord,\n      dimensions,\n      frameCount,\n      frameIndex,\n      getSrcPixel,\n      parameters,\n    }) => {\n      const srcPixel = getSrcPixel(coord);\n\n      const [offsetX, offsetY, groupCount, colors] = parameters;\n\n      const ribbonCount = colors.length * groupCount;\n      const ribbonArcDegrees = Math.round(360 / ribbonCount);\n      // Need to make sure ribbonCount is always a multiple of the number of images, otherwise we\n      //  won't get a smooth transition.\n      // We'll cut off colors from the end of the list until we get an even multiple.\n      let colorsLength = colors.length;\n      while ((ribbonCount / colorsLength).toFixed(2).slice(-2) !== '00') {\n        colorsLength -= 1;\n      }\n\n      // Make the transparent parts colorful\n      if (isTransparent(srcPixel)) {\n        const centerX = dimensions[0] / 2 + offsetX;\n        const centerY = dimensions[1] / 2 + offsetY;\n        const [x, y] = coord;\n        const xRelCenter = x - centerX;\n        const yRelCenter = y - centerY;\n\n        const pointAngle =\n          (360 + (Math.atan2(yRelCenter, xRelCenter) * 180) / Math.PI) % 360;\n\n        const colorIdx =\n          Math.floor(pointAngle / ribbonArcDegrees) % colorsLength;\n\n        // Increment colorIdx based on current frame progress\n        const frameProgress = frameIndex / frameCount;\n        const idx =\n          (Math.floor(frameProgress * colorsLength) + colorIdx) % colorsLength;\n        return colors[idx];\n      }\n\n      return srcPixel;\n    }\n  ),\n});\n","import { buildTransform } from '../domain/types';\nimport {\n  isTransparent,\n  repeat,\n  fromHexColor,\n  mapFrames,\n  mapCoords,\n  getPixelFromSource,\n} from '../domain/utils';\nimport { colorPickerParam } from '../params/colorPickerParam';\nimport { intParam } from '../params/intParam';\nimport { variableLengthParam } from '../params/variableLengthParam';\n\nconst DEFAULT_COLORS = [\n  '#FF0000',\n  '#FF9600',\n  '#FFFF00',\n  '#00FF00',\n  '#00FF96',\n  '#00FFFF',\n  '#0000FF',\n  '#B400FF',\n].map(fromHexColor);\n\nexport const radiance = buildTransform({\n  name: 'Radiance',\n  params: [\n    intParam({\n      name: 'Group Count',\n      defaultValue: 1,\n      min: 1,\n    }),\n    variableLengthParam({\n      name: 'Colors',\n      newParamText: 'New Color',\n      description: 'Colors radiating outwards',\n      defaultValue: DEFAULT_COLORS,\n      createNewParam: () =>\n        colorPickerParam({\n          name: 'Color',\n        }),\n    }),\n  ] as const,\n  fn: ({ image, parameters }) => {\n    const [groupCount, colors] = parameters;\n    const colorList = repeat(groupCount).flatMap(() => colors);\n    const [width, height] = image.dimensions;\n    const centerX = width / 2;\n    const centerY = height / 2;\n\n    return mapFrames(image, (imageData, frameIndex, frameCount) =>\n      mapCoords(image.dimensions, (coord) => {\n        const srcPixel = getPixelFromSource(image.dimensions, imageData, coord);\n\n        // Make the transparent parts colorful\n        if (isTransparent(srcPixel)) {\n          const [x, y] = coord;\n          const xRelCenter = x - centerX;\n          const yRelCenter = y - centerY;\n\n          const maxDist = Math.sqrt(\n            (width / 2) * (width / 2) + (height / 2) * (height / 2)\n          );\n          const distFromCenter = Math.sqrt(\n            yRelCenter * yRelCenter + xRelCenter * xRelCenter\n          );\n\n          const colorIdx =\n            Math.floor((1 - distFromCenter / maxDist) * colorList.length) %\n            colorList.length;\n\n          // Increment colorIdx based on current frame progress\n          const frameProgress = frameIndex / frameCount;\n          const idx =\n            (Math.floor(frameProgress * colorList.length) + colorIdx) %\n            colorList.length;\n          return colorList[idx];\n        }\n\n        return srcPixel;\n      })\n    );\n  },\n});\n","import { backgroundParty } from './background-party';\nimport { backgroundImage } from './background-image';\nimport { bounce } from './bounce';\nimport { brightness } from './brightness';\nimport { circle } from './circle';\nimport { expand } from './expand';\nimport { fisheye } from './fisheye';\nimport { frameCount } from './frame-count';\nimport { grayscale } from './grayscale';\nimport { hueParty } from './hue-party';\nimport { hueShift } from './hue-shift';\nimport { lightning } from './lightning';\nimport { party } from './party';\nimport { pinwheel } from './pinwheel';\nimport { radiance } from './radiance';\nimport { resize } from './resize';\nimport { resizeBackground } from './resize-background';\nimport { ripple } from './ripple';\nimport { rotate } from './rotate';\nimport { roxbury } from './roxbury';\nimport { shake } from './shake';\nimport { solidBackground } from './solid-background';\nimport { staticc } from './static';\nimport { transparency } from './transparency';\nimport { transpose } from './transpose';\n\nimport { assert } from '../domain/utils';\n\nexport const POSSIBLE_TRANSFORMS = [\n  backgroundImage,\n  backgroundParty,\n  bounce,\n  brightness,\n  circle,\n  expand,\n  fisheye,\n  frameCount,\n  grayscale,\n  hueParty,\n  hueShift,\n  lightning,\n  party,\n  pinwheel,\n  radiance,\n  resize,\n  resizeBackground,\n  ripple,\n  rotate,\n  roxbury,\n  shake,\n  solidBackground,\n  staticc,\n  transparency,\n  transpose,\n];\n\nexport const transformByName = (name: string) => {\n  const t = POSSIBLE_TRANSFORMS.find((t) => t.name === name);\n  assert(t);\n  return t;\n};\n","import { buildTransform } from '../domain/types';\nimport { resizeImage } from '../domain/utils';\nimport { intParam } from '../params/intParam';\n\nexport const resize = buildTransform({\n  name: 'Resize',\n  params: [\n    intParam({\n      name: 'Width',\n      defaultValue: 128,\n      min: 1,\n    }),\n    intParam({\n      name: 'Height',\n      defaultValue: 128,\n      min: 1,\n    }),\n  ] as const,\n  fn: ({ image, parameters }) => {\n    const [newWidth, newHeight] = parameters;\n    return resizeImage({\n      image,\n      newWidth,\n      newHeight,\n    });\n  },\n});\n","import { buildTransform, Color, Dimensions } from '../domain/types';\nimport { assert, getPixelFromSource, writePixel } from '../domain/utils';\nimport { intParam } from '../params/intParam';\n\nexport const resizeBackground = buildTransform({\n  name: 'Resize Background',\n  params: [\n    intParam({ name: 'Width', defaultValue: 128, min: 0 }),\n    intParam({ name: 'Height', defaultValue: 128, min: 0 }),\n  ],\n  fn: ({ image, parameters }) => {\n    const [width, height] = image.dimensions;\n    const [newWidth, newHeight] = parameters;\n    assert(\n      newWidth >= width,\n      'New width for resize-background needs to be greater than or equal to the original'\n    );\n    assert(\n      newHeight >= height,\n      'New height for resize-background needs to be greater than or equal to the original'\n    );\n\n    const newDimensions: Dimensions = [newWidth, newHeight];\n\n    const xPadding = (newWidth - width) / 2;\n    const yPadding = (newHeight - height) / 2;\n\n    const newFrames = image.frames.map((frame) => {\n      const transformedImageData = new Uint8Array(newWidth * newHeight * 4);\n      for (let y = 0; y < newHeight; y += 1) {\n        for (let x = 0; x < newWidth; x += 1) {\n          const pixel: Color =\n            x > xPadding &&\n            x < newWidth - xPadding &&\n            y > yPadding &&\n            y < newHeight - yPadding\n              ? getPixelFromSource(image.dimensions, frame.data, [\n                  x - xPadding,\n                  y - yPadding,\n                ])\n              : [0, 0, 0, 0];\n          writePixel({\n            color: pixel,\n            coord: [x, y],\n            dimensions: newDimensions,\n            image: transformedImageData,\n          });\n        }\n      }\n      return {\n        data: transformedImageData,\n      };\n    });\n\n    return {\n      frames: newFrames,\n      dimensions: newDimensions,\n    };\n  },\n});\n","import { buildTransform } from '../domain/types';\nimport { mapFrames, mapCoords, getPixelFromSource } from '../domain/utils';\nimport { floatParam } from '../params/floatParam';\n\nexport const ripple = buildTransform({\n  name: 'Ripple',\n  params: [\n    floatParam({\n      name: 'Amplitude',\n      defaultValue: 10,\n      description: 'How strong the ripple effect should be',\n    }),\n    floatParam({\n      name: 'Period',\n      defaultValue: 2,\n      min: 0,\n      description: 'How many ripples you want',\n    }),\n  ],\n  fn: ({ image, parameters }) =>\n    mapFrames(image, (data, frameIndex, frameCount) => {\n      const [amplitude, period] = parameters;\n\n      const height = image.dimensions[1];\n      const shift = (frameIndex / frameCount) * 2 * Math.PI;\n      return mapCoords(image.dimensions, ([x, y]) => {\n        const offset = Math.round(\n          amplitude * Math.sin((y / height) * period * Math.PI + shift)\n        );\n\n        return getPixelFromSource(image.dimensions, data, [x + offset, y]);\n      });\n    }),\n});\n","import { mapImage } from '../domain/utils';\nimport { buildTransform, Coord } from '../domain/types';\nimport { dropdownParam } from '../params/dropdownParam';\n\nexport const rotate = buildTransform({\n  name: 'Rotate',\n  params: [\n    dropdownParam({\n      name: 'Direction',\n      defaultValue: -1,\n      options: [\n        { name: 'Clockwise', value: -1 },\n        { name: 'Counter-Clockwise', value: 1 },\n      ],\n    }),\n  ],\n  fn: mapImage(\n    ({\n      dimensions,\n      coord,\n      frameCount,\n      frameIndex,\n      getSrcPixel,\n      parameters,\n    }) => {\n      const [sign] = parameters;\n      const centerX = dimensions[0] / 2;\n      const centerY = dimensions[1] / 2;\n      const [x, y] = coord;\n      const xRelCenter = x - centerX;\n      const yRelCenter = y - centerY;\n\n      const amount = (frameIndex / frameCount) * (sign || 1);\n      const cos = Math.cos(2 * Math.PI * amount);\n      const sin = Math.sin(2 * Math.PI * amount);\n\n      const newCoord: Coord = [\n        Math.round(centerX + xRelCenter * cos - yRelCenter * sin),\n        Math.round(centerY + yRelCenter * cos + xRelCenter * sin),\n      ];\n\n      return getSrcPixel(newCoord);\n    }\n  ),\n});\n","import { mapFrames, mapCoords, getPixelFromSource } from '../domain/utils';\nimport { buildTransform, Coord } from '../domain/types';\n\nexport const roxbury = buildTransform({\n  name: 'Roxbury',\n  params: [],\n  fn: ({ image }) =>\n    mapFrames(image, (data, frameIndex, frameCount) => {\n      const idx = frameIndex / frameCount;\n      // 4 phases:\n      //  0 -> freeze\n      //  1 -> rotate clockwise\n      //  2 -> freeze\n      //  3 -> rotate counter-clockwise\n      const phase = Math.floor(idx * 4);\n      const phaseIdx = (idx - phase / 4) * 4;\n\n      const maxAngle = (Math.PI / 2) * 0.2; // 40% of 90 degrees\n\n      const angle =\n        phase === 0\n          ? 0\n          : phase === 1\n          ? phaseIdx * maxAngle // Rotate clockwise\n          : phase === 2\n          ? maxAngle // Freeze!\n          : (1 - phaseIdx) * maxAngle; // Rotate counter-clockwise\n\n      const cos = Math.cos(-angle * 1.35);\n      const sin = Math.sin(-angle * 1.35);\n\n      const rotatePointX = image.dimensions[0] * 0.25;\n      const rotatePointY = image.dimensions[1] * 0.7;\n\n      return mapCoords(image.dimensions, (coord) => {\n        const [x, y] = coord;\n        const xRelCenter = Math.floor(x - rotatePointX + 8 * Math.sin(angle));\n        const yRelCenter = Math.floor(y - rotatePointY + 8 * Math.cos(angle));\n\n        const newCoord: Coord = [\n          Math.round(rotatePointX + xRelCenter * cos - yRelCenter * sin),\n          Math.round(rotatePointY + yRelCenter * cos + xRelCenter * sin),\n        ];\n\n        return getPixelFromSource(image.dimensions, data, newCoord);\n      });\n    }),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage } from '../domain/utils';\nimport { floatParam } from '../params/floatParam';\n\nexport const shake = buildTransform({\n  name: 'Shake',\n  params: [floatParam({ name: 'Shake Speed', defaultValue: 10, min: 0 })],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel, parameters }) => {\n    const [shakeSpeed] = parameters;\n    const [x, y] = coord;\n    const xOffset =\n      x +\n      Math.round(\n        shakeSpeed * Math.cos((frameIndex / frameCount) * 2 * Math.PI)\n      );\n\n    return getSrcPixel([xOffset, y]);\n  }),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage, isTransparent, fromHexColor } from '../domain/utils';\nimport { colorPickerParam } from '../params/colorPickerParam';\n\nexport const solidBackground = buildTransform({\n  name: 'Solid Background',\n  params: [\n    colorPickerParam({\n      name: 'Background Color',\n      defaultValue: fromHexColor('#000000'),\n    }),\n  ],\n  fn: mapImage(({ coord, getSrcPixel, parameters }) => {\n    const [color] = parameters;\n    const p = getSrcPixel(coord);\n    return isTransparent(p) ? color : p;\n  }),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage, isTransparent } from '../domain/utils';\nimport { floatParam } from '../params/floatParam';\n\nexport const staticc = buildTransform({\n  name: 'Static',\n  params: [floatParam({ name: 'Strength', defaultValue: 10, min: 0 })],\n  fn: mapImage(({ coord, getSrcPixel, parameters, random }) => {\n    const [strength] = parameters;\n    const src = getSrcPixel(coord);\n\n    if (isTransparent(src)) {\n      return [0, 0, 0, 0];\n    }\n\n    const inverse = Math.ceil(random() * strength) > 1;\n\n    return inverse ? [255 - src[0], 255 - src[1], 255 - src[2], src[3]] : src;\n  }),\n});\n","import { buildTransform } from '../domain/types';\nimport { fromHexColor, mapImage } from '../domain/utils';\nimport { colorPickerParam } from '../params/colorPickerParam';\nimport { intParam } from '../params/intParam';\n\nexport const transparency = buildTransform({\n  name: 'Transparent Color',\n  params: [\n    colorPickerParam({\n      name: 'Transparent Color',\n      defaultValue: fromHexColor('#000000'),\n    }),\n    intParam({\n      name: 'Tolerance',\n      defaultValue: 10,\n      min: 0,\n      max: 100,\n    }),\n  ] as const,\n  fn: mapImage(({ coord, getSrcPixel, parameters }) => {\n    const [color, tolerance] = parameters;\n    const p = getSrcPixel(coord);\n    const diff0 = p[0] - color[0];\n    const diff1 = p[1] - color[1];\n    const diff2 = p[2] - color[2];\n    const diff = Math.sqrt(diff0 * diff0 + diff1 * diff1 + diff2 * diff2);\n    if ((diff / 255) * 100 <= tolerance) {\n      return [p[0], p[1], p[2], 0];\n    }\n    return p;\n  }),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage } from '../domain/utils';\nimport { intParam } from '../params/intParam';\n\nexport const transpose = buildTransform({\n  name: 'Transpose',\n  params: [\n    intParam({ name: 'X', defaultValue: 0 }),\n    intParam({ name: 'Y', defaultValue: 0 }),\n  ],\n  fn: mapImage(({ coord, getSrcPixel, parameters }) => {\n    const [transX, transY] = parameters;\n    const [x, y] = coord;\n\n    return getSrcPixel([x + transX, y + transY]);\n  }),\n});\n","import React from 'react';\nimport {\n  Button,\n  CircularProgress,\n  Divider,\n  Grid,\n  Icon,\n  Stack,\n  Typography,\n} from '@material-ui/core';\n\nimport { assert } from '../domain/utils';\nimport { runTransforms } from '../domain/run';\nimport { TransformInput, TransformWithParams } from '../domain/types';\nimport { intParam } from '../params/intParam';\nimport { transformByName } from '../transforms';\n\ninterface ComputeBoxProps {\n  isDirty: boolean;\n  computeDisabled: boolean;\n  baseImageUrl?: string;\n  transforms: TransformWithParams<any>[];\n  onComputed: () => void;\n}\n\ntype ComputeState =\n  | {\n      loading: false;\n      results: { transformName: string; gif: string }[];\n      computeTime: number | undefined;\n    }\n  | { loading: true };\n\nconst DEFAULT_FPS = 20;\nconst fpsParam = intParam({\n  name: 'Frames per Second',\n  defaultValue: DEFAULT_FPS,\n  min: 0,\n});\n\nexport const ComputeBox: React.FC<ComputeBoxProps> = ({\n  isDirty,\n  computeDisabled,\n  baseImageUrl,\n  transforms,\n  onComputed,\n}) => {\n  const [state, setState] = React.useState<ComputeState>({\n    loading: false,\n    results: [],\n    computeTime: undefined,\n  });\n  const [fpsChanged, setFpsChanged] = React.useState(false);\n  const [fps, setFps] = React.useState(DEFAULT_FPS);\n\n  const buttonDisabled = computeDisabled && !fpsChanged;\n\n  return (\n    <Stack spacing={1}>\n      <Typography variant=\"h5\">Create Gif</Typography>\n\n      {fpsParam.fn({\n        value: { valid: true, value: fps },\n        onChange: (x) => {\n          if (x.valid) {\n            setFps(x.value);\n            setFpsChanged(true);\n          }\n        },\n      })}\n      <Button\n        variant=\"contained\"\n        endIcon={\n          !state.loading && (isDirty || fpsChanged) ? (\n            <Icon>priority_high</Icon>\n          ) : undefined\n        }\n        disabled={buttonDisabled}\n        onClick={async () => {\n          const transformInputs = transforms.map(\n            (t): TransformInput<any> => ({\n              transform: transformByName(t.transformName),\n              params: t.paramsValues.map((p) => {\n                assert(p.valid);\n                return p.value;\n              }),\n            })\n          );\n          setState({ loading: true });\n          setTimeout(async () => {\n            try {\n              assert(\n                baseImageUrl,\n                'No source image, this button should be disabled!'\n              );\n              const start = Date.now();\n              const gifs = await runTransforms(\n                baseImageUrl,\n                transformInputs,\n                fps\n              );\n              const computeTime = Math.ceil((Date.now() - start) / 1000);\n              setState({\n                loading: false,\n                computeTime,\n                results: gifs.map((gif, idx) => ({\n                  transformName: transforms[idx].transformName,\n                  gif,\n                })),\n              });\n              setFpsChanged(false);\n              onComputed();\n            } catch (err) {\n              console.error(err);\n              console.error(err.stack);\n            }\n          });\n        }}\n      >\n        {state.loading ? <CircularProgress color=\"inherit\" /> : 'Compute'}\n      </Button>\n      <Divider />\n      <Grid\n        container\n        spacing={2}\n        padding={1}\n        columns={{ xs: 4, sm: 8, md: 12 }}\n      >\n        {!state.loading && (\n          <>\n            {state.computeTime && (\n              <Typography variant=\"caption\">\n                Compute Time: {state.computeTime} seconds\n              </Typography>\n            )}\n            {state.results.map(({ gif, transformName }, idx) => (\n              <Grid item xs={4} sm={4} md={4}>\n                <Typography variant=\"subtitle2\">{transformName}</Typography>\n                <img src={gif} alt={`gif-${transformName}-${idx}`}></img>\n              </Grid>\n            ))}\n          </>\n        )}\n      </Grid>\n    </Stack>\n  );\n};\n","import {\n  FormControl,\n  IconButton,\n  Icon,\n  Tooltip,\n  Stack,\n  Typography,\n  Paper,\n  Autocomplete,\n  TextField,\n  Divider,\n} from '@material-ui/core';\nimport React from 'react';\n\nimport { ParamFunction, ParamValue, Transform } from '../domain/types';\n\ninterface SelectedTransform {\n  transform: Transform<any>;\n  paramValues: ParamValue<any>[];\n}\n\ninterface ImageTransformProps {\n  selectedTransform: SelectedTransform;\n  possibleTransforms: Transform<any>[];\n  index: number;\n  onSelect: (selected: SelectedTransform) => void;\n  onRemove: () => void;\n  onMoveLeft?: () => void;\n  onMoveRight?: () => void;\n}\n\nexport const ImageTransform: React.FC<ImageTransformProps> = ({\n  selectedTransform,\n  possibleTransforms,\n  index,\n  onSelect,\n  onRemove,\n  onMoveLeft,\n  onMoveRight,\n}) => {\n  return (\n    <Paper style={{ padding: 8 }} elevation={3}>\n      <Stack spacing={1}>\n        <Stack direction=\"row\" spacing={2}>\n          <Typography variant=\"subtitle1\">{index + 1}</Typography>\n          <Tooltip title=\"Delete transform\">\n            <IconButton aria-label=\"delete\" onClick={onRemove}>\n              <Icon>delete</Icon>\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Move transform left\">\n            <IconButton\n              aria-label=\"delete\"\n              onClick={onMoveLeft}\n              disabled={!onMoveLeft}\n            >\n              <Icon>chevron_left</Icon>\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Move transform right\">\n            <IconButton\n              aria-label=\"delete\"\n              onClick={onMoveRight}\n              disabled={!onMoveRight}\n            >\n              <Icon>chevron_right</Icon>\n            </IconButton>\n          </Tooltip>\n        </Stack>\n        <Stack direction=\"row\" spacing={4}>\n          <FormControl fullWidth>\n            <Autocomplete\n              disableClearable\n              value={selectedTransform.transform.name}\n              options={possibleTransforms.map((t) => t.name)}\n              onChange={(event, newTransformName) => {\n                const t = possibleTransforms.find(\n                  (t) => t.name === newTransformName\n                )!;\n                // Reset all the params when you select a new transform\n                onSelect({\n                  transform: t,\n                  paramValues: t.params.map(\n                    (p: ParamFunction<any>) => p.defaultValue\n                  ),\n                });\n              }}\n              renderInput={(params) => (\n                <TextField {...params} label=\"Transform\" />\n              )}\n            />\n          </FormControl>\n        </Stack>\n        {selectedTransform.transform.description && (\n          <Typography variant=\"caption\">\n            {selectedTransform.transform.description}\n          </Typography>\n        )}\n        {selectedTransform.transform.params.length > 0 && (\n          <Typography variant=\"subtitle1\">Parameters</Typography>\n        )}\n        <Stack divider={<Divider />} spacing={2}>\n          {selectedTransform.transform.params.map(\n            // Create elements for each of the parameters for the selectect transform.\n            // Each of these would get an onChange event so we know when the user has\n            //  selected a value.\n            (param: ParamFunction<any>, idx: number) => {\n              const ele = param.fn({\n                value: selectedTransform.paramValues[idx],\n                onChange: (v) => {\n                  onSelect({\n                    ...selectedTransform,\n                    paramValues: selectedTransform.paramValues.map((x, i) => {\n                      if (i === idx) {\n                        return v;\n                      }\n                      return x;\n                    }),\n                  });\n                },\n              });\n              return <React.Fragment key={param.name}>{ele}</React.Fragment>;\n            }\n          )}\n        </Stack>\n      </Stack>\n    </Paper>\n  );\n};\n","import { Button, Grid, Stack, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { ParamFunction, Transform, TransformWithParams } from '../domain/types';\nimport { transformByName } from '../transforms';\nimport { ImageTransform } from './ImageTransform';\n\ninterface TransformListProps {\n  currentTransforms: TransformWithParams<any>[];\n  possibleTransforms: Transform<any>[];\n  onTransformsChange: (t: TransformWithParams<any>[]) => void;\n}\n\nexport const ImageTransformList: React.FC<TransformListProps> = ({\n  currentTransforms,\n  possibleTransforms,\n  onTransformsChange,\n}) => (\n  <Stack spacing={1}>\n    <Typography variant=\"h5\">Image Transforms</Typography>\n    <Button\n      fullWidth={false}\n      variant=\"contained\"\n      onClick={() =>\n        onTransformsChange([\n          ...currentTransforms,\n          {\n            transformName: possibleTransforms[0].name,\n            paramsValues: possibleTransforms[0].params.map(\n              (p: ParamFunction<any>) => p.defaultValue\n            ),\n          },\n        ])\n      }\n    >\n      New Transform\n    </Button>\n    <Grid container spacing={2} padding={1} columns={{ xs: 4, sm: 8, md: 12 }}>\n      {currentTransforms.map((t, tIdx) => (\n        <Grid item xs={4} sm={4} md={4}>\n          <ImageTransform\n            index={tIdx}\n            possibleTransforms={possibleTransforms}\n            selectedTransform={{\n              transform: transformByName(t.transformName),\n              paramValues: t.paramsValues,\n            }}\n            onRemove={() =>\n              onTransformsChange(\n                currentTransforms.filter((nextT, newIdx) => newIdx !== tIdx)\n              )\n            }\n            onMoveLeft={\n              tIdx > 0\n                ? () =>\n                    onTransformsChange(\n                      currentTransforms.map((nextT, newIdx) => {\n                        if (newIdx === tIdx - 1) {\n                          // This is the next item in the list\n                          return currentTransforms[newIdx + 1];\n                        } else if (tIdx === newIdx) {\n                          // This is the previous item\n                          return currentTransforms[tIdx - 1];\n                        } else {\n                          return nextT;\n                        }\n                      })\n                    )\n                : undefined\n            }\n            onMoveRight={\n              tIdx < currentTransforms.length - 1\n                ? () =>\n                    onTransformsChange(\n                      currentTransforms.map((nextT, newIdx) => {\n                        if (newIdx === tIdx + 1) {\n                          // This is the previous item in the list\n                          return currentTransforms[newIdx - 1];\n                        } else if (tIdx === newIdx) {\n                          // This is the next item\n                          return currentTransforms[tIdx + 1];\n                        } else {\n                          return nextT;\n                        }\n                      })\n                    )\n                : undefined\n            }\n            onSelect={(selected) =>\n              onTransformsChange(\n                currentTransforms.map((nextT, nextTIdx) => {\n                  if (tIdx === nextTIdx) {\n                    // This is the one we just changed\n                    return {\n                      transformName: selected.transform.name,\n                      paramsValues: selected.paramValues,\n                      computedImage: undefined,\n                    };\n                  }\n                  // Reset all the images if we changed anything\n                  return {\n                    transformName: nextT.transformName,\n                    paramsValues: nextT.paramsValues,\n                    computedImage: undefined,\n                  };\n                })\n              )\n            }\n          />\n        </Grid>\n      ))}\n    </Grid>\n  </Stack>\n);\n","import {\n  Stack,\n  Button,\n  Icon,\n  Typography,\n  Divider,\n  Alert,\n} from '@material-ui/core';\nimport React from 'react';\nimport * as lz from 'lz-string';\n\ninterface ImportExportProps {\n  state: any;\n  onImport: (o: any) => void;\n}\n\nexport const ImportExport: React.FC<ImportExportProps> = ({\n  state,\n  onImport,\n}) => {\n  const [info, setInfo] = React.useState<string | undefined>();\n  const [isInvalid, setInvalid] = React.useState(false);\n  return (\n    <Stack spacing={1}>\n      {info && <Alert severity=\"info\">{info}</Alert>}\n      <Typography variant=\"subtitle1\">\n        Export the current image and all of its transitions to the clipboard\n      </Typography>\n      <Button\n        endIcon={<Icon>file_upload</Icon>}\n        variant=\"contained\"\n        onClick={() => {\n          const output = lz.compressToBase64(JSON.stringify(state));\n          navigator.clipboard.writeText(output);\n          setInfo('Copied to clipboard');\n          setTimeout(() => setInfo(undefined), 2000);\n        }}\n      >\n        Export to clipboard\n      </Button>\n\n      <Divider />\n\n      <Typography variant=\"subtitle1\">\n        Import an image and its transformations from the clipboard\n      </Typography>\n      {isInvalid && (\n        <Alert severity=\"error\">Error importing from clipboard</Alert>\n      )}\n      <Button\n        endIcon={<Icon>file_download</Icon>}\n        variant=\"contained\"\n        onClick={async () => {\n          try {\n            const clipboardContents = await navigator.clipboard.readText();\n            if (!clipboardContents) {\n              setInvalid(true);\n              return;\n            }\n            const data = JSON.parse(\n              lz.decompressFromBase64(clipboardContents)!\n            );\n            onImport(data);\n            setInvalid(false);\n          } catch (e) {\n            console.error(e);\n            setInvalid(true);\n          }\n        }}\n      >\n        Import from clipboard\n      </Button>\n    </Stack>\n  );\n};\n","import React from 'react';\nimport ScopedCssBaseline from '@material-ui/core/ScopedCssBaseline';\nimport {\n  Container,\n  Stack,\n  Divider,\n  Paper,\n  Typography,\n} from '@material-ui/core';\n\nimport { POSSIBLE_TRANSFORMS, transformByName } from './transforms';\nimport { ParamFunction, ParamValue } from './domain/types';\nimport { ComputeBox } from './components/ComputeBox';\nimport { ImagePicker } from './components/ImagePicker';\nimport { ImageTransformList } from './components/ImageTransformList';\nimport { ImportExport } from './components/ImportExport';\n\n// Set to true to print out the current state at the bottom of the page\nconst DEBUG = false;\n\ntype AppState = {\n  baseImage?: string;\n  transforms: {\n    transformName: string;\n    paramsValues: ParamValue<any>[];\n    computedImage?: string;\n  }[];\n  dirty: boolean;\n};\n\nexport const App: React.FC = () => {\n  const [state, setState] = React.useState<AppState>({\n    dirty: false,\n    transforms: [],\n    baseImage: undefined,\n  });\n\n  if (DEBUG) {\n    (window as any).STATE = state;\n  }\n\n  const computeBtnDisbled =\n    !state.baseImage ||\n    state.transforms.length === 0 ||\n    !state.dirty ||\n    state.transforms.some((t) => {\n      const params = transformByName(t.transformName)\n        .params as ParamFunction<any>[];\n      return (\n        params.length > 0 && t.paramsValues.every((p, i) => p.valid === false)\n      );\n    });\n\n  return (\n    <>\n      <ScopedCssBaseline />\n      <Container>\n        <Stack spacing={4} justifyContent=\"space-evenly\" divider={<Divider />}>\n          <Typography variant=\"h2\" pt={4}>\n            Partymoji\n          </Typography>\n          <Stack spacing={4} divider={<Divider />}>\n            <Paper style={{ padding: 16 }}>\n              <Stack spacing={1}>\n                <Typography variant=\"h5\">Source Image</Typography>\n                <ImagePicker\n                  name=\"Choose a source image\"\n                  currentImageUrl={state.baseImage}\n                  onChange={(baseImage) => {\n                    setState({\n                      ...state,\n                      baseImage,\n                      dirty: true,\n                    });\n                  }}\n                />\n              </Stack>\n            </Paper>\n            <Paper style={{ padding: 16 }}>\n              <ImageTransformList\n                currentTransforms={state.transforms}\n                possibleTransforms={POSSIBLE_TRANSFORMS}\n                onTransformsChange={(transforms) =>\n                  setState({\n                    ...state,\n                    dirty: true,\n                    transforms,\n                  })\n                }\n              />\n            </Paper>\n            <Paper style={{ padding: 16 }}>\n              <ComputeBox\n                isDirty={state.dirty}\n                baseImageUrl={state.baseImage}\n                computeDisabled={computeBtnDisbled}\n                transforms={state.transforms}\n                onComputed={() =>\n                  setState({\n                    ...state,\n                    dirty: false,\n                  })\n                }\n              />\n            </Paper>\n            <Paper style={{ padding: 16 }}>\n              <ImportExport\n                state={state}\n                onImport={(newState) => setState({ ...newState, dirty: true })}\n              />\n            </Paper>\n            {DEBUG && (\n              <div>\n                <code>{JSON.stringify(state, null, 2)}</code>\n              </div>\n            )}\n            <a\n              href=\"https://github.com/MikeyBurkman/partymoji\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <img\n                src=\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\"\n                width={64}\n                height={64}\n                alt=\"Github Link\"\n              ></img>\n            </a>\n          </Stack>\n        </Stack>\n      </Container>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}