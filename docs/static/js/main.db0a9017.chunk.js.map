{"version":3,"sources":["domain/utils.ts","domain/run.ts","components/HelpTooltip.tsx","params/sliderParam.tsx","domain/types.ts","params/intParam.tsx","transforms/adjust-image.ts","components/Expandable.tsx","params/colorPickerParam.tsx","transforms/background-color.ts","components/ImagePicker.tsx","params/radioParam.tsx","transforms/background-image.ts","params/imagePickerParam.tsx","transforms/bounce.ts","transforms/circle.ts","params/variableLengthParam.tsx","transforms/colors.ts","transforms/colors-background.ts","params/floatParam.tsx","transforms/double-vision.ts","transforms/expand.ts","transforms/fisheye.ts","transforms/grid.ts","params/huePickerParam.tsx","transforms/hue-shift.ts","params/textParam.tsx","transforms/lightning.ts","transforms/nuke.ts","transforms/party.ts","transforms/pinwheel.ts","transforms/pinwheel-party.ts","transforms/radiance.ts","transforms/radiance-party.ts","transforms/repeat-animation.ts","transforms/resize-image.ts","transforms/ripple.ts","transforms/rotate.ts","transforms/roxbury.ts","transforms/shake.ts","transforms/slow-animation.ts","transforms/static.ts","params/checkboxParam.tsx","transforms/transparency.ts","transforms/index.ts","transforms/transpose.ts","components/ComputeBox.tsx","components/ImageTransform.tsx","components/ImageTransformList.tsx","components/ImportExport.tsx","localStorage.ts","App.tsx","components/TopLevelErrorBoundary.tsx","index.tsx"],"names":["toHexColor","r","g","b","toHexValue","c","s","toString","toUpperCase","length","fromHexColor","hex","parseInt","substr","isTransparent","pixel","randomColor","random","Math","floor","int32","clamp","n","min","max","clampColor","a","TRANSPARENT_COLOR","getPixelFromSource","dimensions","image","coord","width","height","x","y","idx","getImageIndex","assert","condition","message","AssertionError","actual","mapFrames","cb","frames","map","frame","mapCoords","transformedImageData","Uint8Array","mapImage","parameters","imageData","frameIndex","frameCount","getSrcPixel","scaleImage","args","newWidth","newHeight","xRatio","yRatio","newImage","createNewImage","srcX","srcY","color","getPixel","setPixel","resizeImage","sourceWidth","sourceHeight","xPadding","round","yPadding","range","weightedValue","percent","v1","v2","shiftHue","hue","amount","convert","hsl","l","rgb","newR","newG","newB","calculateAngle","c1","c2","xRelCenter","yRelCenter","atan2","PI","colorFromHue","adjustSaturation","h","newSat","abs","runTransforms","transformList","inputDataUrl","fps","onImageFinished","seedrandom","readImage","originalImage","results","currentImage","transformInput","result","transform","fn","params","transparentColor","getTransparentColor","encodeTransparency","createGif","gif","push","img","i","Promise","resolve","gifEncoder","setFrameRate","setRepeat","hexColor","slice","setTransparent","writeHeader","data","on","chunk","dataUrl","URL","createObjectURL","Blob","type","forEach","f","addFrame","finish","res","rej","getPixels","err","shape","from","numFrames","sliceSize","subarray","hasTransparent","seenPixels","Set","attempt","px","add","findRandomColorNotInSet","undefined","set","attempts","col","has","HelpTooltip","description","Tooltip","title","Icon","fontSize","SliderParam","name","value","step","onChange","Stack","spacing","direction","Typography","variant","sx","paddingLeft","paddingRight","Slider","aria-label","valueLabelDisplay","getAriaValueText","e","valid","sliderParam","defaultValue","buildTransform","IntParam","parse","React","useState","val","setVal","invalidText","setInvalidText","FormControl","TextField","error","onBlur","reason","target","FormHelperText","intParam","isNaN","adjustImage","resizeToWidth","resizeToHeight","brightness","contrast","saturation","hasFrameCount","oldWidth","oldHeight","hasScaleChange","ceil","console","log","isBiggerImage","currImage","setFrameCount","currColor","d","adjustBrightness","adjustContrast","currentFrames","Expandable","mainEle","children","collapsed","setCollapsed","ClickAwayListener","onClickAway","Box","Button","onClick","style","textTransform","Collapse","in","ColorBox","backgroundColor","ColorPickerParam","disableAlpha","presetColors","onChangeComplete","colorPickerParam","p","ImagePicker","currentImageUrl","startIcon","maxWidth","component","hidden","accept","event","files","Array","file","readFile","baseImage","maxHeight","src","alt","reader","FileReader","onload","readAsDataURL","RadioParam","options","RadioGroup","t","FormControlLabel","control","Radio","label","radioParam","backgroundImage","imagePickerParam","otherImage","frameProgress","otherImageFrame","otherImageSrc","bounce","sin","circle","radius","cos","VariableLengthParam","newParamText","createNewParam","v","param","pValue","setParams","Paper","ele","newValue","oldP","IconButton","newParams","filter","variableLengthParam","colors","srcPixel","chosenColor","gray","getAveragePixelValue","colorsBackground","FloatParam","floatParam","parseFloat","doubleVision","amplitude","dir","expand","dist","centerX","centerY","fisheye","expanding","angle","grid","gridSize","gridAngle","isOnGrid","threshold","onGrid","angleDegrees","tan","toRad","degrees","HuePickerParam","hueShift","newHue","TextParam","lightningIntensities","lightning","textParam","flashIntensity","icf","nuke","party","shiftSpeed","isBackground","newH","DEFAULT_COLORS","pinwheel","groupCount","offsetX","offsetY","ribbonCount","ribbonArcDegrees","colorsLength","toFixed","center","pointAngle","colorIdx","pinwheelParty","radiance","colorList","flatMap","maxDist","sqrt","distFromCenter","radianceParty","repeatAnimation","numRepeats","resizeImageUtil","ripple","period","shift","offset","rotate","sign","roxbury","phase","phaseIdx","maxAngle","rotatePointX","rotatePointY","newCoord","shake","slowAnimation","ogFrameIdx","r1","g1","b1","a1","staticc","strength","inverse","grey","isStatic","CheckboxParam","paddingTop","Checkbox","checked","POSSIBLE_TRANSFORMS","checkboxParam","matchesTransparent","selectedColor","tolerance","withinTolerance","deltaRed","deltaBlue","deltaGreen","rSomething","rComponent","bComponent","gComponent","colorDiff","transX","transY","sort","transformByName","find","fpsParam","ComputeBox","computeDisabled","appState","onFpsChange","onComputed","loading","computeTime","computeState","setComputeState","progress","setProgress","endIcon","dirty","disabled","transformInputs","transforms","transformName","paramsValues","setTimeout","start","Date","now","currIdx","stack","CircularProgress","LinearProgress","Divider","Grid","container","padding","columns","xs","sm","md","item","ImageTransform","selectedTransform","possibleTransforms","index","onSelect","onRemove","onMoveLeft","onMoveRight","elevation","fullWidth","Autocomplete","disableClearable","newTransformName","paramValues","renderInput","divider","Fragment","ImageTransformList","currentTransforms","onTransformsChange","rowSpacing","tIdx","nextT","newIdx","selected","nextTIdx","computedImage","ImportExport","state","onImport","info","setInfo","isInvalid","setInvalid","showError","output","lz","JSON","stringify","navigator","clipboard","writeText","readText","clipboardContents","isArray","Alert","severity","LOCAL_STORAGE_KEY","clearAppState","window","localStorage","removeItem","DEBUG","DEFAULT_STATE","App","setStateRaw","useEffect","stored","getItem","savedState","setState","newState","setItem","computeBtnDisbled","some","every","ScopedCssBaseline","Container","justifyContent","pt","href","rel","TopLevelErrorBoundary","hasError","errorInfo","this","props","onClearLocalStorage","Component","ReactDOM","render","StrictMode","location","reload","document","getElementById"],"mappings":"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","file":"static/js/main.db0a9017.chunk.js","sourcesContent":["import { AssertionError } from 'assert';\nimport * as convert from 'color-convert';\nimport { range } from 'remeda';\nimport seedrandom from 'seedrandom';\nimport {\n  Color,\n  Coord,\n  Dimensions,\n  Image,\n  ImageData,\n  Random,\n  TransformFn,\n  TransformFnOpts,\n} from './types';\n\n/**\n * Converts a Pixel into a hex string like '#00FF00'\n */\nexport const toHexColor = ([r, g, b]: Color) => {\n  const toHexValue = (c: number) => {\n    const s = c.toString(16).toUpperCase();\n    return s.length === 2 ? s : '0' + s;\n  };\n\n  return `#${toHexValue(r)}${toHexValue(g)}${toHexValue(b)}`;\n};\n\nexport const fromHexColor = (hex: string): Color => [\n  parseInt(hex.toUpperCase().substr(1, 2), 16),\n  parseInt(hex.toUpperCase().substr(3, 2), 16),\n  parseInt(hex.toUpperCase().substr(5, 2), 16),\n  255,\n];\n\nexport const isHexColor = (s: string) => /^#[0-9A-F]{6}$/.test(s);\n\n/**\n * Our transformation functions allow for an alpha channel, but gifs do not.\n * All pixels are either fully solid or fully transparent.\n * This function returns true if the color's alpha is below a certain threshold.\n */\nexport const isTransparent = (pixel: Color) => pixel[3] < 64;\n\nexport const randomColor = (random: seedrandom.prng): Color => [\n  Math.floor(random.int32() * 256),\n  Math.floor(random.int32() * 256),\n  Math.floor(random.int32() * 256),\n  255,\n];\n\nexport const getAveragePixelValue = ([r, g, b]: Color) =>\n  Math.round((r + g + b) / 3);\n\nexport const clamp = (n: number, min: number, max: number) =>\n  Math.max(Math.min(n, max), min);\n\nexport const clampColor = ([r, g, b, a]: Color): Color => [\n  clamp(r, 0, 255),\n  clamp(g, 0, 255),\n  clamp(b, 0, 255),\n  clamp(a, 0, 255),\n];\n\nexport const TRANSPARENT_COLOR: Color = [0, 0, 0, 0];\n\nexport const getPixelFromSource = (\n  dimensions: Dimensions,\n  image: ImageData,\n  coord: Coord\n): Color => {\n  const [width, height] = dimensions;\n  const [x, y] = coord;\n  if (x < 0 || x >= width || y < 0 || y >= height) {\n    return TRANSPARENT_COLOR; // Default to transparent if an invalid coordinate\n  }\n\n  const idx = getImageIndex(dimensions, x, y);\n  return [image[idx], image[idx + 1], image[idx + 2], image[idx + 3]];\n};\n\n/**\n * Asserts that a given value is truthy. Uses TypeScript 3.7 assertion types.\n *\n * @example\n * ```ts\n * const foo: string|undefined = getSomeData();\n * asert(foo, 'foo must be defined');\n * console.log(foo.length); // OK\n * ```\n */\nexport function assert(\n  condition: unknown,\n  message = 'Unexpected falsy value'\n): asserts condition {\n  if (!condition) {\n    throw new AssertionError({ message, actual: condition });\n  }\n}\n\n/********** Mapping Utils ***********/\n// Maps all frames from the original image into new frames.\n// Assumes all mapped frames are the same dimension as the original image.\nexport const mapFrames = (\n  image: Image,\n  cb: (\n    imageData: ImageData,\n    frameIndex: number,\n    frameCount: number\n  ) => ImageData\n): Image => ({\n  dimensions: image.dimensions,\n  frames: image.frames.map((frame, idx) => cb(frame, idx, image.frames.length)),\n});\n\n/**\n * Maps the coordinates in a given shape into an image\n */\nexport const mapCoords = (\n  dimensions: Dimensions,\n  cb: (coord: Coord) => Color\n): ImageData => {\n  const [width, height] = dimensions;\n  const transformedImageData = new Uint8Array(width * height * 4);\n  for (let y = 0; y < height; y += 1) {\n    for (let x = 0; x < width; x += 1) {\n      const c = clampColor(cb([x, y]));\n      const idx = getImageIndex(dimensions, x, y);\n      transformedImageData[idx] = c[0];\n      transformedImageData[idx + 1] = c[1];\n      transformedImageData[idx + 2] = c[2];\n      transformedImageData[idx + 3] = c[3];\n    }\n  }\n  return transformedImageData;\n};\n\n/**\n * Combines mapFrames and mapCoords into one function.\n * Used for transforming each pixel in an image into another pixel.\n */\nexport const mapImage = <T>(\n  cb: (args: {\n    image: Image;\n    dimensions: Dimensions;\n    random: Random;\n    parameters: T;\n    coord: Coord;\n    frameCount: number;\n    frameIndex: number;\n    getSrcPixel: (coord: Coord) => Color;\n  }) => Color\n): TransformFn<T> => {\n  return ({ image, random, parameters }: TransformFnOpts<T>) =>\n    mapFrames(image, (imageData, frameIndex, frameCount) =>\n      mapCoords(image.dimensions, (coord) =>\n        cb({\n          image,\n          dimensions: image.dimensions,\n          random,\n          parameters,\n          coord,\n          frameCount,\n          frameIndex,\n          getSrcPixel: (c: Coord) =>\n            getPixelFromSource(image.dimensions, imageData, c),\n        })\n      )\n    );\n};\n\nexport const getImageIndex = ([width]: Dimensions, x: number, y: number) =>\n  (x + y * width) * 4;\n\n/**\n * Change the dimensions of the image, scaling it to make it fit the new dimensions\n */\nexport const scaleImage = (args: {\n  image: Image;\n  newWidth: number;\n  newHeight: number;\n}): Image => {\n  const { image, newWidth, newHeight } = args;\n  const [width, height] = image.dimensions;\n  const xRatio = width / newWidth;\n  const yRatio = height / newHeight;\n\n  const newImage = createNewImage({\n    dimensions: [newWidth, newHeight],\n    frameCount: image.frames.length,\n  });\n\n  for (\n    let frameIndex = 0;\n    frameIndex < newImage.frames.length;\n    frameIndex += 1\n  ) {\n    for (let y = 0; y < newHeight; y += 1) {\n      for (let x = 0; x < newWidth; x += 1) {\n        // Simple nearest-neighbor image scaling.\n        // Arguably the worst of the scaling algorithms, but it's quick,\n        //  and we're generally dealing with small images anyhow.\n        const srcX = Math.floor(x * xRatio);\n        const srcY = Math.floor(y * yRatio);\n\n        const color = getPixel({\n          image,\n          frameIndex,\n          coord: [srcX, srcY],\n        });\n        setPixel({\n          image: newImage,\n          frameIndex,\n          color,\n          coord: [x, y],\n        });\n      }\n    }\n  }\n\n  return newImage;\n};\n\n/**\n * Will change the image dimensions without altering the scale.\n * If the new dimensions are larger, the image will be centered.\n * If the new dimensions are smaller, it'll be cropped\n */\nexport const resizeImage = ({\n  image,\n  newWidth,\n  newHeight,\n}: {\n  image: Image;\n  newWidth: number;\n  newHeight: number;\n}): Image => {\n  const [sourceWidth, sourceHeight] = image.dimensions;\n\n  const xPadding = Math.round((newWidth - sourceWidth) / 2);\n  const yPadding = Math.round((newHeight - sourceHeight) / 2);\n\n  const newImage = createNewImage({\n    dimensions: [newWidth, newHeight],\n    frameCount: image.frames.length,\n  });\n\n  for (\n    let frameIndex = 0;\n    frameIndex < newImage.frames.length;\n    frameIndex += 1\n  ) {\n    for (let y = 0; y < newHeight; y += 1) {\n      for (let x = 0; x < newWidth; x += 1) {\n        const color: Color =\n          x > xPadding &&\n          x < newWidth - xPadding &&\n          y > yPadding &&\n          y < newHeight - yPadding\n            ? getPixel({\n                image,\n                frameIndex,\n                coord: [x - xPadding, y - yPadding],\n              })\n            : TRANSPARENT_COLOR;\n        setPixel({\n          image: newImage,\n          frameIndex,\n          coord: [x, y],\n          color,\n        });\n      }\n    }\n  }\n\n  return newImage;\n};\n\nexport const createNewImage = (args: {\n  frameCount: number;\n  dimensions: Dimensions;\n}): Image => ({\n  dimensions: args.dimensions,\n  frames: range(0, args.frameCount).map(\n    // 4 == bytes used per color (RGBA)\n    () => new Uint8Array(args.dimensions[0] * args.dimensions[1] * 4)\n  ),\n});\n\nexport const duplicateImage = (image: Image): Image => ({\n  dimensions: image.dimensions,\n  frames: image.frames.map((f) => new Uint8Array(f)),\n});\n\nexport const getPixel = (args: {\n  image: Image;\n  frameIndex: number;\n  coord: Coord;\n}) =>\n  getPixelFromSource(\n    args.image.dimensions,\n    args.image.frames[args.frameIndex],\n    args.coord\n  );\n\nexport const setPixel = (args: {\n  image: Image;\n  frameIndex: number;\n  coord: Coord;\n  color: Color;\n}) => {\n  const idx = getImageIndex(\n    args.image.dimensions,\n    args.coord[0],\n    args.coord[1]\n  );\n  const frame = args.image.frames[args.frameIndex];\n  frame[idx] = args.color[0];\n  frame[idx + 1] = args.color[1];\n  frame[idx + 2] = args.color[2];\n  frame[idx + 3] = args.color[3];\n};\n\n/**\n * Calculate a value between v1 and v2, determined by percent.\n * @param percent Between 0 and 100. 0 is all v1, and 100 is all v2.\n */\nexport const weightedValue = (percent: number, v1: number, v2: number) =>\n  (1 - percent / 100) * v1 + (percent / 100) * v2;\n\n/**\n * Shifts the hue of the pixel towards a certain color, by a certain amount percentage\n * @param hue [0, 360)\n * @param amount [0, 100]\n */\nexport const shiftHue = (\n  [r, g, b, a]: Color,\n  hue: number,\n  amount: number\n): Color => {\n  const [, s, l] = convert.rgb.hsl([r, g, b]);\n  const [newR, newG, newB] = convert.hsl.rgb([\n    hue,\n    weightedValue(amount, s, 100),\n    l,\n  ]);\n  return [\n    weightedValue(amount, r, newR),\n    weightedValue(amount, g, newG),\n    weightedValue(amount, b, newB),\n    a,\n  ];\n};\n\n/**\n * Returns the angle in degrees (0 to 360) betwee the two coordinates\n */\nexport const calculateAngle = (c1: Coord, c2: Coord): number => {\n  const xRelCenter = c2[0] - c1[0];\n  const yRelCenter = c2[1] - c1[1];\n  return (360 + (Math.atan2(yRelCenter, xRelCenter) * 180) / Math.PI) % 360;\n};\n\n/**\n * Turn a hue value (0 - 360) into a Color\n */\nexport const colorFromHue = (hue: number): Color => [\n  ...convert.hsl.rgb([hue, 100, 50]),\n  255,\n];\n\nexport const adjustSaturation = (color: Color, amount: number): Color => {\n  const [r, g, b, a] = color;\n  const [h, s, l] = convert.rgb.hsl(r, g, b);\n  const newSat = weightedValue(Math.abs(amount), s, amount >= 0 ? 100 : 0);\n  const [newR, newG, newB] = convert.hsl.rgb([h, newSat, l]);\n  return [newR, newG, newB, a];\n};\n\n// Amount: -100 to 100\nexport const adjustBrightness = (color: Color, amount: number): Color => {\n  const d = (amount / 100) * 128;\n  const [r, g, b, a] = color;\n  return clampColor([r + d, g + d, b + d, a]);\n};\n\n// Amount: -100 to 100\nexport const adjustContrast = (color: Color, amount: number): Color => {\n  const d = amount / 100 + 1;\n  const [r, g, b, a] = color;\n  return clampColor([\n    d * (r - 128) + 128,\n    d * (g - 128) + 128,\n    d * (b - 128) + 128,\n    a,\n  ]);\n};\n\n/**\n * Returns number between 0 and 1, where 1 is the largest difference and 0 is no difference\n */\nexport const colorDiff = (c1: Color, c2: Color): number => {\n  // Red-mean color diff algorithm\n  // https://en.wikipedia.org/wiki/Color_difference\n  const deltaRed = c1[0] - c2[0];\n  const deltaBlue = c1[1] - c2[1];\n  const deltaGreen = c1[2] - c2[2];\n  const rSomething = (c1[0] + c2[0]) / 2;\n\n  const rComponent = (2 + rSomething / 256) * deltaRed * deltaRed;\n  const bComponent = (2 + (255 - rSomething) / 256) * deltaBlue * deltaBlue;\n  const gComponent = 4 * deltaGreen * deltaGreen;\n  // 765 = ~ difference between black and white pixels\n  return Math.sqrt(rComponent + bComponent + gComponent) / 765;\n};\n","// @ts-ignore\nimport getPixels from 'get-pixels';\n// @ts-ignore\nimport gifEncoder from 'gif-encoder';\nimport seedrandom from 'seedrandom';\nimport { Color, Dimensions, Image, ImageData, TransformInput } from './types';\nimport {\n  fromHexColor,\n  getPixelFromSource,\n  isTransparent,\n  randomColor,\n  toHexColor,\n} from './utils';\n\ninterface RunArgs {\n  inputDataUrl: string;\n  transformList: TransformInput<any>[];\n  fps: number;\n  onImageFinished: () => void;\n}\n\ninterface ImageResult {\n  gif: string;\n  width: number;\n  height: number;\n}\n\n// Returns a list of gif data URLs, for each transform\nexport const runTransforms = async ({\n  transformList,\n  inputDataUrl,\n  fps,\n  onImageFinished,\n}: RunArgs): Promise<ImageResult[]> => {\n  const random = seedrandom(inputDataUrl);\n\n  const originalImage = await readImage(inputDataUrl);\n\n  const results: ImageResult[] = [];\n  let currentImage = originalImage;\n\n  for (const transformInput of transformList) {\n    const result = transformInput.transform.fn({\n      image: currentImage,\n      parameters: transformInput.params,\n      random,\n    });\n\n    const transparentColor = getTransparentColor(result, random);\n\n    // Transform any of our transparent pixels to what our gif understands to be transparent\n    const image = encodeTransparency(result.frames, transparentColor);\n\n    const gif = await createGif(\n      result.dimensions,\n      image,\n      transparentColor,\n      fps\n    );\n\n    onImageFinished();\n\n    currentImage = result;\n    results.push({\n      gif,\n      width: result.dimensions[0],\n      height: result.dimensions[1],\n    });\n  }\n\n  return results;\n};\n\n/**\n * Each pixel in our image has an alpha channel, but gifs don't.\n * We transform each pixel that appears transparent to be a designated transparent color.\n */\nconst encodeTransparency = (\n  frames: ImageData[],\n  transparentColor: Color | undefined\n): ImageData[] => {\n  const image = frames.map((frame) => {\n    const img = new Uint8Array(frame.length);\n    for (let i = 0; i < frame.length; i += 4) {\n      if (transparentColor && frame[i + 3] < 128) {\n        // Anything more than halfway transparent is considered transparent\n        img[i] = transparentColor[0];\n        img[i + 1] = transparentColor[1];\n        img[i + 2] = transparentColor[2];\n        img[i + 3] = transparentColor[3];\n      } else {\n        img[i] = frame[i];\n        img[i + 1] = frame[i + 1];\n        img[i + 2] = frame[i + 2];\n        img[i + 3] = 255; // Gifs don't do transparency, I dunno why they take in an alpha value...\n      }\n    }\n    return img;\n  });\n\n  return image;\n};\n\nconst createGif = async (\n  dimensions: Dimensions,\n  frames: ImageData[],\n  transparentColor: Color | undefined,\n  fps: number\n): Promise<string> =>\n  new Promise<string>((resolve) => {\n    const [width, height] = dimensions;\n    const gif = new gifEncoder(width, height);\n\n    gif.setFrameRate(fps);\n    gif.setRepeat(0); // Loop indefinitely\n    if (transparentColor) {\n      // Need to convert '#RRGGBB' to '0xRRGGBB'\n      const hexColor = toHexColor(transparentColor).slice(1);\n      gif.setTransparent(`0x${hexColor}`);\n    }\n\n    // gif.setQuality(10);\n    gif.writeHeader();\n\n    let data: any[] = [];\n    gif.on('data', (chunk: any) => {\n      data.push(chunk);\n    });\n    gif.on('end', () => {\n      const dataUrl = URL.createObjectURL(\n        new Blob(data, { type: 'image/gif' })\n      );\n      resolve(dataUrl);\n    });\n\n    frames.forEach((f) => {\n      gif.addFrame(f);\n    });\n\n    gif.finish();\n  });\n\nexport const readImage = (dataUrl: string): Promise<Image> =>\n  new Promise<Image>((res, rej) =>\n    getPixels(\n      dataUrl,\n      (err: Error, results: { shape: number[]; data: ImageData }) => {\n        if (err) {\n          return rej(err);\n        }\n\n        if (results.shape.length === 3) {\n          // Single frame\n          return res({\n            frames: [Uint8Array.from(results.data)],\n            dimensions: [results.shape[0], results.shape[1]],\n          });\n        }\n\n        // Multiple frames, need to slice up the image data into numFrames slices\n        const [numFrames, width, height] = results.shape;\n        const sliceSize = width * height * 4;\n        const frames: Uint8Array[] = [];\n        for (let i = 0; i < numFrames; i += 1) {\n          frames.push(\n            results.data.subarray(i * sliceSize, (i + 1) * sliceSize)\n          );\n        }\n        return res({\n          frames,\n          dimensions: [width, height],\n        });\n      }\n    )\n  );\n\nconst getTransparentColor = (\n  image: Image,\n  random: seedrandom.prng\n): Color | undefined => {\n  let hasTransparent = false;\n  const seenPixels = new Set<string>();\n  const [width, height] = image.dimensions;\n  let attempt = toHexColor([0, 255, 0, 255]); // Just start with green for now, since it's a likely candidate\n  image.frames.forEach((frame) => {\n    for (let y = 0; y < height; y += 1) {\n      for (let x = 0; x < width; x += 1) {\n        const px = getPixelFromSource(image.dimensions, frame, [x, y]);\n        if (isTransparent(px)) {\n          hasTransparent = true;\n        } else {\n          const hex = toHexColor(px);\n          seenPixels.add(hex);\n          if (hex === attempt) {\n            // Uh oh, can't use our current pick for transparent because it exists in the image already\n            attempt = findRandomColorNotInSet(random, seenPixels);\n          }\n        }\n      }\n    }\n  });\n  return hasTransparent ? fromHexColor(attempt) : undefined;\n};\n\nconst findRandomColorNotInSet = (\n  random: seedrandom.prng,\n  set: Set<string>,\n  attempts = 0\n): string => {\n  const col = toHexColor(randomColor(random));\n  if (attempts > 2000) {\n    // Just give up in order to prevent a stack overflow or something...\n    return col;\n  }\n  return set.has(col)\n    ? findRandomColorNotInSet(random, set, attempts + 1)\n    : col;\n};\n","import { Icon, Tooltip } from '@material-ui/core';\nimport React from 'react';\n\ninterface TooltipProps {\n  description?: string;\n}\n\nexport const HelpTooltip: React.FC<TooltipProps> = ({ description }) =>\n  description ? (\n    <Tooltip title={description}>\n      <Icon fontSize=\"small\" color=\"action\">\n        help\n      </Icon>\n    </Tooltip>\n  ) : null;\n","import { Slider, Stack, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { HelpTooltip } from '../components/HelpTooltip';\nimport { ParamFunction, ParamValue } from '../domain/types';\n\nconst SliderParam: React.FC<{\n  name: string;\n  min: number;\n  max: number;\n  step?: number;\n  value?: number;\n  description?: string;\n  onChange: (v: ParamValue<number>) => void;\n}> = ({ name, value, min, max, step, description, onChange }) => {\n  return (\n    <Stack spacing={1}>\n      <Stack direction=\"row\" spacing={1}>\n        <Typography variant=\"body2\">{name}</Typography>\n        <HelpTooltip description={description} />\n      </Stack>\n      <Stack\n        direction=\"row\"\n        spacing={2}\n        sx={{ paddingLeft: '8px', paddingRight: '8px' }}\n      >\n        <Slider\n          aria-label={name}\n          value={value}\n          step={step}\n          valueLabelDisplay=\"off\"\n          getAriaValueText={(x) => x.toString()}\n          min={min}\n          max={max}\n          onChange={(e, value) =>\n            onChange({ valid: true, value: value as number })\n          }\n        />\n        <Typography variant=\"body2\">{value}</Typography>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport function sliderParam(args: {\n  name: string;\n  min: number;\n  max: number;\n  step?: number;\n  defaultValue?: number;\n  description?: string;\n}): ParamFunction<number> {\n  return {\n    name: args.name,\n    defaultValue:\n      args.defaultValue !== undefined\n        ? { valid: true, value: args.defaultValue }\n        : { valid: false },\n    fn: (params) => {\n      return (\n        <SliderParam\n          name={args.name}\n          value={params.value.valid ? params.value.value : undefined}\n          onChange={params.onChange}\n          min={args.min}\n          max={args.max}\n          step={args.step}\n          description={args.description}\n        />\n      );\n    },\n  };\n}\n","import seedrandom from 'seedrandom';\n\n/**\n * [R, G, B, A] in values 0 - 255 inclusive\n */\nexport type Color = [number, number, number, number];\n\n/**\n * [x, y]\n */\nexport type Coord = [number, number];\n\n/**\n * [width, height]\n */\nexport type Dimensions = [number, number];\n\n/**\n * A one-dimensional array of pixels.\n * A 3x2 image would contain 24 (6*4) numbers, and would look like this:\n *  [\n *    r1,g1,b1,a1, r2,g2,b2,a2, r3,g3,b3,a3,\n *    r4,g4,b4,a4, r5,g5,b5,a5, r6,g6,b6,a6\n *  ]\n *\n * [0, 0] = index 0\n * [1, 0] = index 4\n * [2, 0] = index 8\n * [0, 1] = index 12\n * [1, 1] = index 16\n * [2, 1] = index 20\n * To get pixel [x, y], do (x + y * width) * 4\n */\nexport type ImageData = Uint8Array;\n\n/**\n * The results of get-pixels processImage()\n */\nexport interface Image {\n  dimensions: Dimensions;\n  frames: ImageData[];\n}\n\nexport type Random = seedrandom.prng;\n\nexport interface TransformFnOpts<Params> {\n  /**\n   * The image we're trying to transform\n   */\n  image: Image;\n\n  /**\n   * Use to generate \"random\" numbers. It's seeded, so that subsequent calls will yield the same value on the same image.\n   */\n  random: Random;\n\n  /**\n   * User-passed in parameters.\n   */\n  parameters: Params;\n}\n\nexport type ParamValue<T> = { valid: true; value: T } | { valid: false };\n\nexport interface Parameter<T> {\n  name: string;\n  defaultValue: T;\n  ele: JSX.Element;\n}\n\nexport interface Params<T> {\n  value: ParamValue<T>;\n  onChange: (v: ParamValue<T>) => void;\n}\n\nexport type ParamFunction<T = any> = {\n  name: string;\n  defaultValue: ParamValue<T>;\n  fn: (params: Params<T>) => JSX.Element;\n};\n\nexport type TransformFn<Params> = (opts: TransformFnOpts<Params>) => Image;\n\ntype ParamType<Type> = Type extends ParamFunction<infer X> ? X : never;\n\nexport interface Transform<T extends readonly ParamFunction<any>[]> {\n  name: string;\n  params: T;\n  description?: string;\n  fn: TransformFn<{ [P in keyof T]: ParamType<T[P]> }>;\n}\n\nexport interface TransformWithParams<T extends readonly ParamFunction<any>[]> {\n  transformName: string;\n  paramsValues: ParamValue<T>[];\n}\n\nexport interface TransformInput<T extends ParamFunction<any>[]> {\n  transform: Transform<T>;\n  params: T;\n}\n\nexport const buildTransform = <T extends readonly ParamFunction<any>[]>(args: {\n  name: string;\n  params: T;\n  description?: string;\n  fn: TransformFn<{ [P in keyof T]: ParamType<T[P]> }>;\n}): Transform<T> => ({\n  name: args.name,\n  params: args.params,\n  description: args.description,\n  fn: args.fn,\n});\n\nexport interface AppState {\n  baseImage?: string;\n  transforms: {\n    transformName: string;\n    paramsValues: ParamValue<any>[];\n    computedImage?: string;\n  }[];\n  fps: number;\n  dirty: boolean;\n}\n","import {\n  FormControl,\n  FormHelperText,\n  Stack,\n  TextField,\n  Typography,\n} from '@material-ui/core';\nimport React from 'react';\nimport { HelpTooltip } from '../components/HelpTooltip';\nimport { ParamFunction, ParamValue } from '../domain/types';\n\ntype ParsedParam<T> =\n  | { valid: true; value: T }\n  | { valid: false; reason: string };\n\nconst IntParam: React.FC<{\n  name: string;\n  value?: number;\n  description?: string;\n  parse: (s: string) => ParsedParam<number>;\n  onChange: (v: ParamValue<number>) => void;\n}> = ({ name, value, description, parse, onChange }) => {\n  const [val, setVal] = React.useState(\n    value === undefined ? undefined : value.toString()\n  );\n  const [invalidText, setInvalidText] = React.useState('');\n\n  const onBlur = () => {\n    if (val === undefined) {\n      // Only if no default value provided and no changes have happened\n      return;\n    }\n\n    if (value && val === value.toString()) {\n      return; // Don't fire an onChange event if things haven't changed\n    }\n    const n = parse(val);\n    if (n.valid) {\n      setInvalidText('');\n    } else {\n      setInvalidText(n.reason);\n    }\n    onChange(n);\n  };\n\n  return (\n    <Stack spacing={1}>\n      <Stack direction=\"row\" spacing={1}>\n        <Typography variant=\"body2\">{name}</Typography>\n        <HelpTooltip description={description} />\n      </Stack>\n      <FormControl>\n        <TextField\n          error={!!invalidText}\n          value={val}\n          onBlur={onBlur}\n          onChange={(e) => {\n            setVal(e.target.value);\n          }}\n        />\n        {invalidText && <FormHelperText>{invalidText}</FormHelperText>}\n      </FormControl>\n    </Stack>\n  );\n};\n\nexport const intParam = (args: {\n  name: string;\n  defaultValue?: number;\n  min?: number;\n  max?: number;\n  description?: string;\n}): ParamFunction<number> => ({\n  name: args.name,\n  defaultValue:\n    args.defaultValue !== undefined\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n  fn: (params) => {\n    const { min, max } = args;\n    const parse = (s: string): ParsedParam<number> => {\n      const n = parseInt(s, 10);\n      if (isNaN(n) || n.toString() !== s) {\n        return { valid: false, reason: 'Must be an integer' };\n      }\n      if (min !== undefined && n < min) {\n        return {\n          valid: false,\n          reason: `Must be greater than or equal to ${min}`,\n        };\n      }\n      if (max !== undefined && n > max) {\n        return { valid: false, reason: `Must be less than or equal to ${max}` };\n      }\n      return { valid: true, value: n };\n    };\n\n    return (\n      <IntParam\n        name={args.name}\n        description={args.description}\n        parse={parse}\n        onChange={params.onChange}\n        value={params.value.valid ? params.value.value : undefined}\n      />\n    );\n  },\n});\n","import { range } from 'remeda';\nimport { buildTransform, Image } from '../domain/types';\nimport {\n  adjustBrightness,\n  adjustContrast,\n  adjustSaturation,\n  getPixelFromSource,\n  mapCoords,\n  mapFrames,\n  scaleImage,\n} from '../domain/utils';\nimport { intParam } from '../params/intParam';\nimport { sliderParam } from '../params/sliderParam';\n\nexport const adjustImage = buildTransform({\n  name: 'Adjust Image',\n  description: 'Leave a parameter at 0 if you want to not change it',\n  params: [\n    sliderParam({\n      name: 'Number of Frames',\n      description:\n        'Set how many frames of animation there will be. Leave at 0 to not change the current frame count.',\n      defaultValue: 0,\n      min: 0,\n      max: 60,\n    }),\n    intParam({\n      name: 'Width',\n      description:\n        'Leave at 0 to not change the width. If height is changed, the image will keep the same aspect ratio.',\n      defaultValue: 0,\n      min: 0,\n    }),\n    intParam({\n      name: 'Height',\n      description:\n        'Leave at 0 to not change the height. If width is changed, the image will keep the same aspect ratio.',\n      defaultValue: 0,\n      min: 0,\n    }),\n    sliderParam({\n      name: 'Brightness',\n      min: -100,\n      max: 100,\n      step: 5,\n      defaultValue: 0,\n    }),\n    sliderParam({\n      name: 'Contrast',\n      min: -100,\n      max: 100,\n      step: 5,\n      defaultValue: 0,\n    }),\n    sliderParam({\n      name: 'Saturation',\n      min: -100,\n      max: 100,\n      step: 5,\n      defaultValue: 0,\n    }),\n  ] as const,\n  fn: ({\n    image,\n    parameters: [\n      frameCount,\n      resizeToWidth,\n      resizeToHeight,\n      brightness,\n      contrast,\n      saturation,\n    ],\n  }) => {\n    const hasFrameCount = frameCount !== 0;\n\n    const [oldWidth, oldHeight] = image.dimensions;\n\n    const hasScaleChange = resizeToWidth > 0 || resizeToHeight > 0;\n\n    // If we're changing one of width/height, then we'll scale the other one to match the same aspect ratio.\n    const newWidth =\n      hasScaleChange && resizeToWidth === 0\n        ? Math.ceil((oldWidth / oldHeight) * resizeToHeight)\n        : resizeToWidth;\n    const newHeight =\n      hasScaleChange && resizeToHeight === 0\n        ? Math.ceil((oldHeight / oldWidth) * resizeToWidth)\n        : resizeToHeight;\n\n    console.log({ oldWidth, oldHeight, newWidth, newHeight });\n\n    // Use this to figure out when we should optimally resize the image\n    const isBiggerImage = newWidth * newHeight > oldWidth * oldHeight;\n\n    let currImage = image;\n\n    if (hasFrameCount && frameCount < image.frames.length) {\n      // Reducing the number of frames, so do that first so we have fewer pixels to change\n      currImage = setFrameCount(currImage, frameCount);\n    }\n\n    // If making a smaller image, might as well do the brightness/contrast after making it smaller\n    if (hasScaleChange && !isBiggerImage) {\n      currImage = scaleImage({\n        image: currImage,\n        newWidth,\n        newHeight,\n      });\n    }\n\n    currImage = mapFrames(currImage, (imageData) =>\n      mapCoords(currImage.dimensions, (coord) => {\n        let currColor = getPixelFromSource(\n          currImage.dimensions,\n          imageData,\n          coord\n        );\n\n        if (brightness !== 0) {\n          currColor = adjustBrightness(currColor, brightness);\n        }\n\n        if (contrast !== 0) {\n          currColor = adjustContrast(currColor, contrast);\n        }\n\n        if (saturation !== 0) {\n          currColor = adjustSaturation(currColor, saturation);\n        }\n\n        return currColor;\n      })\n    );\n\n    // If the image will be made bigger, we'll run that after adjusting the brightness/contrast\n    if (hasScaleChange && isBiggerImage) {\n      currImage = scaleImage({ image: currImage, newWidth, newHeight });\n    }\n\n    // Finally change the number of frames if we're adding frames\n    if (hasFrameCount && frameCount > image.frames.length) {\n      currImage = setFrameCount(currImage, frameCount);\n    }\n\n    return currImage;\n  },\n});\n\nconst setFrameCount = (image: Image, frameCount: number): Image => {\n  const currentFrames = image.frames;\n\n  // Resulting image will contain frameCount frames.\n  // If the original image had less than that, then we'll copy the last frame until we have enough.\n  // If the original has more frames, then we'll discard the last ones.\n  return {\n    dimensions: image.dimensions,\n    frames: range(0, frameCount).map((i) =>\n      currentFrames[i]\n        ? currentFrames[i]\n        : currentFrames[currentFrames.length - 1]\n    ),\n  };\n};\n","import {\n  Box,\n  Button,\n  ClickAwayListener,\n  Collapse,\n  Icon,\n  Stack,\n} from '@material-ui/core';\nimport React from 'react';\n\ninterface ExpandableProps {\n  mainEle: JSX.Element;\n}\n\nexport const Expandable: React.FC<ExpandableProps> = ({\n  mainEle,\n  children,\n}) => {\n  const [collapsed, setCollapsed] = React.useState(true);\n\n  return (\n    <ClickAwayListener onClickAway={() => setCollapsed(true)}>\n      <Box>\n        <Button\n          onClick={() => setCollapsed(!collapsed)}\n          style={{ textTransform: 'none', color: 'black' }}\n        >\n          <Stack direction=\"row\" spacing={4}>\n            <div>{mainEle}</div>\n            <Icon>{collapsed ? 'expand_less' : 'expand_more'}</Icon>\n          </Stack>\n        </Button>\n        <Collapse in={!collapsed}>{children}</Collapse>\n      </Box>\n    </ClickAwayListener>\n  );\n};\n","import { Stack, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { SketchPicker } from 'react-color';\nimport { Expandable } from '../components/Expandable';\nimport { HelpTooltip } from '../components/HelpTooltip';\nimport { Color, ParamFunction, ParamValue } from '../domain/types';\nimport { fromHexColor, toHexColor } from '../domain/utils';\n\nconst ColorBox: React.FC<{ color: Color }> = ({ color }) => (\n  <div\n    style={{\n      width: '1.5em',\n      height: '1.5em',\n      backgroundColor: toHexColor(color),\n    }}\n  />\n);\n\nconst ColorPickerParam: React.FC<{\n  name: string;\n  value?: Color;\n  description?: string;\n  onChange: (v: ParamValue<Color>) => void;\n}> = ({ name, value, description, onChange }) => {\n  return (\n    <Expandable\n      mainEle={\n        <Stack direction=\"row\" spacing={4}>\n          <Typography variant=\"body2\">{name}</Typography>\n          <HelpTooltip description={description} />\n          {value && <ColorBox color={value} />}\n        </Stack>\n      }\n    >\n      <SketchPicker\n        disableAlpha={true}\n        presetColors={[]}\n        color={value ? toHexColor(value) : undefined}\n        onChangeComplete={(c) =>\n          onChange({ valid: true, value: fromHexColor(c.hex) })\n        }\n      />\n    </Expandable>\n  );\n};\n\nexport function colorPickerParam(args: {\n  name: string;\n  defaultValue?: Color;\n  description?: string;\n}): ParamFunction<Color> {\n  return {\n    name: args.name,\n    defaultValue: args.defaultValue\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n    fn: (params) => {\n      return (\n        <ColorPickerParam\n          name={args.name}\n          value={params.value.valid ? params.value.value : undefined}\n          onChange={params.onChange}\n          description={args.description}\n        />\n      );\n    },\n  };\n}\n","import { buildTransform } from '../domain/types';\nimport { fromHexColor, isTransparent, mapImage } from '../domain/utils';\nimport { colorPickerParam } from '../params/colorPickerParam';\n\nexport const backgroundColor = buildTransform({\n  name: 'Background Color',\n  description: 'Change all transparent pixles to the given color',\n  params: [\n    colorPickerParam({\n      name: 'Color',\n      defaultValue: fromHexColor('#000000'),\n    }),\n  ] as const,\n  fn: mapImage(({ coord, getSrcPixel, parameters }) => {\n    const [color] = parameters;\n    const p = getSrcPixel(coord);\n    return isTransparent(p) ? color : p;\n  }),\n});\n","import { Button, Icon, Stack } from '@material-ui/core';\nimport React from 'react';\n\ninterface ImagePickerProps {\n  currentImageUrl?: string;\n  name?: string;\n  width?: number;\n  height?: number;\n  onChange: (imageUrl: string) => void;\n}\n\nexport const ImagePicker: React.FC<ImagePickerProps> = ({\n  currentImageUrl,\n  name,\n  onChange,\n}) => (\n  <Stack spacing={4}>\n    <Button\n      startIcon={<Icon>image</Icon>}\n      sx={{ maxWidth: '300px' }}\n      variant=\"contained\"\n      component=\"label\"\n    >\n      {name}\n      <input\n        type=\"file\"\n        hidden\n        accept=\"image/png,image/jpg,image/gif\"\n        name=\"source-png\"\n        onChange={async (event) => {\n          const files = Array.from(event.target.files ?? []);\n          const file = files[0];\n          if (file) {\n            // Will be undefined if user clicked the cancel button\n            const baseImage = await readFile(file);\n            onChange(baseImage);\n          }\n        }}\n      />\n    </Button>\n    {currentImageUrl && (\n      <img\n        style={{ maxWidth: '300px', maxHeight: 'auto' }}\n        src={currentImageUrl}\n        alt=\"Source\"\n      ></img>\n    )}\n  </Stack>\n);\n\nconst readFile = (file: File) =>\n  new Promise<string>((resolve) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result as string);\n    reader.readAsDataURL(file);\n  });\n","import {\n  FormControl,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Stack,\n  Typography,\n} from '@material-ui/core';\nimport React from 'react';\nimport { HelpTooltip } from '../components/HelpTooltip';\nimport { ParamFunction, ParamValue } from '../domain/types';\n\nconst RadioParam: React.FC<{\n  name: string;\n  options: readonly { name: string; value: any }[];\n  value?: any;\n  description?: string;\n  onChange: (v: ParamValue<any>) => void;\n}> = ({ name, options, value, description, onChange }) => {\n  return (\n    <Stack spacing={1}>\n      <Stack direction=\"row\" spacing={1}>\n        <Typography variant=\"body2\">{name}</Typography>\n        <HelpTooltip description={description} />\n      </Stack>\n      <FormControl component=\"fieldset\">\n        <RadioGroup\n          aria-label={name}\n          defaultValue={value}\n          onChange={(event) =>\n            onChange({ valid: true, value: event.target.value })\n          }\n        >\n          {options.map((t) => (\n            <FormControlLabel\n              value={t.value}\n              control={<Radio />}\n              label={t.name}\n            />\n          ))}\n        </RadioGroup>\n      </FormControl>\n    </Stack>\n  );\n};\n\nexport function radioParam<T>(args: {\n  name: string;\n  options: readonly { name: string; value: T }[];\n  description?: string;\n  defaultValue?: T;\n}): ParamFunction<T> {\n  return {\n    name: args.name,\n    defaultValue: args.defaultValue\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n    fn: (params) => {\n      return (\n        <RadioParam\n          name={args.name}\n          value={params.value.valid ? params.value.value : undefined}\n          options={args.options}\n          description={args.description}\n          onChange={params.onChange}\n        />\n      );\n    },\n  };\n}\n","import { buildTransform } from '../domain/types';\nimport {\n  getPixel,\n  isTransparent,\n  mapCoords,\n  mapFrames,\n  resizeImage,\n} from '../domain/utils';\nimport { imagePickerParam } from '../params/imagePickerParam';\nimport { radioParam } from '../params/radioParam';\n\nexport const backgroundImage = buildTransform({\n  name: 'Background Image',\n  description: 'Select another image to be used as a background or foreground',\n  params: [\n    imagePickerParam({\n      name: 'Image',\n    }),\n    radioParam({\n      name: 'Type',\n      defaultValue: 'background',\n      options: [\n        {\n          name: 'Background',\n          value: 'background',\n        },\n        {\n          name: 'Foreground',\n          value: 'foreground',\n        },\n      ],\n    }),\n  ] as const,\n  fn: ({ image, parameters }) => {\n    const otherImage = resizeImage({\n      image: parameters[0].image,\n      newWidth: image.dimensions[0],\n      newHeight: image.dimensions[1],\n    });\n    const type = parameters[1];\n\n    return mapFrames(image, (data, frameIndex) => {\n      return mapCoords(image.dimensions, (coord) => {\n        const frameProgress = frameIndex / image.frames.length;\n        const otherImageFrame = Math.floor(\n          frameProgress * otherImage.frames.length\n        );\n        const otherImageSrc = getPixel({\n          image: otherImage,\n          frameIndex: otherImageFrame,\n          coord,\n        });\n\n        const src = getPixel({\n          image,\n          frameIndex,\n          coord,\n        });\n\n        if (type === 'background') {\n          // Only print the other image if the src image is transparent here\n          return isTransparent(src) ? otherImageSrc : src;\n        } else {\n          return isTransparent(otherImageSrc) ? src : otherImageSrc;\n        }\n      });\n    });\n  },\n});\n","import React from 'react';\nimport { ImagePicker } from '../components/ImagePicker';\nimport { readImage } from '../domain/run';\nimport { Image, ParamFunction } from '../domain/types';\n\ninterface ImagePickerParamsProps {\n  name: string;\n}\n\nexport function imagePickerParam({\n  name,\n}: ImagePickerParamsProps): ParamFunction<{ dataUrl: string; image: Image }> {\n  return {\n    name,\n    defaultValue: { valid: false },\n    fn: (params) => (\n      <ImagePicker\n        currentImageUrl={\n          params.value.valid ? params.value.value.dataUrl : undefined\n        }\n        name={name}\n        width={64}\n        height={64}\n        onChange={async (dataUrl) => {\n          const image = await readImage(dataUrl);\n          params.onChange({ valid: true, value: { dataUrl, image } });\n        }}\n      />\n    ),\n  };\n}\n","import { buildTransform } from '../domain/types';\nimport { mapImage } from '../domain/utils';\nimport { intParam } from '../params/intParam';\n\nexport const bounce = buildTransform({\n  name: 'Bounce',\n  description: 'Make the image bounce up and down',\n  params: [\n    intParam({\n      name: 'Bounce Speed',\n      description: 'Positive number',\n      defaultValue: 5,\n      min: 0,\n    }),\n  ] as const,\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel, parameters }) => {\n    const [x, y] = coord;\n    const yOffset =\n      y +\n      Math.round(\n        parameters[0] * Math.sin((frameIndex / frameCount) * 2 * Math.PI)\n      );\n\n    return getSrcPixel([x, yOffset]);\n  }),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage } from '../domain/utils';\nimport { intParam } from '../params/intParam';\n\nexport const circle = buildTransform({\n  name: 'Circle',\n  description: 'Make the image move in a circular pattern',\n  params: [\n    intParam({\n      name: 'Radius',\n      description: 'Positive number',\n      defaultValue: 10,\n      min: 0,\n    }),\n  ] as const,\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel, parameters }) => {\n    const [radius] = parameters;\n    const [x, y] = coord;\n    const xOffset = Math.round(\n      radius * Math.sin(-2 * Math.PI * (frameIndex / frameCount))\n    );\n    const yOffset = Math.round(\n      radius * Math.cos(-2 * Math.PI * (frameIndex / frameCount))\n    );\n    return getSrcPixel([x + xOffset, y + yOffset]);\n  }),\n});\n","import {\n  Button,\n  Icon,\n  IconButton,\n  Paper,\n  Stack,\n  Typography,\n} from '@material-ui/core';\nimport React from 'react';\nimport { HelpTooltip } from '../components/HelpTooltip';\nimport { ParamFunction, ParamValue } from '../domain/types';\n\ninterface VariableLengthProps<T> {\n  name: string;\n  newParamText: string;\n  createNewParam: () => ParamFunction<T>;\n  value?: T[];\n  description?: string;\n  onChange: (v: ParamValue<T>) => void;\n}\n\nconst VariableLengthParam: React.FC<VariableLengthProps<any>> = ({\n  name,\n  newParamText,\n  createNewParam,\n  value,\n  description,\n  onChange,\n}) => {\n  const [params, setParams] = React.useState<\n    { param: ParamFunction<any>; pValue: any }[]\n  >(\n    value === undefined\n      ? []\n      : value.map((v, idx) => ({ param: createNewParam(), pValue: v }))\n  );\n  return (\n    <Paper>\n      <Stack spacing={1}>\n        <Stack direction=\"row\" spacing={1}>\n          <Typography variant=\"body2\">{name}</Typography>\n          <HelpTooltip description={description} />\n        </Stack>\n        {params.map(({ param, pValue }, idx) => {\n          const ele = param.fn({\n            value: { valid: true, value: pValue },\n            onChange: (newValue) => {\n              if (newValue.valid) {\n                const p = params.map((oldP, i) => {\n                  if (idx === i) {\n                    return {\n                      param,\n                      pValue: newValue.value,\n                    };\n                  }\n                  return oldP;\n                });\n                setParams(p);\n                onChange({\n                  valid: true,\n                  value: p.map((n) => n.pValue),\n                });\n              }\n            },\n          });\n\n          return (\n            <Stack direction=\"row\" key={`${name}-${idx}`}>\n              <IconButton\n                onClick={() => {\n                  const newParams = params.filter((x, i) => i !== idx);\n                  setParams(newParams);\n                  onChange({\n                    valid: true,\n                    value: newParams.map((n) => n.pValue),\n                  });\n                }}\n              >\n                <Icon>delete</Icon>\n              </IconButton>\n              {ele}\n            </Stack>\n          );\n        })}\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            const p = createNewParam();\n            const newParams = [\n              ...params,\n              {\n                param: p,\n                pValue: p.defaultValue.valid ? p.defaultValue.value : undefined,\n              },\n            ];\n            setParams(newParams);\n            if (p.defaultValue.valid) {\n              onChange({\n                valid: true,\n                value: newParams.map((n) => n.pValue),\n              });\n            }\n          }}\n        >\n          {newParamText}\n        </Button>\n      </Stack>\n    </Paper>\n  );\n};\n\nexport function variableLengthParam<T>(args: {\n  name: string;\n  newParamText: string;\n  createNewParam: () => ParamFunction<T>;\n  description?: string;\n  defaultValue?: T[];\n}): ParamFunction<T[]> {\n  return {\n    name: args.name,\n    defaultValue: args.defaultValue\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n    fn: (params) => {\n      return (\n        <VariableLengthParam\n          name={args.name}\n          newParamText={args.newParamText}\n          value={params.value.valid ? params.value.value : undefined}\n          createNewParam={args.createNewParam}\n          description={args.description}\n          onChange={params.onChange}\n        />\n      );\n    },\n  };\n}\n","import { buildTransform } from '../domain/types';\nimport {\n  fromHexColor,\n  getAveragePixelValue,\n  isTransparent,\n  mapImage,\n} from '../domain/utils';\nimport { colorPickerParam } from '../params/colorPickerParam';\nimport { variableLengthParam } from '../params/variableLengthParam';\n\nconst DEFAULT_COLORS = [\n  '#FF8D8B',\n  '#FED689',\n  '#88FF89',\n  '#87FFFF',\n  '#8BB5FE',\n  '#D78CFF',\n  '#FF8CFF',\n  '#FF68F7',\n  '#FE6CB7',\n  '#FF6968',\n].map(fromHexColor);\n\nexport const colors = buildTransform({\n  name: 'Colors',\n  description: 'Make the image flash different colors',\n  params: [\n    variableLengthParam({\n      name: 'Colors',\n      newParamText: 'New Color',\n      defaultValue: DEFAULT_COLORS,\n      createNewParam: () =>\n        colorPickerParam({\n          name: 'Color',\n        }),\n    }),\n  ] as const,\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel, parameters }) => {\n    const srcPixel = getSrcPixel(coord);\n\n    const [colors] = parameters;\n\n    if (isTransparent(srcPixel)) {\n      return [0, 0, 0, 0];\n    }\n\n    const colorIdx = Math.floor((frameIndex / frameCount) * colors.length);\n    const chosenColor = colors[colorIdx];\n\n    const gray = getAveragePixelValue(srcPixel);\n\n    return [\n      (gray * chosenColor[0]) / 255,\n      (gray * chosenColor[1]) / 255,\n      (gray * chosenColor[2]) / 255,\n      255,\n    ];\n  }),\n});\n","import { buildTransform } from '../domain/types';\nimport { fromHexColor, isTransparent, mapImage } from '../domain/utils';\nimport { colorPickerParam } from '../params/colorPickerParam';\nimport { variableLengthParam } from '../params/variableLengthParam';\n\nconst DEFAULT_COLORS = [\n  '#FF8D8B',\n  '#FED689',\n  '#88FF89',\n  '#87FFFF',\n  '#8BB5FE',\n  '#D78CFF',\n  '#FF8CFF',\n  '#FF68F7',\n  '#FE6CB7',\n  '#FF6968',\n].map(fromHexColor);\n\nexport const colorsBackground = buildTransform({\n  name: 'Colors Background',\n  description: 'Transparent pixels will flash different colors',\n  params: [\n    variableLengthParam({\n      name: 'Colors',\n      newParamText: 'New Color',\n      defaultValue: DEFAULT_COLORS,\n      createNewParam: () =>\n        colorPickerParam({\n          name: 'Color',\n        }),\n    }),\n  ] as const,\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel, parameters }) => {\n    const srcPixel = getSrcPixel(coord);\n\n    const [colors] = parameters;\n\n    // Make the transparent parts colorful\n    if (isTransparent(srcPixel)) {\n      const colorIdx = Math.floor((frameIndex / frameCount) * colors.length);\n      return colors[colorIdx];\n    }\n\n    return srcPixel;\n  }),\n});\n","import {\n  FormControl,\n  FormHelperText,\n  Stack,\n  TextField,\n  Typography,\n} from '@material-ui/core';\nimport React from 'react';\nimport { HelpTooltip } from '../components/HelpTooltip';\nimport { ParamFunction, ParamValue } from '../domain/types';\n\ntype ParsedParam<T> =\n  | { valid: true; value: T }\n  | { valid: false; reason: string };\n\nconst FloatParam: React.FC<{\n  name: string;\n  value?: number;\n  description?: string;\n  parse: (s: string) => ParsedParam<number>;\n  onChange: (v: ParamValue<number>) => void;\n}> = ({ name, value, description, parse, onChange }) => {\n  const [val, setVal] = React.useState(\n    value === undefined ? undefined : value.toString()\n  );\n  const [invalidText, setInvalidText] = React.useState('');\n\n  const onBlur = () => {\n    if (val === undefined) {\n      // Only if no default value provided and no changes have happened\n      return;\n    }\n\n    if (value && val === value.toString()) {\n      return; // Don't fire an onChange event if things haven't changed\n    }\n    const n = parse(val);\n    if (n.valid) {\n      setInvalidText('');\n    } else {\n      setInvalidText(n.reason);\n    }\n    onChange(n);\n  };\n\n  return (\n    <Stack spacing={1}>\n      <Stack direction=\"row\" spacing={1}>\n        <Typography variant=\"body2\">{name}</Typography>\n        <HelpTooltip description={description} />\n      </Stack>\n      <FormControl>\n        <TextField\n          error={!!invalidText}\n          value={val}\n          onBlur={onBlur}\n          onChange={(e) => {\n            setVal(e.target.value);\n          }}\n        />\n        {invalidText && <FormHelperText>{invalidText}</FormHelperText>}\n      </FormControl>\n    </Stack>\n  );\n};\n\nexport const floatParam = (args: {\n  name: string;\n  defaultValue?: number;\n  min?: number;\n  max?: number;\n  description?: string;\n}): ParamFunction<number> => ({\n  name: args.name,\n  defaultValue:\n    args.defaultValue !== undefined\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n  fn: (params) => {\n    const { min, max } = args;\n    const parse = (s: string): ParsedParam<number> => {\n      const n = parseFloat(s);\n      if (isNaN(n) || n.toString() !== s) {\n        return { valid: false, reason: 'Must be a number' };\n      }\n      if (min !== undefined && n < min) {\n        return {\n          valid: false,\n          reason: `Must be greater than or equal to ${min}`,\n        };\n      }\n      if (max !== undefined && n > max) {\n        return { valid: false, reason: `Must be less than or equal to ${max}` };\n      }\n      return { valid: true, value: n };\n    };\n\n    return (\n      <FloatParam\n        name={args.name}\n        description={args.description}\n        parse={parse}\n        onChange={params.onChange}\n        value={params.value.valid ? params.value.value : undefined}\n      />\n    );\n  },\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage } from '../domain/utils';\nimport { floatParam } from '../params/floatParam';\n\nexport const doubleVision = buildTransform({\n  name: 'Double Vision',\n  description: 'See the image in double',\n  params: [\n    floatParam({ name: 'Amplitude', defaultValue: 10, min: 0 }),\n  ] as const,\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel, parameters }) => {\n    const [amplitude] = parameters;\n    const [x, y] = coord;\n    const dir = x % 2 === 0 ? -1 : 1;\n    const xOffset = Math.round(\n      dir * amplitude * Math.sin(-2 * Math.PI * (frameIndex / frameCount))\n    );\n    return getSrcPixel([x + xOffset, y]);\n  }),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage } from '../domain/utils';\nimport { intParam } from '../params/intParam';\n\nexport const expand = buildTransform({\n  name: 'Expand',\n  description: 'Make the image grow and shrink',\n  params: [\n    intParam({\n      name: 'Radius',\n      description: 'Positive number',\n      defaultValue: 10,\n      min: 0,\n    }),\n  ] as const,\n  fn: mapImage(\n    ({\n      dimensions,\n      coord,\n      frameCount,\n      frameIndex,\n      getSrcPixel,\n      parameters,\n    }) => {\n      const idx = frameIndex / frameCount;\n      const dist = Math.cos(idx * 2 * Math.PI) * parameters[0];\n\n      // Kind of follows the same algorithm as resize, except the amount is dynamic\n      const [width, height] = dimensions;\n      const centerX = width / 2;\n      const centerY = height / 2;\n\n      const [x, y] = coord;\n      const xRatio = (x - centerX) / width;\n      const yRatio = (y - centerY) / height;\n\n      const xOffset = Math.floor(dist * xRatio);\n      const yOffset = Math.round(dist * yRatio);\n      return getSrcPixel([x - xOffset, y - yOffset]);\n    }\n  ),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage } from '../domain/utils';\nimport { intParam } from '../params/intParam';\n\n// Probably still needs work -- the inner pixels get all funky still\nexport const fisheye = buildTransform({\n  name: 'Fisheye',\n  description: 'Make the image grow and shrink in a distorted fashion',\n  params: [\n    intParam({\n      name: 'Radius',\n      description: 'Positive Number',\n      defaultValue: 10,\n      min: 0,\n    }),\n  ] as const,\n  fn: mapImage(\n    ({\n      dimensions,\n      coord,\n      frameCount,\n      frameIndex,\n      getSrcPixel,\n      parameters,\n    }) => {\n      const idx = frameIndex / frameCount;\n      const expanding = idx < 0.5;\n      const [width, height] = dimensions;\n      const dist = (expanding ? idx : 1 - idx) * parameters[0];\n      const centerX = width / 2;\n      const centerY = height / 2;\n\n      const [x, y] = coord;\n      const angle = Math.atan2(centerY - y, centerX - x);\n\n      const xOffset = Math.round(dist * Math.cos(angle));\n      const yOffset = Math.round(dist * Math.sin(angle));\n      return getSrcPixel([x + xOffset, y + yOffset]);\n    }\n  ),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage, adjustSaturation } from '../domain/utils';\nimport { sliderParam } from '../params/sliderParam';\n\nconst MAX_GRID_SIZE = 64;\n\nexport const grid = buildTransform({\n  name: 'Grid',\n  description: 'Removes the color from all pixels not aligned with a grid',\n  params: [\n    sliderParam({\n      name: 'Grid Size',\n      description: 'The length of each square in the grid',\n      defaultValue: 24,\n      min: 2,\n      max: MAX_GRID_SIZE,\n      step: 2,\n    }),\n    sliderParam({\n      name: 'Grid Angle',\n      defaultValue: 45,\n      min: 0,\n      max: 90,\n    }),\n  ] as const,\n  fn: mapImage(\n    ({ coord, getSrcPixel, parameters: [gridSize, gridAngle], dimensions }) => {\n      const p = getSrcPixel(coord);\n      const [x, y] = coord;\n\n      let isOnGrid = false;\n      if (gridAngle % 90 === 0) {\n        // Vertical/Horizonal lines\n        isOnGrid = x % gridSize === 0 || y % gridSize === 0;\n      } else {\n        // Threshold should be between 0.13 and 0.03, smaller for larger grid sizes.\n        // Larger threshold = thicker lines.\n        const threshold =\n          ((MAX_GRID_SIZE - gridSize) / MAX_GRID_SIZE) * 0.1 + 0.03;\n\n        const onGrid = (angleDegrees: number) => {\n          const n = (1 / gridSize) * (y - Math.tan(toRad(angleDegrees)) * x);\n          return Math.abs(Math.round(n) - n) < threshold;\n        };\n\n        isOnGrid = onGrid(gridAngle) || onGrid(gridAngle + 90);\n      }\n\n      return isOnGrid ? p : adjustSaturation(p, -100);\n    }\n  ),\n});\n\nconst toRad = (degrees: number) => (degrees * Math.PI) / 180;\n","import { Stack, Typography } from '@material-ui/core';\nimport * as convert from 'color-convert';\nimport React from 'react';\nimport { HuePicker } from 'react-color';\nimport { HelpTooltip } from '../components/HelpTooltip';\nimport { ParamFunction, ParamValue } from '../domain/types';\nimport { toHexColor } from '../domain/utils';\n\nconst HuePickerParam: React.FC<{\n  name: string;\n  value?: number;\n  description?: string;\n  onChange: (v: ParamValue<number>) => void;\n}> = ({ name, value, description, onChange }) => {\n  const hexColor =\n    value === undefined\n      ? undefined\n      : toHexColor([...convert.hsl.rgb([value, 255, 255]), 255]);\n  return (\n    <Stack spacing={1}>\n      <Stack direction=\"row\" spacing={1}>\n        <Typography variant=\"body2\">{name}</Typography>\n        <HelpTooltip description={description} />\n      </Stack>\n      <HuePicker\n        color={hexColor}\n        onChangeComplete={({ hsl }) => onChange({ valid: true, value: hsl.h })}\n      />\n    </Stack>\n  );\n};\n\nexport function huePickerParam(args: {\n  name: string;\n  defaultValue?: number;\n  description?: string;\n}): ParamFunction<number> {\n  return {\n    name: args.name,\n    defaultValue: args.defaultValue\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n    fn: (params) => {\n      return (\n        <HuePickerParam\n          name={args.name}\n          value={params.value.valid ? params.value.value : undefined}\n          onChange={params.onChange}\n        />\n      );\n    },\n  };\n}\n","import { buildTransform } from '../domain/types';\nimport { mapImage, shiftHue } from '../domain/utils';\nimport { huePickerParam } from '../params/huePickerParam';\nimport { sliderParam } from '../params/sliderParam';\n\nexport const hueShift = buildTransform({\n  name: 'Hue Shift',\n  description: 'Shift the hue to some other color',\n  params: [\n    huePickerParam({\n      name: 'Hue',\n      defaultValue: 180,\n    }),\n    sliderParam({\n      name: 'Amount',\n      description: 'How strong the effect is.',\n      min: 0,\n      max: 100,\n      step: 5,\n      defaultValue: 75,\n    }),\n  ] as const,\n  fn: mapImage(({ coord, getSrcPixel, parameters: [newHue, amount] }) =>\n    shiftHue(getSrcPixel(coord), newHue, amount)\n  ),\n});\n","import { FormControl, Stack, TextField, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { HelpTooltip } from '../components/HelpTooltip';\nimport { ParamFunction, ParamValue } from '../domain/types';\n\nconst TextParam: React.FC<{\n  name: string;\n  value?: string;\n  description?: string;\n  onChange: (v: ParamValue<string>) => void;\n}> = ({ name, value, description, onChange }) => {\n  const [val, setVal] = React.useState(value);\n\n  return (\n    <Stack spacing={1}>\n      <Stack direction=\"row\" spacing={1}>\n        <Typography variant=\"body2\">{name}</Typography>\n        <HelpTooltip description={description} />\n      </Stack>\n      <FormControl>\n        <TextField\n          value={val}\n          onChange={(e) => setVal(e.target.value)}\n          onBlur={() =>\n            onChange(val ? { valid: true, value: val } : { valid: false })\n          }\n        />\n      </FormControl>\n    </Stack>\n  );\n};\n\nexport const textParam = (args: {\n  name: string;\n  description?: string;\n  defaultValue?: string;\n}): ParamFunction<string> => ({\n  name: args.name,\n  defaultValue:\n    args.defaultValue !== undefined\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n  fn: (params) => (\n    <TextParam\n      name={args.name}\n      description={args.description}\n      onChange={params.onChange}\n      value={params.value.valid ? params.value.value : undefined}\n    />\n  ),\n});\n","import { buildTransform } from '../domain/types';\nimport seedrandom from 'seedrandom';\n\nimport { Color } from '../domain/types';\nimport {\n  mapFrames,\n  mapCoords,\n  getPixelFromSource,\n  isTransparent,\n} from '../domain/utils';\nimport { textParam } from '../params/textParam';\n\nconst lightningIntensities: Color[] = [\n  [0, 15, 40, 255], // dark color\n  [150, 150, 175, 255],\n  [180, 180, 205, 255],\n  [210, 210, 235, 255],\n];\n\nexport const lightning = buildTransform({\n  name: 'Lightning',\n  description: 'Make the background look like a thunderstorm',\n  params: [\n    textParam({\n      name: 'Random Seed',\n      description:\n        'Can be anything. Will determine the randomness of the lightning.',\n      defaultValue: 'lightning',\n    }),\n  ] as const,\n  fn: ({ image, parameters }) => {\n    const random = seedrandom(parameters[0]);\n    return mapFrames(image, (data) => {\n      const i = random();\n      const flashIntensity = i < 0.9 ? 0 : i < 0.95 ? 1 : i < 0.98 ? 2 : 3;\n\n      return mapCoords(image.dimensions, (coord) => {\n        const src = getPixelFromSource(image.dimensions, data, coord);\n\n        if (isTransparent(src)) {\n          return lightningIntensities[flashIntensity];\n        }\n\n        if (flashIntensity > 0) {\n          // We're flashing, so brighten up the image a little\n          const icf = 1.02 * flashIntensity;\n          return [src[0] * icf, src[1] * icf, src[2] * icf, src[3]];\n        }\n\n        // No lightning\n        return src;\n      });\n    });\n  },\n});\n","import * as convert from 'color-convert';\nimport { buildTransform } from '../domain/types';\nimport { mapImage } from '../domain/utils';\n\nexport const nuke = buildTransform({\n  name: 'Nuke',\n  description: 'Oh no...',\n  params: [],\n  fn: mapImage(({ coord, getSrcPixel, frameCount, frameIndex }) => {\n    const threshold = (frameIndex / frameCount) * 255;\n    const [r, g, b, a] = getSrcPixel(coord);\n    const [h, s, l] = convert.rgb.hsl(r, g, b);\n    const [newR, newG, newB] = convert.hsl.rgb([h, s, l > threshold ? l : 0]);\n    return [newR, newG, newB, l > threshold ? a : 0];\n  }),\n});\n","import { buildTransform } from '../domain/types';\nimport {\n  colorFromHue,\n  isTransparent,\n  mapImage,\n  shiftHue,\n} from '../domain/utils';\nimport { radioParam } from '../params/radioParam';\nimport { sliderParam } from '../params/sliderParam';\n\nexport const party = buildTransform({\n  name: 'Party',\n  description: 'Party time!',\n  params: [\n    radioParam({\n      name: 'Type',\n      description: 'Whether to apply the party to the foreground or background',\n      defaultValue: 'background',\n      options: [\n        {\n          name: 'Background',\n          value: 'background',\n        },\n        {\n          name: 'Foreground',\n          value: 'foreground',\n        },\n      ],\n    }),\n    sliderParam({\n      name: 'Amount',\n      description: 'How strong the effect is',\n      min: 0,\n      max: 100,\n      step: 5,\n      defaultValue: 50,\n    }),\n    sliderParam({\n      name: 'Shift Speed',\n      description: 'Controls how quickly it shifts through the various colors',\n      min: 1,\n      max: 12,\n      defaultValue: 1,\n    }),\n  ] as const,\n  fn: mapImage(\n    ({\n      coord,\n      getSrcPixel,\n      frameCount,\n      frameIndex,\n      parameters: [type, amount, shiftSpeed],\n    }) => {\n      const srcPixel = getSrcPixel(coord);\n      const isBackground = isTransparent(srcPixel);\n\n      const newH = ((frameIndex / frameCount) * shiftSpeed * 360) % 360;\n\n      if (isBackground && type === 'background') {\n        return colorFromHue(newH);\n      }\n\n      if (!isBackground && type === 'foreground') {\n        return shiftHue(srcPixel, newH, amount);\n      }\n\n      return srcPixel;\n    }\n  ),\n});\n","import { buildTransform, Coord } from '../domain/types';\nimport {\n  mapImage,\n  isTransparent,\n  fromHexColor,\n  calculateAngle,\n} from '../domain/utils';\nimport { colorPickerParam } from '../params/colorPickerParam';\nimport { intParam } from '../params/intParam';\nimport { sliderParam } from '../params/sliderParam';\nimport { variableLengthParam } from '../params/variableLengthParam';\n\nconst DEFAULT_COLORS = [\n  '#FF0000',\n  '#FF9600',\n  '#FFFF00',\n  '#00FF00',\n  '#00FF96',\n  '#00FFFF',\n  '#0000FF',\n  '#B400FF',\n].map(fromHexColor);\n\nexport const pinwheel = buildTransform({\n  name: 'Pinwheel',\n  description: 'Create a pinwheel of colors',\n  params: [\n    sliderParam({\n      name: 'Group Count',\n      description: 'How many times each color is repeated',\n      defaultValue: 1,\n      min: 1,\n      max: 24,\n    }),\n    variableLengthParam({\n      name: 'Colors',\n      newParamText: 'New Color',\n      description: 'Colors for the pinwheel',\n      defaultValue: DEFAULT_COLORS,\n      createNewParam: () =>\n        colorPickerParam({\n          name: 'Color',\n        }),\n    }),\n    intParam({\n      name: 'Offset X',\n      description: 'Change the horizontal center of the pinwheel',\n      defaultValue: 0,\n    }),\n    intParam({\n      name: 'Offset Y',\n      description: 'Change the vertical center of the pinwheel',\n      defaultValue: 0,\n    }),\n  ] as const,\n  fn: mapImage(\n    ({\n      coord,\n      dimensions,\n      frameCount,\n      frameIndex,\n      getSrcPixel,\n      parameters: [groupCount, colors, offsetX, offsetY],\n    }) => {\n      const srcPixel = getSrcPixel(coord);\n\n      const ribbonCount = colors.length * groupCount;\n      const ribbonArcDegrees = Math.round(360 / ribbonCount);\n      // Need to make sure ribbonCount is always a multiple of the number of images, otherwise we\n      //  won't get a smooth transition.\n      // We'll cut off colors from the end of the list until we get an even multiple.\n      let colorsLength = colors.length;\n      while ((ribbonCount / colorsLength).toFixed(2).slice(-2) !== '00') {\n        colorsLength -= 1;\n      }\n\n      // Make the transparent parts colorful\n      if (isTransparent(srcPixel)) {\n        const center: Coord = [\n          dimensions[0] / 2 + offsetX,\n          dimensions[1] / 2 - offsetY,\n        ];\n        const pointAngle = calculateAngle(coord, center);\n\n        const colorIdx =\n          Math.floor(pointAngle / ribbonArcDegrees) % colorsLength;\n\n        // Increment colorIdx based on current frame progress\n        const frameProgress = frameIndex / frameCount;\n        const idx =\n          (Math.floor(frameProgress * colorsLength) + colorIdx) % colorsLength;\n        return colors[idx];\n      }\n\n      return srcPixel;\n    }\n  ),\n});\n","import { buildTransform, Coord } from '../domain/types';\nimport {\n  calculateAngle,\n  colorFromHue,\n  isTransparent,\n  mapImage,\n  shiftHue,\n} from '../domain/utils';\nimport { intParam } from '../params/intParam';\nimport { radioParam } from '../params/radioParam';\nimport { sliderParam } from '../params/sliderParam';\n\nexport const pinwheelParty = buildTransform({\n  name: 'Pinwheel Party',\n  description: 'Create a pinwheel of party colors',\n  params: [\n    sliderParam({\n      name: 'Group Count',\n      description: 'How many times each rainbow is repeated',\n      defaultValue: 1,\n      min: 1,\n      max: 24,\n    }),\n    radioParam({\n      name: 'Type',\n      description: 'Whether to apply the party to the foreground or background',\n      defaultValue: 'background',\n      options: [\n        {\n          name: 'Background',\n          value: 'background',\n        },\n        {\n          name: 'Foreground',\n          value: 'foreground',\n        },\n      ],\n    }),\n    sliderParam({\n      name: 'Amount',\n      description:\n        'How strong the effect is. Only applies when type = foreground.',\n      min: 0,\n      max: 100,\n      step: 5,\n      defaultValue: 75,\n    }),\n    intParam({\n      name: 'Offset X',\n      description: 'Change the horizontal center of the pinwheel',\n      defaultValue: 0,\n    }),\n    intParam({\n      name: 'Offset Y',\n      description: 'Change the vertical center of the pinwheel',\n      defaultValue: 0,\n    }),\n  ] as const,\n  fn: mapImage(\n    ({\n      coord,\n      dimensions,\n      frameCount,\n      frameIndex,\n      getSrcPixel,\n      parameters: [groupCount, type, amount, offsetX, offsetY],\n    }) => {\n      const srcPixel = getSrcPixel(coord);\n\n      const isBackground = isTransparent(srcPixel);\n\n      if (type === 'foreground' ? isBackground : !isBackground) {\n        return srcPixel;\n      }\n\n      const center: Coord = [\n        dimensions[0] / 2 + offsetX,\n        dimensions[1] / 2 - offsetY,\n      ];\n      const pointAngle = calculateAngle(coord, center);\n      const frameProgress = frameIndex / frameCount;\n      const newH = (pointAngle * groupCount + frameProgress * 360) % 360;\n\n      return isBackground\n        ? colorFromHue(newH)\n        : shiftHue(srcPixel, newH, amount);\n    }\n  ),\n});\n","import { range } from 'remeda';\n\nimport { buildTransform } from '../domain/types';\nimport {\n  isTransparent,\n  fromHexColor,\n  mapFrames,\n  mapCoords,\n  getPixelFromSource,\n} from '../domain/utils';\nimport { colorPickerParam } from '../params/colorPickerParam';\nimport { intParam } from '../params/intParam';\nimport { sliderParam } from '../params/sliderParam';\nimport { variableLengthParam } from '../params/variableLengthParam';\n\nconst DEFAULT_COLORS = [\n  '#FF0000',\n  '#FF9600',\n  '#FFFF00',\n  '#00FF00',\n  '#00FF96',\n  '#00FFFF',\n  '#0000FF',\n  '#B400FF',\n].map(fromHexColor);\n\nexport const radiance = buildTransform({\n  name: 'Radiance',\n  description: 'Radiate colors out in rings',\n  params: [\n    sliderParam({\n      name: 'Group Count',\n      description: 'How many times each color is repeated',\n      defaultValue: 1,\n      min: 1,\n      max: 24,\n    }),\n    variableLengthParam({\n      name: 'Colors',\n      newParamText: 'New Color',\n      description: 'The colors that make up each ring',\n      defaultValue: DEFAULT_COLORS,\n      createNewParam: () =>\n        colorPickerParam({\n          name: 'Color',\n        }),\n    }),\n    intParam({\n      name: 'Offset X',\n      description: 'Change the horizontal center of the radiance',\n      defaultValue: 0,\n    }),\n    intParam({\n      name: 'Offset Y',\n      description: 'Change the vertical center of the radiance',\n      defaultValue: 0,\n    }),\n  ] as const,\n  fn: ({ image, parameters: [groupCount, colors, offsetX, offsetY] }) => {\n    const colorList = range(0, groupCount).flatMap(() => colors);\n    const [width, height] = image.dimensions;\n    const centerX = width / 2;\n    const centerY = height / 2;\n\n    return mapFrames(image, (imageData, frameIndex, frameCount) =>\n      mapCoords(image.dimensions, (coord) => {\n        const srcPixel = getPixelFromSource(image.dimensions, imageData, coord);\n\n        // Make the transparent parts colorful\n        if (isTransparent(srcPixel)) {\n          const [x, y] = coord;\n          const xRelCenter = x - centerX - offsetX;\n          const yRelCenter = y - centerY + offsetY;\n\n          const maxDist = Math.sqrt(\n            (width / 2) * (width / 2) + (height / 2) * (height / 2)\n          );\n          const distFromCenter = Math.sqrt(\n            yRelCenter * yRelCenter + xRelCenter * xRelCenter\n          );\n\n          const colorIdx =\n            Math.floor((1 - distFromCenter / maxDist) * colorList.length) %\n            colorList.length;\n\n          // Increment colorIdx based on current frame progress\n          const frameProgress = frameIndex / frameCount;\n          const idx =\n            (Math.floor(frameProgress * colorList.length) + colorIdx) %\n            colorList.length;\n          return colorList[idx];\n        }\n\n        return srcPixel;\n      })\n    );\n  },\n});\n","import { buildTransform } from '../domain/types';\nimport {\n  colorFromHue,\n  getPixelFromSource,\n  isTransparent,\n  mapCoords,\n  mapFrames,\n  shiftHue,\n} from '../domain/utils';\nimport { intParam } from '../params/intParam';\nimport { radioParam } from '../params/radioParam';\nimport { sliderParam } from '../params/sliderParam';\n\nexport const radianceParty = buildTransform({\n  name: 'Radiance Party',\n  description: 'Radiate party colors out in rings',\n  params: [\n    sliderParam({\n      name: 'Group Count',\n      description: 'How many times each rainbow is repeated',\n      defaultValue: 1,\n      min: 1,\n      max: 24,\n    }),\n    radioParam({\n      name: 'Type',\n      description: 'Whether to apply the party to the foreground or background',\n      defaultValue: 'background',\n      options: [\n        {\n          name: 'Background',\n          value: 'background',\n        },\n        {\n          name: 'Foreground',\n          value: 'foreground',\n        },\n      ],\n    }),\n    sliderParam({\n      name: 'Amount',\n      description:\n        'How strong the effect is. Only applies when type = foreground.',\n      min: 0,\n      max: 100,\n      step: 5,\n      defaultValue: 75,\n    }),\n    intParam({\n      name: 'Offset X',\n      description: 'Change the horizontal center of the radiance',\n      defaultValue: 0,\n    }),\n    intParam({\n      name: 'Offset Y',\n      description: 'Change the vertical center of the radiance',\n      defaultValue: 0,\n    }),\n  ] as const,\n  fn: ({ image, parameters: [groupCount, type, amount, offsetX, offsetY] }) => {\n    const [width, height] = image.dimensions;\n    const centerX = width / 2;\n    const centerY = height / 2;\n\n    const maxDist = Math.sqrt(\n      (width / 2) * (width / 2) + (height / 2) * (height / 2)\n    );\n\n    return mapFrames(image, (imageData, frameIndex, frameCount) =>\n      mapCoords(image.dimensions, (coord) => {\n        const [x, y] = coord;\n        const src = getPixelFromSource(image.dimensions, imageData, coord);\n\n        const isBackground = isTransparent(src);\n\n        if (type === 'foreground' ? isBackground : !isBackground) {\n          return src;\n        }\n\n        const xRelCenter = x - centerX - offsetX;\n        const yRelCenter = y - centerY + offsetY;\n\n        const distFromCenter = Math.sqrt(\n          yRelCenter * yRelCenter + xRelCenter * xRelCenter\n        );\n\n        const frameProgress = frameIndex / frameCount;\n        const newH =\n          ((1 - distFromCenter / maxDist) * 360 * groupCount +\n            360 * frameProgress) %\n          360;\n\n        return isBackground ? colorFromHue(newH) : shiftHue(src, newH, amount);\n      })\n    );\n  },\n});\n","import { range } from 'remeda';\nimport { buildTransform } from '../domain/types';\nimport { sliderParam } from '../params/sliderParam';\n\nexport const repeatAnimation = buildTransform({\n  name: 'Repeat Animation',\n  description: 'Repeats the current animation some number of times',\n  params: [\n    sliderParam({\n      name: 'Number of Repeats',\n      defaultValue: 1,\n      min: 1,\n      max: 50,\n    }),\n  ] as const,\n  fn: ({ image, parameters: [numRepeats] }) => ({\n    dimensions: image.dimensions,\n    frames: range(0, image.frames.length * (numRepeats + 1)).map(\n      (i) => image.frames[i % image.frames.length]\n    ),\n  }),\n});\n","import { buildTransform } from '../domain/types';\nimport { resizeImage as resizeImageUtil } from '../domain/utils';\nimport { intParam } from '../params/intParam';\n\nexport const resizeImage = buildTransform({\n  name: 'Resize Image',\n  description:\n    'Change the dimensions of the image. ' +\n    'If bigger than original, the extra space will be transparent. ' +\n    'If smaller, the image will be cropped. ',\n  params: [\n    intParam({\n      name: 'Width',\n      description:\n        'Set to 0 when height is set to non-zero to keep the same aspect ratio',\n      defaultValue: 128,\n      min: 0,\n    }),\n    intParam({\n      name: 'Height',\n      description:\n        'Set to 0 when width is set to non-zero to keep the same aspect ratio',\n      defaultValue: 128,\n      min: 0,\n    }),\n  ] as const,\n  fn: ({ image, parameters: [resizeToWidth, resizeToHeight] }) => {\n    const [oldWidth, oldHeight] = image.dimensions;\n    const newWidth =\n      resizeToWidth === 0\n        ? Math.ceil((oldWidth / oldHeight) * resizeToHeight)\n        : resizeToWidth;\n    const newHeight =\n      resizeToHeight === 0\n        ? Math.ceil((oldHeight / oldWidth) * resizeToWidth)\n        : resizeToHeight;\n    return resizeImageUtil({\n      image,\n      newWidth,\n      newHeight,\n    });\n  },\n});\n","import { buildTransform } from '../domain/types';\nimport { mapFrames, mapCoords, getPixelFromSource } from '../domain/utils';\nimport { floatParam } from '../params/floatParam';\nimport { intParam } from '../params/intParam';\n\nexport const ripple = buildTransform({\n  name: 'Ripple',\n  description: 'Create a ripple effect, like water',\n  params: [\n    floatParam({\n      name: 'Amplitude',\n      defaultValue: 10,\n      description: 'How strong the ripple effect should be',\n    }),\n    intParam({\n      name: 'Period',\n      defaultValue: 2,\n      min: 0,\n      description: 'How many ripples you want. Positive number.',\n    }),\n  ] as const,\n  fn: ({ image, parameters }) =>\n    mapFrames(image, (data, frameIndex, frameCount) => {\n      const [amplitude, period] = parameters;\n\n      const height = image.dimensions[1];\n      const shift = (frameIndex / frameCount) * 2 * Math.PI;\n      return mapCoords(image.dimensions, ([x, y]) => {\n        const offset = Math.round(\n          amplitude * Math.sin((y / height) * period * Math.PI + shift)\n        );\n\n        return getPixelFromSource(image.dimensions, data, [x + offset, y]);\n      });\n    }),\n});\n","import { buildTransform, Coord } from '../domain/types';\nimport { mapImage } from '../domain/utils';\nimport { radioParam } from '../params/radioParam';\n\nexport const rotate = buildTransform({\n  name: 'Rotate',\n  description: 'Make the image rotate about the center point',\n  params: [\n    radioParam({\n      name: 'Direction',\n      defaultValue: -1,\n      options: [\n        { name: 'Clockwise', value: -1 },\n        { name: 'Counter-Clockwise', value: 1 },\n      ],\n    }),\n  ] as const,\n  fn: mapImage(\n    ({\n      dimensions,\n      coord,\n      frameCount,\n      frameIndex,\n      getSrcPixel,\n      parameters,\n    }) => {\n      const [sign] = parameters;\n      const centerX = dimensions[0] / 2;\n      const centerY = dimensions[1] / 2;\n      const [x, y] = coord;\n      const xRelCenter = x - centerX;\n      const yRelCenter = y - centerY;\n\n      const amount = (frameIndex / frameCount) * (sign || 1);\n      const cos = Math.cos(2 * Math.PI * amount);\n      const sin = Math.sin(2 * Math.PI * amount);\n\n      const newCoord: Coord = [\n        Math.round(centerX + xRelCenter * cos - yRelCenter * sin),\n        Math.round(centerY + yRelCenter * cos + xRelCenter * sin),\n      ];\n\n      return getSrcPixel(newCoord);\n    }\n  ),\n});\n","import { mapFrames, mapCoords, getPixelFromSource } from '../domain/utils';\nimport { buildTransform, Coord } from '../domain/types';\n\nexport const roxbury = buildTransform({\n  name: 'Roxbury',\n  description: \"Baby, don't hurt me\",\n  params: [],\n  fn: ({ image }) =>\n    mapFrames(image, (data, frameIndex, frameCount) => {\n      const idx = frameIndex / frameCount;\n      // 4 phases:\n      //  0 -> freeze\n      //  1 -> rotate clockwise\n      //  2 -> freeze\n      //  3 -> rotate counter-clockwise\n      const phase = Math.floor(idx * 4);\n      const phaseIdx = (idx - phase / 4) * 4;\n\n      const maxAngle = (Math.PI / 2) * 0.2; // 40% of 90 degrees\n\n      const angle =\n        phase === 0\n          ? 0\n          : phase === 1\n          ? phaseIdx * maxAngle // Rotate clockwise\n          : phase === 2\n          ? maxAngle // Freeze!\n          : (1 - phaseIdx) * maxAngle; // Rotate counter-clockwise\n\n      const cos = Math.cos(-angle * 1.35);\n      const sin = Math.sin(-angle * 1.35);\n\n      const rotatePointX = image.dimensions[0] * 0.25;\n      const rotatePointY = image.dimensions[1] * 0.7;\n\n      return mapCoords(image.dimensions, (coord) => {\n        const [x, y] = coord;\n        const xRelCenter = Math.floor(x - rotatePointX + 8 * Math.sin(angle));\n        const yRelCenter = Math.floor(y - rotatePointY + 8 * Math.cos(angle));\n\n        const newCoord: Coord = [\n          Math.round(rotatePointX + xRelCenter * cos - yRelCenter * sin),\n          Math.round(rotatePointY + yRelCenter * cos + xRelCenter * sin),\n        ];\n\n        return getPixelFromSource(image.dimensions, data, newCoord);\n      });\n    }),\n});\n","import { buildTransform } from '../domain/types';\nimport { mapImage } from '../domain/utils';\nimport { floatParam } from '../params/floatParam';\n\nexport const shake = buildTransform({\n  name: 'Shake',\n  description: 'Make the image shake back and forth',\n  params: [\n    floatParam({ name: 'Amplitude', defaultValue: 10, min: 0 }),\n  ] as const,\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel, parameters }) => {\n    const [amplitude] = parameters;\n    const [x, y] = coord;\n    const xOffset =\n      x +\n      Math.round(amplitude * Math.cos((frameIndex / frameCount) * 2 * Math.PI));\n\n    return getSrcPixel([xOffset, y]);\n  }),\n});\n","import { range } from 'remeda';\nimport { buildTransform } from '../domain/types';\nimport { getPixelFromSource, mapCoords } from '../domain/utils';\nimport { radioParam } from '../params/radioParam';\n\nexport const slowAnimation = buildTransform({\n  name: 'Slow Animation',\n  description: 'Attempts to slow the animation by adding intermediate frames',\n  params: [\n    radioParam({\n      name: 'Interpolation Type',\n      options: [\n        { name: 'Basic', value: 'basic' },\n        { name: 'Smooth', value: 'smooth' },\n      ],\n      defaultValue: 'basic',\n      description:\n        'With basic interpolation, frames are simply duplicated. ' +\n        'With smooth interpolation, intermediate frames are the average of their surrounding frames.',\n    }),\n  ],\n  fn: ({ image, parameters: [type] }) => ({\n    dimensions: image.dimensions,\n    frames: range(0, image.frames.length * 2 - 1).map((i) => {\n      // IE: if OF frame count = 4 (with indexes [0, 1, 2, 3])\n      // Result = [0, 0+1, 1, 1+2, 2, 2+3, 3], 3+4, 4]\n\n      // Even numbered frames are just the original frames\n      if (i % 2 === 0) {\n        return image.frames[i / 2];\n      }\n\n      const ogFrameIdx = (i - 1) / 2;\n\n      if (type === 'basic') {\n        // Intermediate frame is simply the previous OG frame\n        return image.frames[ogFrameIdx];\n      }\n\n      // Smooth interpolation means intermediate frames are an average of the surrounding frames\n      return mapCoords(image.dimensions, (coord) => {\n        const [r1, g1, b1, a1] = getPixelFromSource(\n          image.dimensions,\n          image.frames[ogFrameIdx],\n          coord\n        );\n        const [r2, g2, b2, a2] = getPixelFromSource(\n          image.dimensions,\n          image.frames[ogFrameIdx + 1],\n          coord\n        );\n        return [(r1 + r2) / 2, (g1 + g2) / 2, (b1 + b2) / 2, (a1 + a2) / 2];\n      });\n    }),\n  }),\n});\n","import { buildTransform } from '../domain/types';\nimport { isTransparent, mapImage } from '../domain/utils';\nimport { radioParam } from '../params/radioParam';\nimport { sliderParam } from '../params/sliderParam';\n\nexport const staticc = buildTransform({\n  name: 'Static',\n  description: 'Adds random static to the image',\n  params: [\n    radioParam({\n      name: 'Type',\n      description: 'Whether to apply the party to the foreground or background',\n      defaultValue: 'background',\n      options: [\n        {\n          name: 'Background',\n          value: 'background',\n        },\n        {\n          name: 'Foreground',\n          value: 'foreground',\n        },\n      ],\n    }),\n    sliderParam({\n      name: 'Strength',\n      description: 'Higher number increases the amount of static pixels',\n      defaultValue: 25,\n      min: 5,\n      max: 100,\n      step: 5,\n    }),\n  ],\n  fn: mapImage(\n    ({ coord, getSrcPixel, parameters: [type, strength], random }) => {\n      const src = getSrcPixel(coord);\n\n      const isBackground = isTransparent(src);\n\n      if (type === 'foreground' ? isBackground : !isBackground) {\n        return src;\n      }\n\n      if (isBackground && type === 'background') {\n        const inverse = Math.ceil(random() * 100) < strength;\n        const grey = Math.ceil(random() * 255);\n\n        return inverse ? [grey, grey, grey, 255] : src;\n      }\n\n      const isStatic = Math.ceil(random() * 100) < strength;\n      const grey = Math.ceil(random() * 255);\n\n      return isStatic ? [grey, grey, grey, src[3]] : src;\n    }\n  ),\n});\n","import { Checkbox, Stack, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { HelpTooltip } from '../components/HelpTooltip';\nimport { ParamFunction, ParamValue } from '../domain/types';\n\nconst CheckboxParam: React.FC<{\n  name: string;\n  value?: boolean;\n  description?: string;\n  onChange: (v: ParamValue<boolean>) => void;\n}> = ({ name, value, description, onChange }) => {\n  return (\n    <Stack spacing={1}>\n      <Stack direction=\"row\" spacing={1}>\n        <Typography variant=\"body2\" paddingTop=\"0.5rem\">\n          {name}\n        </Typography>\n        <span style={{ paddingTop: '0.5rem' }}>\n          <HelpTooltip description={description} />\n        </span>\n        <Checkbox\n          aria-label={name}\n          checked={value}\n          onChange={(e, value) => onChange({ valid: true, value })}\n        />\n      </Stack>\n    </Stack>\n  );\n};\n\nexport function checkboxParam(args: {\n  name: string;\n  defaultValue?: boolean;\n  description?: string;\n}): ParamFunction<boolean> {\n  return {\n    name: args.name,\n    defaultValue:\n      args.defaultValue !== undefined\n        ? { valid: true, value: args.defaultValue }\n        : { valid: false },\n    fn: (params) => {\n      return (\n        <CheckboxParam\n          name={args.name}\n          value={params.value.valid ? params.value.value : undefined}\n          onChange={params.onChange}\n          description={args.description}\n        />\n      );\n    },\n  };\n}\n","import { buildTransform } from '../domain/types';\nimport { fromHexColor, mapImage, colorDiff } from '../domain/utils';\nimport { checkboxParam } from '../params/checkboxParam';\nimport { colorPickerParam } from '../params/colorPickerParam';\nimport { sliderParam } from '../params/sliderParam';\n\nexport const transparency = buildTransform({\n  name: 'Transparency',\n  description: 'Set certain pixels to be transparent',\n  params: [\n    checkboxParam({\n      name: 'Matches are Transparent',\n      description:\n        'If checked, then pixels matching this color will be made transparent. If not checked, non-matching pixels are transparent.',\n      defaultValue: true,\n    }),\n    colorPickerParam({\n      name: 'Color',\n      defaultValue: fromHexColor('#000000'),\n    }),\n    sliderParam({\n      name: 'Tolerance',\n      description:\n        'A higher number will mean colors that are \"close\" to the chosen color will be transparent. (0 - 100)',\n      defaultValue: 10,\n      min: 0,\n      max: 100,\n      step: 5,\n    }),\n  ] as const,\n  fn: mapImage(\n    ({\n      coord,\n      getSrcPixel,\n      parameters: [matchesTransparent, selectedColor, tolerance],\n    }) => {\n      const src = getSrcPixel(coord);\n\n      const withinTolerance = colorDiff(src, selectedColor) * 100 <= tolerance;\n\n      if (matchesTransparent ? withinTolerance : !withinTolerance) {\n        return [src[0], src[1], src[2], 0];\n      }\n      return src;\n    }\n  ),\n});\n","import { ParamFunction, Transform } from '../domain/types';\nimport { assert } from '../domain/utils';\nimport { adjustImage } from './adjust-image';\nimport { backgroundColor } from './background-color';\nimport { backgroundImage } from './background-image';\nimport { bounce } from './bounce';\nimport { circle } from './circle';\nimport { colors } from './colors';\nimport { colorsBackground } from './colors-background';\nimport { doubleVision } from './double-vision';\nimport { expand } from './expand';\nimport { fisheye } from './fisheye';\nimport { grid } from './grid';\nimport { hueShift } from './hue-shift';\nimport { lightning } from './lightning';\nimport { nuke } from './nuke';\nimport { party } from './party';\nimport { pinwheel } from './pinwheel';\nimport { pinwheelParty } from './pinwheel-party';\nimport { radiance } from './radiance';\nimport { radianceParty } from './radiance-party';\nimport { repeatAnimation } from './repeat-animation';\nimport { resizeImage } from './resize-image';\nimport { ripple } from './ripple';\nimport { rotate } from './rotate';\nimport { roxbury } from './roxbury';\nimport { shake } from './shake';\nimport { slowAnimation } from './slow-animation';\nimport { staticc } from './static';\nimport { transparency } from './transparency';\nimport { transpose } from './transpose';\n\nexport const POSSIBLE_TRANSFORMS = [\n  adjustImage,\n  backgroundColor,\n  backgroundImage,\n  bounce,\n  circle,\n  colors,\n  colorsBackground,\n  doubleVision,\n  expand,\n  fisheye,\n  grid,\n  hueShift,\n  lightning,\n  nuke,\n  party,\n  pinwheel,\n  pinwheelParty,\n  radiance,\n  radianceParty,\n  repeatAnimation,\n  resizeImage,\n  ripple,\n  rotate,\n  roxbury,\n  shake,\n  slowAnimation,\n  staticc,\n  transparency,\n  transpose,\n].sort((x, y) => (x.name > y.name ? 1 : -1));\n\nexport const transformByName = (\n  name: string\n): Transform<readonly ParamFunction<any>[]> => {\n  const t = POSSIBLE_TRANSFORMS.find((t) => t.name === name);\n  assert(t, `Could not find matching transform: ${name}`);\n  return t as any as Transform<readonly ParamFunction<any>[]>;\n};\n","import { buildTransform } from '../domain/types';\nimport { mapImage } from '../domain/utils';\nimport { intParam } from '../params/intParam';\n\nexport const transpose = buildTransform({\n  name: 'Transpose',\n  description: 'Move the image left or right, up or down',\n  params: [\n    intParam({ name: 'X', defaultValue: 0 }),\n    intParam({ name: 'Y', defaultValue: 0 }),\n  ] as const,\n  fn: mapImage(({ coord, getSrcPixel, parameters }) => {\n    const [transX, transY] = parameters;\n    const [x, y] = coord;\n\n    return getSrcPixel([x + transX, y + transY]);\n  }),\n});\n","import {\n  Button,\n  CircularProgress,\n  Divider,\n  Grid,\n  Icon,\n  LinearProgress,\n  Stack,\n  Typography,\n} from '@material-ui/core';\nimport React from 'react';\nimport { runTransforms } from '../domain/run';\nimport { AppState, TransformInput } from '../domain/types';\nimport { assert } from '../domain/utils';\nimport { sliderParam } from '../params/sliderParam';\nimport { transformByName } from '../transforms';\n\ninterface ComputeBoxProps {\n  computeDisabled: boolean;\n  appState: AppState;\n  onFpsChange: (fps: number) => void;\n  onComputed: () => void;\n}\n\ntype ComputeState =\n  | {\n      loading: false;\n      results: { transformName: string; gif: string }[];\n      computeTime: number | undefined;\n    }\n  | { loading: true };\n\nconst DEFAULT_FPS = 20;\nconst fpsParam = sliderParam({\n  name: 'Frames per Second',\n  defaultValue: DEFAULT_FPS,\n  min: 1,\n  max: 60,\n});\n\nexport const ComputeBox: React.FC<ComputeBoxProps> = ({\n  computeDisabled,\n  appState,\n  onFpsChange,\n  onComputed,\n}) => {\n  const [computeState, setComputeState] = React.useState<ComputeState>({\n    loading: false,\n    results: [],\n    computeTime: undefined,\n  });\n  const [progress, setProgress] = React.useState<number | undefined>();\n\n  return (\n    <Stack spacing={1}>\n      <Typography variant=\"h5\">Create Gif</Typography>\n\n      <div style={{ maxWidth: '300px' }}>\n        {fpsParam.fn({\n          value: { valid: true, value: appState.fps },\n          onChange: (x) => {\n            if (x.valid) {\n              onFpsChange(x.value);\n            }\n          },\n        })}\n      </div>\n      <Button\n        variant=\"contained\"\n        sx={{ maxWidth: '300px' }}\n        endIcon={\n          !computeState.loading && appState.dirty ? (\n            <Icon>priority_high</Icon>\n          ) : undefined\n        }\n        disabled={computeDisabled}\n        onClick={async () => {\n          const transformInputs = appState.transforms.map(\n            (t): TransformInput<any> => ({\n              transform: transformByName(t.transformName),\n              params: t.paramsValues.map((p) => {\n                assert(p.valid, 'Got non-valid when compute box was clicked');\n                return p.value;\n              }),\n            })\n          );\n          setComputeState({ loading: true });\n          setTimeout(async () => {\n            try {\n              assert(\n                appState.baseImage,\n                'No source image, this button should be disabled!'\n              );\n              const start = Date.now();\n              let currIdx = 0;\n              setProgress(0);\n              const results = await runTransforms({\n                inputDataUrl: appState.baseImage,\n                transformList: transformInputs,\n                fps: appState.fps,\n                onImageFinished: () => {\n                  currIdx += 1;\n                  setProgress((currIdx / transformInputs.length) * 100);\n                },\n              });\n              const computeTime = Math.ceil((Date.now() - start) / 1000);\n              setComputeState({\n                loading: false,\n                computeTime,\n                results: results.map((result, idx) => ({\n                  transformName: appState.transforms[idx].transformName,\n                  gif: result.gif,\n                })),\n              });\n              setProgress(undefined);\n              onComputed();\n            } catch (err) {\n              console.error(err);\n              console.error((err as any).stack);\n            }\n          });\n        }}\n      >\n        {computeState.loading ? (\n          <CircularProgress color=\"inherit\" />\n        ) : (\n          'Compute'\n        )}\n      </Button>\n      {progress !== undefined && (\n        <LinearProgress variant=\"determinate\" value={progress} />\n      )}\n      {!computeState.loading && computeState.computeTime !== undefined && (\n        <>\n          <Divider />\n          <Typography variant=\"caption\">\n            Compute Time: {computeState.computeTime} second(s)\n          </Typography>\n        </>\n      )}\n\n      {!computeState.loading && computeState.results.length > 0 && (\n        <>\n          <Divider />\n          <Grid\n            container\n            spacing={2}\n            padding={1}\n            columns={{ xs: 4, sm: 8, md: 12 }}\n          >\n            {computeState.results.map(({ gif, transformName }, idx) => (\n              <Grid item xs={4} sm={4} md={4} key={`${transformName}-${idx}`}>\n                <Typography variant=\"subtitle2\">{transformName}</Typography>\n                <img\n                  src={gif}\n                  alt={`gif-${transformName}-${idx}`}\n                  style={{ maxWidth: '300px', maxHeight: 'auto' }}\n                ></img>\n              </Grid>\n            ))}\n          </Grid>\n        </>\n      )}\n    </Stack>\n  );\n};\n","import {\n  Autocomplete,\n  Divider,\n  FormControl,\n  Icon,\n  IconButton,\n  Paper,\n  Stack,\n  TextField,\n  Tooltip,\n  Typography,\n} from '@material-ui/core';\nimport React from 'react';\nimport { ParamFunction, ParamValue, Transform } from '../domain/types';\n\ninterface SelectedTransform {\n  transform: Transform<any>;\n  paramValues: ParamValue<any>[];\n}\n\ninterface ImageTransformProps {\n  selectedTransform: SelectedTransform;\n  possibleTransforms: Transform<any>[];\n  index: number;\n  onSelect: (selected: SelectedTransform) => void;\n  onRemove: () => void;\n  onMoveLeft?: () => void;\n  onMoveRight?: () => void;\n}\n\nexport const ImageTransform: React.FC<ImageTransformProps> = ({\n  selectedTransform,\n  possibleTransforms,\n  index,\n  onSelect,\n  onRemove,\n  onMoveLeft,\n  onMoveRight,\n}) => {\n  return (\n    <Paper style={{ padding: 8 }} elevation={3}>\n      <Stack spacing={1}>\n        <Stack direction=\"row\" spacing={2}>\n          <Typography variant=\"subtitle1\">{index + 1}</Typography>\n          <Tooltip title=\"Delete transform\">\n            <IconButton aria-label=\"delete\" onClick={onRemove}>\n              <Icon>delete</Icon>\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Move transform left\">\n            <IconButton\n              aria-label=\"delete\"\n              onClick={onMoveLeft}\n              disabled={!onMoveLeft}\n            >\n              <Icon>chevron_left</Icon>\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Move transform right\">\n            <IconButton\n              aria-label=\"delete\"\n              onClick={onMoveRight}\n              disabled={!onMoveRight}\n            >\n              <Icon>chevron_right</Icon>\n            </IconButton>\n          </Tooltip>\n        </Stack>\n        <Stack direction=\"row\" spacing={4}>\n          <FormControl fullWidth>\n            <Autocomplete\n              disableClearable\n              value={selectedTransform.transform.name}\n              options={possibleTransforms.map((t) => t.name)}\n              onChange={(event, newTransformName) => {\n                const t = possibleTransforms.find(\n                  (t) => t.name === newTransformName\n                )!;\n                // Reset all the params when you select a new transform\n                onSelect({\n                  transform: t,\n                  paramValues: t.params.map(\n                    (p: ParamFunction<any>) => p.defaultValue\n                  ),\n                });\n              }}\n              renderInput={(params) => (\n                <TextField {...params} label=\"Transform\" />\n              )}\n            />\n          </FormControl>\n        </Stack>\n        {selectedTransform.transform.description && (\n          <Typography variant=\"caption\">\n            {selectedTransform.transform.description}\n          </Typography>\n        )}\n        {selectedTransform.transform.params.length > 0 && (\n          <Typography variant=\"subtitle1\">Parameters</Typography>\n        )}\n        <Stack divider={<Divider />} spacing={2}>\n          {selectedTransform.transform.params.map(\n            // Create elements for each of the parameters for the selectect transform.\n            // Each of these would get an onChange event so we know when the user has\n            //  selected a value.\n            (param: ParamFunction<any>, idx: number) => {\n              const ele = param.fn({\n                value: selectedTransform.paramValues[idx],\n                onChange: (v) => {\n                  onSelect({\n                    ...selectedTransform,\n                    paramValues: selectedTransform.paramValues.map((x, i) => {\n                      if (i === idx) {\n                        return v;\n                      }\n                      return x;\n                    }),\n                  });\n                },\n              });\n              return (\n                <React.Fragment\n                  key={`${selectedTransform.transform.name}-${param.name}`}\n                >\n                  {ele}\n                </React.Fragment>\n              );\n            }\n          )}\n        </Stack>\n      </Stack>\n    </Paper>\n  );\n};\n","import { Button, Grid, Icon, Stack, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { ParamFunction, Transform, TransformWithParams } from '../domain/types';\nimport { transformByName } from '../transforms';\nimport { ImageTransform } from './ImageTransform';\n\ninterface TransformListProps {\n  currentTransforms: TransformWithParams<any>[];\n  possibleTransforms: Transform<any>[];\n  onTransformsChange: (t: TransformWithParams<any>[]) => void;\n}\n\nexport const ImageTransformList: React.FC<TransformListProps> = ({\n  currentTransforms,\n  possibleTransforms,\n  onTransformsChange,\n}) => (\n  <Stack spacing={1}>\n    <Typography variant=\"h5\">Image Transforms</Typography>\n    <Grid\n      container\n      spacing={2}\n      padding={1}\n      columns={{ xs: 4, sm: 8, md: 12 }}\n      rowSpacing={4}\n    >\n      {currentTransforms.map((t, tIdx) => (\n        <Grid item xs={4} sm={4} md={4} key={`${t.transformName}-${tIdx}`}>\n          <ImageTransform\n            index={tIdx}\n            possibleTransforms={possibleTransforms}\n            selectedTransform={{\n              transform: transformByName(t.transformName),\n              paramValues: t.paramsValues,\n            }}\n            onRemove={() =>\n              onTransformsChange(\n                currentTransforms.filter((nextT, newIdx) => newIdx !== tIdx)\n              )\n            }\n            onMoveLeft={\n              tIdx > 0\n                ? () =>\n                    onTransformsChange(\n                      currentTransforms.map((nextT, newIdx) => {\n                        if (newIdx === tIdx - 1) {\n                          // This is the next item in the list\n                          return currentTransforms[newIdx + 1];\n                        } else if (tIdx === newIdx) {\n                          // This is the previous item\n                          return currentTransforms[tIdx - 1];\n                        } else {\n                          return nextT;\n                        }\n                      })\n                    )\n                : undefined\n            }\n            onMoveRight={\n              tIdx < currentTransforms.length - 1\n                ? () =>\n                    onTransformsChange(\n                      currentTransforms.map((nextT, newIdx) => {\n                        if (newIdx === tIdx + 1) {\n                          // This is the previous item in the list\n                          return currentTransforms[newIdx - 1];\n                        } else if (tIdx === newIdx) {\n                          // This is the next item\n                          return currentTransforms[tIdx + 1];\n                        } else {\n                          return nextT;\n                        }\n                      })\n                    )\n                : undefined\n            }\n            onSelect={(selected) =>\n              onTransformsChange(\n                currentTransforms.map((nextT, nextTIdx) => {\n                  if (tIdx === nextTIdx) {\n                    // This is the one we just changed\n                    return {\n                      transformName: selected.transform.name,\n                      paramsValues: selected.paramValues,\n                      computedImage: undefined,\n                    };\n                  }\n                  // Reset all the images if we changed anything\n                  return {\n                    transformName: nextT.transformName,\n                    paramsValues: nextT.paramsValues,\n                    computedImage: undefined,\n                  };\n                })\n              )\n            }\n          />\n        </Grid>\n      ))}\n      <Grid item xs={4} sm={4} md={4}>\n        <Stack spacing={4}>\n          <Button\n            fullWidth={false}\n            variant=\"contained\"\n            startIcon={<Icon>add</Icon>}\n            onClick={() =>\n              onTransformsChange([\n                ...currentTransforms,\n                {\n                  transformName: possibleTransforms[0].name,\n                  paramsValues: possibleTransforms[0].params.map(\n                    (p: ParamFunction<any>) => p.defaultValue\n                  ),\n                },\n              ])\n            }\n          >\n            New Transform\n          </Button>\n        </Stack>\n      </Grid>\n    </Grid>\n  </Stack>\n);\n","import { Alert, Button, Icon, Stack, Typography } from '@material-ui/core';\nimport * as lz from 'lz-string';\nimport React from 'react';\nimport { AppState } from '../domain/types';\n\ninterface ImportExportProps {\n  state: AppState;\n  onImport: (o: AppState) => void;\n}\n\nexport const ImportExport: React.FC<ImportExportProps> = ({\n  state,\n  onImport,\n}) => {\n  const [info, setInfo] = React.useState<string | undefined>();\n  const [isInvalid, setInvalid] = React.useState(false);\n\n  const showInfo = (text: string) => {\n    setInfo(text);\n    setTimeout(() => setInfo(undefined), 2000);\n  };\n\n  const showError = () => {\n    setInvalid(true);\n    setTimeout(() => setInvalid(false), 2000);\n  };\n\n  return (\n    <Stack spacing={3}>\n      <Typography variant=\"h5\">Import/Export</Typography>\n      <Button\n        startIcon={<Icon>file_upload</Icon>}\n        sx={{ maxWidth: '300px' }}\n        variant=\"contained\"\n        onClick={() => {\n          const output = lz.compressToBase64(JSON.stringify(state));\n          navigator.clipboard.writeText(output);\n          showInfo('Copied to clipboard');\n        }}\n      >\n        Export to clipboard <br />\n        (With Source Image)\n      </Button>\n\n      <Button\n        startIcon={<Icon>file_download</Icon>}\n        sx={{ maxWidth: '300px' }}\n        variant=\"contained\"\n        onClick={async () => {\n          try {\n            const clipboardContents = await navigator.clipboard.readText();\n            if (!clipboardContents) {\n              showError();\n              return;\n            }\n            const data = JSON.parse(\n              lz.decompressFromBase64(clipboardContents)!\n            );\n            if (!Array.isArray(data.transforms)) {\n              showError();\n              return;\n            }\n            onImport(data);\n            setInvalid(false);\n          } catch (e) {\n            console.error(e);\n            showError();\n          }\n        }}\n      >\n        Import from clipboard\n      </Button>\n      {info && (\n        <Alert severity=\"info\" sx={{ maxWidth: '300px' }}>\n          {info}\n        </Alert>\n      )}\n      {isInvalid && (\n        <Alert severity=\"error\" sx={{ maxWidth: '300px' }}>\n          Error importing from clipboard\n        </Alert>\n      )}\n    </Stack>\n  );\n};\n","import { AppState } from './domain/types';\n\nconst LOCAL_STORAGE_KEY = 'partymoji-state';\n\nexport const getStoredAppState = (): AppState | undefined => {\n  try {\n    const stored = window.localStorage.getItem(LOCAL_STORAGE_KEY);\n    if (stored) {\n      const savedState = JSON.parse(stored);\n      if (Array.isArray(savedState.transforms)) {\n        return savedState;\n      }\n    }\n  } catch (err) {\n    // @ts-ignore\n    console.error('Error loading state from local storage', err.stack || err);\n  }\n\n  return undefined;\n};\n\nexport const saveAppState = (state: AppState) => {\n  try {\n    window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(state));\n  } catch (err) {\n    // @ts-ignore\n    console.error('Error saving state to local storage', err.stack || err);\n  }\n};\n\nexport const clearAppState = () => {\n  try {\n    window.localStorage.removeItem(LOCAL_STORAGE_KEY);\n  } catch (err) {\n    // @ts-ignore\n    console.error('Error clearing state from local storage', err.stack || err);\n  }\n};\n","import {\n  Button,\n  Container,\n  Divider,\n  Icon,\n  Paper,\n  Stack,\n  Typography,\n} from '@material-ui/core';\nimport ScopedCssBaseline from '@material-ui/core/ScopedCssBaseline';\nimport React from 'react';\n\nimport { ComputeBox } from './components/ComputeBox';\nimport { Help } from './components/Help';\nimport { ImagePicker } from './components/ImagePicker';\nimport { ImageTransformList } from './components/ImageTransformList';\nimport { ImportExport } from './components/ImportExport';\nimport { AppState } from './domain/types';\nimport * as localStorage from './localStorage';\nimport { POSSIBLE_TRANSFORMS, transformByName } from './transforms';\n\n// Set to true to print out the current state at the bottom of the page\nconst DEBUG = false;\n\nconst DEFAULT_STATE: AppState = {\n  dirty: false,\n  transforms: [],\n  baseImage: undefined,\n  fps: 20,\n};\n\nexport const App: React.FC = () => {\n  const [state, setStateRaw] = React.useState(DEFAULT_STATE);\n\n  React.useEffect(() => {\n    // If we have local storage state on startup, then reload that\n    const stored = localStorage.getStoredAppState();\n    if (stored) {\n      setStateRaw({ ...stored, dirty: true });\n    }\n  }, []);\n\n  const setState = (newState: AppState) => {\n    localStorage.saveAppState(newState);\n    setStateRaw(newState);\n  };\n\n  if (DEBUG) {\n    (window as any).STATE = state;\n  }\n\n  const computeBtnDisbled =\n    !state.baseImage ||\n    state.transforms.length === 0 ||\n    !state.dirty ||\n    state.transforms.some((t) => {\n      const params = transformByName(t.transformName).params;\n      return (\n        params.length > 0 && t.paramsValues.every((p) => p.valid === false)\n      );\n    });\n\n  return (\n    <>\n      <ScopedCssBaseline />\n      <Container>\n        <Stack spacing={4} justifyContent=\"space-evenly\" divider={<Divider />}>\n          <Typography variant=\"h2\" pt={4}>\n            Partymoji\n          </Typography>\n          <Stack spacing={4} divider={<Divider />}>\n            {DEBUG && (\n              <Paper style={{ padding: 16 }}>\n                <Help />\n              </Paper>\n            )}\n            <Paper style={{ padding: 16 }}>\n              <Stack spacing={1}>\n                <Typography variant=\"h5\">Source Image</Typography>\n                <ImagePicker\n                  name=\"Choose a source image\"\n                  currentImageUrl={state.baseImage}\n                  onChange={(baseImage) => {\n                    setState({\n                      ...state,\n                      baseImage,\n                      dirty: true,\n                    });\n                  }}\n                />\n              </Stack>\n            </Paper>\n            <Paper style={{ padding: 16 }}>\n              <ImageTransformList\n                currentTransforms={state.transforms}\n                possibleTransforms={POSSIBLE_TRANSFORMS}\n                onTransformsChange={(transforms) =>\n                  setState({\n                    ...state,\n                    dirty: true,\n                    transforms,\n                  })\n                }\n              />\n            </Paper>\n            <Paper style={{ padding: 16 }}>\n              <ComputeBox\n                computeDisabled={computeBtnDisbled}\n                appState={state}\n                onFpsChange={(fps) =>\n                  setState({\n                    ...state,\n                    fps,\n                    dirty: true,\n                  })\n                }\n                onComputed={() =>\n                  setState({\n                    ...state,\n                    dirty: false,\n                  })\n                }\n              />\n            </Paper>\n            <Paper style={{ padding: 16 }}>\n              <ImportExport\n                state={state}\n                onImport={(newState) => setState({ ...newState, dirty: true })}\n              />\n            </Paper>\n            <Paper style={{ padding: 16 }}>\n              <Stack spacing={3}>\n                <Typography variant=\"h5\">Clear State</Typography>\n                <Typography variant=\"body1\">\n                  Clicking this button will clear the source image and all\n                  transforms\n                </Typography>\n                <Button\n                  startIcon={<Icon>clear</Icon>}\n                  sx={{ maxWidth: '300px' }}\n                  variant=\"contained\"\n                  onClick={() => {\n                    localStorage.clearAppState();\n                    setStateRaw(DEFAULT_STATE);\n                  }}\n                >\n                  Clear State\n                </Button>\n              </Stack>\n            </Paper>\n            {DEBUG && (\n              <div>\n                <code>{JSON.stringify(state, null, 2)}</code>\n              </div>\n            )}\n            <a\n              href=\"https://github.com/MikeyBurkman/partymoji\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <img\n                src=\"https://upload.wikimedia.org/wikipedia/commons/9/91/Octicons-mark-github.svg\"\n                width={64}\n                height={64}\n                alt=\"Github Link\"\n              ></img>\n            </a>\n          </Stack>\n        </Stack>\n      </Container>\n    </>\n  );\n};\n","import { Button, Icon, Stack, Typography } from '@material-ui/core';\nimport React, { ErrorInfo } from 'react';\n\ninterface Props {\n  onClearLocalStorage: () => void;\n}\n\ninterface State {\n  hasError: boolean;\n}\n\nexport class TopLevelErrorBoundary extends React.Component<Props, State> {\n  public state: State = {\n    hasError: false,\n  };\n\n  static getDerivedStateFromError(error: Error): State {\n    console.error(error);\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('Uncaught error:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <Stack spacing={1}>\n          <Typography variant=\"h2\">Oh no!</Typography>\n          <Typography variant=\"body1\">\n            There seems to have been an issue\n          </Typography>\n          <Typography variant=\"body2\">\n            If refreshing the page doesn't fix things, click the below button to\n            clear local storage\n          </Typography>\n          <Button\n            variant=\"contained\"\n            sx={{ maxWidth: '300px' }}\n            endIcon={<Icon>priority_high</Icon>}\n            startIcon={<Icon>priority_high</Icon>}\n            onClick={this.props.onClearLocalStorage}\n          >\n            Clear storage and reload\n          </Button>\n        </Stack>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { TopLevelErrorBoundary } from './components/TopLevelErrorBoundary';\nimport * as localStorage from './localStorage';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TopLevelErrorBoundary\n      onClearLocalStorage={() => {\n        localStorage.clearAppState();\n        window.location.reload();\n      }}\n    >\n      <App />\n    </TopLevelErrorBoundary>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}