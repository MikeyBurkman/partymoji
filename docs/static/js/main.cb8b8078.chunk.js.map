{"version":3,"sources":["domain/types.ts","domain/utils.ts","domain/transforms/background-party.ts","components/Dropdown.tsx","components/Tooltip.tsx","params/dropdownParam.tsx","domain/run.ts","components/ImagePicker.tsx","domain/transforms/background-image.ts","params/textParam.tsx","params/imagePickerParam.tsx","params/floatParam.tsx","domain/transforms/bounce.ts","params/intParam.tsx","domain/transforms/brightness.ts","domain/transforms/circle.ts","domain/transforms/expand.ts","domain/transforms/fisheye.ts","domain/transforms/frame-count.ts","domain/transforms/grayscale.ts","domain/transforms/lightning.ts","domain/transforms/party.ts","components/Expandable.tsx","params/colorPickerParam.tsx","domain/transforms/pinwheel.ts","domain/transforms/index.ts","domain/transforms/radiance.ts","domain/transforms/resize.ts","domain/transforms/resize-background.ts","domain/transforms/ripple.ts","domain/transforms/rotate.ts","domain/transforms/roxbury.ts","domain/transforms/shake.ts","domain/transforms/solid-background.ts","domain/transforms/static.ts","domain/transforms/transparency.ts","domain/transforms/transpose.ts","components/ComputeBox.tsx","components/ImageTransform.tsx","components/ImageTransformList.tsx","App.tsx","index.tsx"],"names":["buildTransform","args","name","params","description","fn","toHexColor","r","g","b","toHexValue","c","s","toString","toUpperCase","length","fromHexColor","hex","parseInt","substr","isTransparent","pixel","randomColor","random","Math","floor","int32","getAveragePixelValue","round","clampColor","a","clamp","n","max","min","getPixelFromSource","dimensions","image","coord","width","height","x","y","idx","getImageIndex","assert","condition","message","AssertionError","actual","mapFrames","cb","frames","map","frame","data","mapCoords","transformedImageData","Uint8Array","mapImage","parameters","imageData","frameIndex","frameCount","getSrcPixel","repeat","times","Array","_","i","writePixel","color","resizeImage","newWidth","newHeight","xRatio","yRatio","newDimensions","srcX","srcY","PARTY_COLORS","backgroundParty","srcPixel","partyColorIdx","Dropdown","selected","options","onChange","React","useState","hidden","setHidden","close","useCallback","document","removeEventListener","title","find","value","className","aria-haspopup","onClick","e","preventDefault","setTimeout","addEventListener","aria-hidden","role","style","visibility","maxHeight","overflowY","href","cn","Tooltip","text","DropdownParam","maxWidth","valid","dropdownParam","defaultValue","undefined","runTransforms","inputDataUrl","transformList","fps","seedrandom","readImage","originalImage","images","reduce","transformInput","result","transform","push","Promise","all","newImage","transparentColor","getTransparentColor","encodeTransparency","f","createGif","img","resolve","gif","gifEncoder","setFrameRate","setRepeat","hexColor","slice","setTransparent","writeHeader","on","chunk","dataUrl","URL","createObjectURL","Blob","type","forEach","addFrame","finish","res","rej","getPixels","err","getPixelResults","from","shape","hasTransparent","seenPixels","Set","attempt","px","add","findRandomColorNotInSet","set","attempts","col","has","ImagePicker","currentImageUrl","accept","event","files","target","file","readFile","baseImage","src","alt","reader","FileReader","onload","readAsDataURL","backgroundImage","imagePickerParam","otherImage","otherImageSrc","FloatParam","parse","val","setVal","invalidText","setInvalidText","onBlur","reason","floatParam","parseFloat","isNaN","bounce","sin","PI","IntParam","intParam","brightness","rawAmount","p","circle","radius","cos","expand","dist","centerX","centerY","fisheye","expanding","angle","atan2","currentFrames","grayscale","gray","TextParam","lightningIntensities","lightning","flashIntensity","icf","party","partyColor","Expandable","mainEle","children","collapsed","setCollapsed","ColorBox","backgroundColor","ColorPickerParam","disableAlpha","presetColors","onChangeComplete","colorPickerParam","POSSIBLE_TRANSFORMS","offsetX","offsetY","groupCount","colors","ribbonCount","ribbonArcDegrees","colorsLength","toFixed","xRelCenter","yRelCenter","pointAngle","colorIdx","frameProgress","colorList","flatMap","maxDist","sqrt","distFromCenter","xPadding","yPadding","amplitude","period","shift","offset","sign","amount","phase","phaseIdx","maxAngle","rotatePointX","rotatePointY","newCoord","shakeSpeed","strength","ceil","tolerance","diff0","diff1","diff2","transX","transY","fpsParam","ComputeBox","isDirty","computeDisabled","baseImageUrl","transforms","onComputed","loading","results","state","setState","fpsChanged","setFpsChanged","setFps","buttonDisabled","disabled","transformInputs","t","paramsValues","gifs","ImageTransform","selectedTransform","possibleTransforms","index","onSelect","onRemove","onMoveLeft","onMoveRight","padding","newTransformName","paramValues","fontSize","param","ele","v","console","log","ImageTransformList","currentTransforms","onTransformsChange","display","gridTemplateColumns","tIdx","filter","nextT","newIdx","nextTIdx","computedImage","App","dirty","computeBtnDisbled","some","every","paddingTop","rel","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cb8b8078.chunk.js","sourcesContent":["import seedrandom from 'seedrandom';\n\n/**\n * [R, G, B, A] in values 0 - 255 inclusive\n */\nexport type Color = [number, number, number, number];\n\n/**\n * [x, y]\n */\nexport type Coord = [number, number];\n\n/**\n * [width, height]\n */\nexport type Dimensions = [number, number];\n\n/**\n * A one-dimensional array of pixels.\n * A 3x2 image would contain 24 (6*4) numbers, and would look like this:\n *  [\n *    r1,g1,b1,a1, r2,g2,b2,a2, r3,g3,b3,a3,\n *    r4,g4,b4,a4, r5,g5,b5,a5, r6,g6,b6,a6\n *  ]\n *\n * [0, 0] = index 0\n * [1, 0] = index 4\n * [2, 0] = index 8\n * [0, 1] = index 12\n * [1, 1] = index 16\n * [2, 1] = index 20\n * To get pixel [x, y], do (x + y * width) * 4\n */\nexport type ImageData = Uint8Array;\n\nexport type Frame = {\n  data: ImageData;\n};\n\n/**\n * The results of get-pixels processImage()\n */\nexport interface Image {\n  dimensions: Dimensions;\n  frames: Frame[];\n}\n\nexport type Random = seedrandom.prng;\n\nexport interface TransformFnOpts<Params> {\n  /**\n   * The image we're trying to transform\n   */\n  image: Image;\n\n  /**\n   * Use to generate \"random\" numbers. It's seeded, so that subsequent calls will yield the same value on the same image.\n   */\n  random: Random;\n\n  /**\n   * User-passed in parameters.\n   */\n  parameters: Params;\n}\n\nexport type ParamValue<T> = { valid: true; value: T } | { valid: false };\n\nexport interface Parameter<T> {\n  name: string;\n  defaultValue: T;\n  ele: JSX.Element;\n}\n\nexport interface Params<T> {\n  value: ParamValue<T>;\n  onChange: (v: ParamValue<T>) => void;\n}\n\nexport type ParamFunction<T> = {\n  name: string;\n  defaultValue: ParamValue<T>;\n  fn: (params: Params<T>) => JSX.Element;\n};\n\nexport type TransformFn<Params> = (opts: TransformFnOpts<Params>) => Image;\n\ntype ParamType<Type> = Type extends ParamFunction<infer X> ? X : never;\n\nexport interface Transform<T extends readonly ParamFunction<any>[]> {\n  name: string;\n  params: T;\n  description?: string;\n  fn: TransformFn<{ [P in keyof T]: ParamType<T[P]> }>;\n}\n\nexport interface TransformWithParams<T extends readonly ParamFunction<any>[]> {\n  transform: Transform<T>;\n  paramsValues: ParamValue<T>[];\n}\n\nexport interface TransformInput<T extends ParamFunction<any>[]> {\n  transform: Transform<T>;\n  params: T;\n}\n\nexport const buildTransform = <T extends readonly ParamFunction<any>[]>(args: {\n  name: string;\n  params: T;\n  description?: string;\n  fn: TransformFn<{ [P in keyof T]: ParamType<T[P]> }>;\n}): Transform<T> => ({\n  name: args.name,\n  params: args.params,\n  description: args.description,\n  fn: args.fn,\n});\n","import seedrandom from 'seedrandom';\nimport { AssertionError } from 'assert';\n\nimport {\n  Color,\n  Coord,\n  Dimensions,\n  ImageData,\n  Image,\n  Random,\n  TransformFn,\n  TransformFnOpts,\n} from './types';\n\n/**\n * Converts a Pixel into a hex string like '#00FF00'\n */\nexport const toHexColor = ([r, g, b]: Color) => {\n  const toHexValue = (c: number) => {\n    const s = c.toString(16).toUpperCase();\n    return s.length === 2 ? s : '0' + s;\n  };\n\n  return `#${toHexValue(r)}${toHexValue(g)}${toHexValue(b)}`;\n};\n\nexport const fromHexColor = (hex: string): Color => [\n  parseInt(hex.toUpperCase().substr(1, 2), 16),\n  parseInt(hex.toUpperCase().substr(3, 2), 16),\n  parseInt(hex.toUpperCase().substr(5, 2), 16),\n  255,\n];\n\nexport const isHexColor = (s: string) => /^#[0-9A-F]{6}$/.test(s);\n\nexport const isTransparent = (pixel: Color) => pixel[3] < 64;\n\nexport const randomColor = (random: seedrandom.prng): Color => [\n  Math.floor(random.int32() * 256),\n  Math.floor(random.int32() * 256),\n  Math.floor(random.int32() * 256),\n  255,\n];\n\nexport const getAveragePixelValue = ([r, g, b]: Color) =>\n  Math.round((r + g + b) / 3);\n\nexport const clampColor = ([r, g, b, a]: Color): Color => {\n  const clamp = (n: number) => Math.max(Math.min(n, 255), 0);\n\n  return [clamp(r), clamp(g), clamp(b), clamp(a)];\n};\n\nexport const getPixelFromSource = (\n  dimensions: Dimensions,\n  image: ImageData,\n  coord: Coord\n): Color => {\n  const [width, height] = dimensions;\n  const [x, y] = coord;\n  if (x < 0 || x >= width || y < 0 || y >= height) {\n    return [0, 0, 0, 0]; // Default to transparent if an invalid coordinate\n  }\n\n  const idx = getImageIndex(dimensions, x, y);\n  return [image[idx], image[idx + 1], image[idx + 2], image[idx + 3]];\n};\n\n/**\n * Asserts that a given value is truthy. Uses TypeScript 3.7 assertion types.\n *\n * @example\n * ```ts\n * const foo: string|undefined = getSomeData();\n * asert(foo, 'foo must be defined');\n * console.log(foo.length); // OK\n * ```\n */\nexport function assert(\n  condition: unknown,\n  message = 'Unexpected falsy value'\n): asserts condition {\n  if (!condition) {\n    throw new AssertionError({ message, actual: condition });\n  }\n}\n\n/********** Mapping Utils ***********/\n// Maps all frames from the original image into new frames.\n// Assumes all mapped frames are the same dimension as the original image.\nexport const mapFrames = (\n  image: Image,\n  cb: (\n    imageData: ImageData,\n    frameIndex: number,\n    frameCount: number\n  ) => ImageData\n): Image => {\n  const frames = image.frames.map((frame, idx) => ({\n    data: cb(frame.data, idx, image.frames.length),\n  }));\n  return {\n    dimensions: image.dimensions,\n    frames,\n  };\n};\n\n/**\n * Maps the coordinates in a given shape into an image\n */\nexport const mapCoords = (\n  dimensions: Dimensions,\n  cb: (coord: Coord) => Color\n): ImageData => {\n  const [width, height] = dimensions;\n  const transformedImageData = new Uint8Array(width * height * 4);\n  for (let y = 0; y < height; y += 1) {\n    for (let x = 0; x < width; x += 1) {\n      const c = clampColor(cb([x, y]));\n      const idx = getImageIndex(dimensions, x, y);\n      transformedImageData[idx] = c[0];\n      transformedImageData[idx + 1] = c[1];\n      transformedImageData[idx + 2] = c[2];\n      transformedImageData[idx + 3] = c[3];\n    }\n  }\n  return transformedImageData;\n};\n\n/**\n * Combines mapFrames and mapCoords into one function.\n * Used for transforming each pixel in an image into another pixel.\n */\nexport const mapImage = <T>(\n  cb: (args: {\n    image: Image;\n    dimensions: Dimensions;\n    random: Random;\n    parameters: T;\n    coord: Coord;\n    frameCount: number;\n    frameIndex: number;\n    getSrcPixel: (coord: Coord) => Color;\n  }) => Color\n): TransformFn<T> => {\n  return ({ image, random, parameters }: TransformFnOpts<T>) =>\n    mapFrames(image, (imageData, frameIndex, frameCount) =>\n      mapCoords(image.dimensions, (coord) =>\n        cb({\n          image,\n          dimensions: image.dimensions,\n          random,\n          parameters,\n          coord,\n          frameCount,\n          frameIndex,\n          getSrcPixel: (c: Coord) =>\n            getPixelFromSource(image.dimensions, imageData, c),\n        })\n      )\n    );\n};\n\n/** Create a new array [0, 1, 2, ...N-1] */\nexport const repeat = (times: number): number[] =>\n  [...new Array(times)].map((_, i) => i);\n\nexport const getImageIndex = ([width]: Dimensions, x: number, y: number) =>\n  (x + y * width) * 4;\n\nexport const writePixel = (args: {\n  image: ImageData;\n  dimensions: Dimensions;\n  coord: Coord;\n  color: Color;\n}): void => {\n  const idx = getImageIndex(args.dimensions, args.coord[0], args.coord[1]);\n  args.image[idx] = args.color[0];\n  args.image[idx + 1] = args.color[1];\n  args.image[idx + 2] = args.color[2];\n  args.image[idx + 3] = args.color[3];\n};\n\nexport const resizeImage = (args: {\n  image: Image;\n  newWidth: number;\n  newHeight: number;\n}): Image => {\n  const { image, newWidth, newHeight } = args;\n  const [width, height] = image.dimensions;\n  const xRatio = width / newWidth;\n  const yRatio = height / newHeight;\n\n  const newDimensions: Dimensions = [newWidth, newHeight];\n\n  const newFrames = image.frames.map((frame) => {\n    const transformedImageData = new Uint8Array(newWidth * newHeight * 4);\n    for (let y = 0; y < newHeight; y += 1) {\n      for (let x = 0; x < newWidth; x += 1) {\n        // Simple nearest-neighbor image scaling.\n        // Arguably the worst of the scaling algorithms, but it's quick,\n        //  and we're generally dealing with small images anyhow.\n        const srcX = Math.floor(x * xRatio);\n        const srcY = Math.floor(y * yRatio);\n\n        const pixel = getPixelFromSource(image.dimensions, frame.data, [\n          srcX,\n          srcY,\n        ]);\n        writePixel({\n          color: pixel,\n          coord: [x, y],\n          dimensions: newDimensions,\n          image: transformedImageData,\n        });\n      }\n    }\n    return {\n      data: transformedImageData,\n    };\n  });\n\n  return {\n    frames: newFrames,\n    dimensions: [newWidth, newHeight],\n  };\n};\n","import { buildTransform, Color } from '../types';\nimport { mapImage, isTransparent } from '../utils';\n\nconst PARTY_COLORS: Color[] = [\n  [255, 141, 139, 255],\n  [254, 214, 137, 255],\n  [136, 255, 137, 255],\n  [135, 255, 255, 255],\n  [139, 181, 254, 255],\n  [215, 140, 255, 255],\n  [255, 140, 255, 255],\n  [255, 104, 247, 255],\n  [254, 108, 183, 255],\n  [255, 105, 104, 255],\n];\n\nexport const backgroundParty = buildTransform({\n  name: 'Background Party',\n  description: 'Transparent pixels will flash bright party colors',\n  params: [],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel }) => {\n    const srcPixel = getSrcPixel(coord);\n\n    // Make the transparent parts colorful\n    if (isTransparent(srcPixel)) {\n      const partyColorIdx = Math.floor(\n        (frameIndex / frameCount) * PARTY_COLORS.length\n      );\n      return PARTY_COLORS[partyColorIdx];\n    }\n\n    return srcPixel;\n  }),\n});\n","import React from 'react';\nimport cn from 'classnames';\n\ninterface DropdownProps {\n  selected: any;\n  options: readonly { name: string | JSX.Element; value: any }[];\n  onChange: (value: any) => void;\n}\n\nexport const Dropdown: React.FC<DropdownProps> = ({\n  selected,\n  options,\n  onChange,\n}) => {\n  const [hidden, setHidden] = React.useState(true);\n  const close = React.useCallback(() => {\n    document.removeEventListener('click', close);\n    setHidden(true);\n  }, []);\n  const title = options.find((x) => x.value === selected)?.name ?? '';\n  return (\n    <div className=\"dropdown is-active\">\n      <div className=\"dropdown-trigger\">\n        <button\n          className=\"button\"\n          aria-haspopup=\"true\"\n          onClick={(e) => {\n            e.preventDefault();\n            if (hidden) {\n              setHidden(false);\n              setTimeout(() => document.addEventListener('click', close), 0);\n            } else {\n              close();\n            }\n          }}\n        >\n          <span>{title}</span>\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\"></i>\n          </span>\n        </button>\n      </div>\n      <div\n        className=\"dropdown-menu\"\n        role=\"menu\"\n        style={{ visibility: hidden ? 'hidden' : 'visible' }}\n      >\n        <div\n          className=\"dropdown-content\"\n          style={{ maxHeight: '16em', overflowY: 'auto' }}\n        >\n          {options.map(({ name, value }) => (\n            // eslint-disable-next-line jsx-a11y/anchor-is-valid\n            <a\n              key={value}\n              href=\"#\"\n              className={cn('dropdown-item', {\n                'is-active': selected === value,\n              })}\n              onClick={(e) => {\n                e.preventDefault();\n                close();\n                onChange(value);\n              }}\n            >\n              {name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport const Tooltip: React.FC<{ text: string }> = ({ text }) => {\n  return (\n    <span className=\"icon column\">\n      <i className=\"fas fa-question-circle\" aria-hidden=\"true\" title={text}></i>\n    </span>\n  );\n};\n","import React from 'react';\nimport { Dropdown } from '../components/Dropdown';\nimport { Tooltip } from '../components/Tooltip';\nimport { ParamValue, ParamFunction } from '../domain/types';\n\nconst DropdownParam: React.FC<{\n  name: string;\n  options: readonly { name: string; value: any }[];\n  value?: any;\n  description?: string;\n  onChange: (v: ParamValue<any>) => void;\n}> = ({ name, options, value, description, onChange }) => {\n  return (\n    <div className=\"field\" style={{ maxWidth: '12em' }}>\n      <label className=\"label\">\n        {name}\n        {description && <Tooltip text={description} />}\n      </label>\n      <div className=\"control\">\n        <Dropdown\n          onChange={(value) => onChange({ valid: true, value })}\n          selected={value}\n          options={options}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport function dropdownParam<T>(args: {\n  name: string;\n  options: readonly { name: string; value: T }[];\n  description?: string;\n  defaultValue?: T;\n}): ParamFunction<T> {\n  return {\n    name: args.name,\n    defaultValue: args.defaultValue\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n    fn: (params) => {\n      return (\n        <DropdownParam\n          name={args.name}\n          value={params.value.valid ? params.value.value : undefined}\n          options={args.options}\n          description={args.description}\n          onChange={params.onChange}\n        />\n      );\n    },\n  };\n}\n","// @ts-ignore\nimport getPixels from 'get-pixels';\n// @ts-ignore\nimport gifEncoder from 'gif-encoder';\nimport seedrandom from 'seedrandom';\n\nimport { Color, TransformInput, Image, Dimensions, ImageData } from './types';\nimport {\n  toHexColor,\n  getPixelFromSource,\n  randomColor,\n  fromHexColor,\n  isTransparent,\n} from './utils';\n\n// Returns a list of gif data URLs, for each transform\nexport const runTransforms = async (\n  inputDataUrl: string,\n  transformList: TransformInput<any>[],\n  fps: number\n): Promise<string[]> => {\n  const random = seedrandom(inputDataUrl);\n\n  const originalImage = await readImage(inputDataUrl);\n\n  const images: Image[] = [];\n  transformList.reduce((image, transformInput) => {\n    const result = transformInput.transform.fn({\n      image,\n      parameters: transformInput.params,\n      random,\n    });\n    images.push(result);\n    return result;\n  }, originalImage);\n\n  return await Promise.all(\n    images.map(async (newImage) => {\n      const transparentColor = getTransparentColor(newImage, random);\n\n      // Transform any of our transparent pixels to what our gif understands to be transparent\n      const image = encodeTransparency(\n        newImage.frames.map((f) => f.data),\n        transparentColor\n      );\n\n      return await createGif(newImage.dimensions, image, transparentColor, fps);\n    })\n  );\n};\n\n/**\n * Each pixel in our image has an alpha channel, but gifs don't.\n * We transform each pixel that appears transparent to be a designated transparent color.\n */\nconst encodeTransparency = (\n  frames: ImageData[],\n  transparentColor: Color | undefined\n): ImageData[] => {\n  const image = frames.map((frame) => {\n    const img = new Uint8Array(frame.length);\n    for (let i = 0; i < frame.length; i += 4) {\n      if (transparentColor && frame[i + 3] < 128) {\n        // Anything more than halfway transparent is considered transparent\n        img[i] = transparentColor[0];\n        img[i + 1] = transparentColor[1];\n        img[i + 2] = transparentColor[2];\n        img[i + 3] = transparentColor[3];\n      } else {\n        img[i] = frame[i];\n        img[i + 1] = frame[i + 1];\n        img[i + 2] = frame[i + 2];\n        img[i + 3] = 255; // Gifs don't do transparency, I dunno why they take in an alpha value...\n      }\n    }\n    return img;\n  });\n\n  return image;\n};\n\nconst createGif = async (\n  dimensions: Dimensions,\n  frames: ImageData[],\n  transparentColor: Color | undefined,\n  fps: number\n): Promise<string> =>\n  new Promise<string>((resolve) => {\n    const [width, height] = dimensions;\n    const gif = new gifEncoder(width, height);\n\n    gif.setFrameRate(fps);\n    gif.setRepeat(0); // Loop indefinitely\n    if (transparentColor) {\n      // Need to convert '#RRGGBB' to '0xRRGGBB'\n      const hexColor = toHexColor(transparentColor).slice(1);\n      gif.setTransparent(`0x${hexColor}`);\n    }\n\n    // gif.setQuality(10);\n    gif.writeHeader();\n\n    let data: any[] = [];\n    gif.on('data', (chunk: any) => {\n      data.push(chunk);\n    });\n    gif.on('end', () => {\n      const dataUrl = URL.createObjectURL(\n        new Blob(data, { type: 'image/gif' })\n      );\n      resolve(dataUrl);\n    });\n\n    frames.forEach((f) => {\n      gif.addFrame(f);\n    });\n\n    gif.finish();\n  });\n\nexport const readImage = (dataUrl: string): Promise<Image> =>\n  new Promise<Image>((res, rej) =>\n    getPixels(\n      dataUrl,\n      (err: Error, getPixelResults: { shape: Dimensions; data: ImageData }) => {\n        if (err) {\n          return rej(err);\n        } else {\n          return res({\n            frames: [\n              {\n                data: Uint8Array.from(getPixelResults.data),\n              },\n            ],\n            dimensions: [getPixelResults.shape[0], getPixelResults.shape[1]],\n          });\n        }\n      }\n    )\n  );\n\nconst getTransparentColor = (\n  image: Image,\n  random: seedrandom.prng\n): Color | undefined => {\n  let hasTransparent = false;\n  const seenPixels = new Set<string>();\n  const [width, height] = image.dimensions;\n  let attempt = toHexColor([0, 255, 0, 255]); // Just start with green for now, since it's a likely candidate\n  image.frames.forEach((frame) => {\n    for (let y = 0; y < height; y += 1) {\n      for (let x = 0; x < width; x += 1) {\n        const px = getPixelFromSource(image.dimensions, frame.data, [x, y]);\n        if (isTransparent(px)) {\n          hasTransparent = true;\n        } else {\n          const hex = toHexColor(px);\n          seenPixels.add(hex);\n          if (hex === attempt) {\n            // Uh oh, can't use our current pick for transparent because it exists in the image already\n            attempt = findRandomColorNotInSet(random, seenPixels);\n          }\n        }\n      }\n    }\n  });\n  return hasTransparent ? fromHexColor(attempt) : undefined;\n};\n\nconst findRandomColorNotInSet = (\n  random: seedrandom.prng,\n  set: Set<string>,\n  attempts = 0\n): string => {\n  const col = toHexColor(randomColor(random));\n  if (attempts > 2000) {\n    // Just give up in order to prevent a stack overflow or something...\n    return col;\n  }\n  return set.has(col)\n    ? findRandomColorNotInSet(random, set, attempts + 1)\n    : col;\n};\n","import React from 'react';\n\ninterface ImagePickerProps {\n  currentImageUrl?: string;\n  name?: string;\n  width?: number;\n  height?: number;\n  onChange: (imageUrl: string) => void;\n}\n\nexport const ImagePicker: React.FC<ImagePickerProps> = ({\n  currentImageUrl,\n  name,\n  width,\n  height,\n  onChange,\n}) => (\n  <>\n    <div className=\"file block\">\n      <label className=\"file-label\">\n        <input\n          className=\"file-input\"\n          type=\"file\"\n          accept=\"image/png,image/jpg\"\n          name=\"source-png\"\n          onChange={async (event) => {\n            const files = Array.from(event.target.files ?? []);\n            const file = files[0];\n            const baseImage = await readFile(file);\n            onChange(baseImage);\n          }}\n        />\n        <span className=\"file-cta\">\n          <span className=\"file-icon\">\n            <i className=\"fas fa-upload\"></i>\n          </span>\n          <span className=\"file-label\">{name}</span>\n        </span>\n      </label>\n    </div>\n    {currentImageUrl && (\n      <img\n        width={width}\n        height={height}\n        src={currentImageUrl}\n        alt=\"Source\"\n      ></img>\n    )}\n  </>\n);\n\nconst readFile = (file: File) =>\n  new Promise<string>((resolve) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result as string);\n    reader.readAsDataURL(file);\n  });\n","import { dropdownParam } from '../../params/dropdownParam';\nimport { imagePickerParam } from '../../params/imagePickerParam';\nimport { buildTransform } from '../types';\nimport {\n  isTransparent,\n  getPixelFromSource,\n  mapFrames,\n  mapCoords,\n  resizeImage,\n} from '../utils';\n\nexport const backgroundImage = buildTransform({\n  name: 'Background Image',\n  description: 'Select another image to be used as a background or foreground',\n  params: [\n    imagePickerParam({\n      name: 'Image',\n    }),\n    dropdownParam({\n      name: 'Type',\n      defaultValue: 'background',\n      options: [\n        {\n          name: 'Background',\n          value: 'background',\n        },\n        {\n          name: 'Foreground',\n          value: 'foreground',\n        },\n      ] as const,\n    }),\n  ] as const,\n  fn: ({ image, parameters }) => {\n    const otherImage = resizeImage({\n      image: parameters[0].image,\n      newWidth: image.dimensions[0],\n      newHeight: image.dimensions[1],\n    });\n    const type = parameters[1];\n\n    return mapFrames(image, (data) => {\n      return mapCoords(image.dimensions, (coord) => {\n        const src = getPixelFromSource(image.dimensions, data, coord);\n        const otherImageSrc = getPixelFromSource(\n          otherImage.dimensions,\n          otherImage.frames[0].data,\n          coord\n        );\n\n        if (type === 'background') {\n          // Only print the other image if the src image is transparent here\n          return isTransparent(src) ? otherImageSrc : src;\n        } else {\n          return isTransparent(otherImageSrc) ? src : otherImageSrc;\n        }\n      });\n    });\n  },\n});\n","import React from 'react';\nimport { ParamFunction, ParamValue } from '../domain/types';\n\nconst TextParam: React.FC<{\n  name: string;\n  value?: string;\n  onChange: (v: ParamValue<string>) => void;\n}> = ({ name, value, onChange }) => {\n  const [val, setVal] = React.useState(value);\n\n  return (\n    <div className=\"field\" style={{ maxWidth: '12em' }}>\n      <label className=\"label\">{name}</label>\n      <div className=\"control has-icons-left has-icons-right\">\n        <input\n          type=\"text\"\n          value={val}\n          name={name}\n          onChange={(e) => setVal(e.target.value)}\n          onBlur={() =>\n            onChange(value ? { valid: true, value } : { valid: false })\n          }\n        />\n      </div>\n    </div>\n  );\n};\n\nexport const textParam = (args: {\n  name: string;\n  defaultValue?: string;\n}): ParamFunction<string> => ({\n  name: args.name,\n  defaultValue:\n    args.defaultValue !== undefined\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n  fn: (params) => (\n    <TextParam\n      name={args.name}\n      onChange={params.onChange}\n      value={params.value.valid ? params.value.value : undefined}\n    />\n  ),\n});\n","import React from 'react';\nimport { readImage } from '../domain/run';\n\nimport { ParamFunction, Image } from '../domain/types';\nimport { ImagePicker } from '../components/ImagePicker';\n\ninterface ImagePickerParamsProps {\n  name: string;\n}\n\nexport function imagePickerParam({\n  name,\n}: ImagePickerParamsProps): ParamFunction<{ dataUrl: string; image: Image }> {\n  return {\n    name,\n    defaultValue: { valid: false },\n    fn: (params) => (\n      <div className=\"field\" style={{ maxWidth: '12em' }}>\n        <label className=\"label\">{name}</label>\n        <div className=\"control has-icons-left has-icons-right\">\n          <ImagePicker\n            currentImageUrl={\n              params.value.valid ? params.value.value.dataUrl : undefined\n            }\n            width={64}\n            height={64}\n            onChange={async (dataUrl) => {\n              const image = await readImage(dataUrl);\n              params.onChange({ valid: true, value: { dataUrl, image } });\n            }}\n          />\n        </div>\n      </div>\n    ),\n  };\n}\n","import React from 'react';\nimport { Tooltip } from '../components/Tooltip';\nimport { ParamValue, ParamFunction } from '../domain/types';\n\ntype ParsedParam<T> =\n  | { valid: true; value: T }\n  | { valid: false; reason: string };\n\nconst FloatParam: React.FC<{\n  name: string;\n  value?: number;\n  description?: string;\n  parse: (s: string) => ParsedParam<number>;\n  onChange: (v: ParamValue<number>) => void;\n}> = ({ name, value, description, parse, onChange }) => {\n  const [val, setVal] = React.useState(\n    value === undefined ? undefined : value.toString()\n  );\n  const [invalidText, setInvalidText] = React.useState('');\n\n  const onBlur = () => {\n    if (val === undefined) {\n      // Only if no default value provided and no changes have happened\n      return;\n    }\n\n    if (value && val === value.toString()) {\n      return; // Don't fire an onChange event if things haven't changed\n    }\n    const n = parse(val);\n    if (n.valid) {\n      setInvalidText('');\n    } else {\n      setInvalidText(n.reason);\n    }\n    onChange(n);\n  };\n\n  return (\n    <div className=\"field\" style={{ maxWidth: '12em' }}>\n      <label className=\"label\">\n        <div>\n          <span>{name}</span>\n          {description && <Tooltip text={description} />}\n        </div>\n      </label>\n      <div className=\"control has-icons-left has-icons-right\">\n        <input\n          className=\"input\"\n          type=\"text\"\n          defaultValue={value}\n          onChange={(e) => {\n            setVal(e.target.value);\n          }}\n          onBlur={onBlur}\n        />\n      </div>\n      {invalidText && <p className=\"help is-danger\">{invalidText}</p>}\n    </div>\n  );\n};\n\nexport const floatParam = (args: {\n  name: string;\n  defaultValue?: number;\n  min?: number;\n  max?: number;\n  description?: string;\n}): ParamFunction<number> => ({\n  name: args.name,\n  defaultValue:\n    args.defaultValue !== undefined\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n  fn: (params) => {\n    const { min, max } = args;\n    const parse = (s: string): ParsedParam<number> => {\n      const n = parseFloat(s);\n      if (isNaN(n)) {\n        return { valid: false, reason: 'Must be a number' };\n      }\n      if (min !== undefined && n < min) {\n        return {\n          valid: false,\n          reason: `Must be greater than or equal to ${min}`,\n        };\n      }\n      if (max !== undefined && n > max) {\n        return { valid: false, reason: `Must be less than or equal to ${max}` };\n      }\n      return { valid: true, value: n };\n    };\n\n    return (\n      <FloatParam\n        name={args.name}\n        description={args.description}\n        parse={parse}\n        onChange={params.onChange}\n        value={params.value.valid ? params.value.value : undefined}\n      />\n    );\n  },\n});\n","import { buildTransform } from '../types';\nimport { mapImage } from '../utils';\nimport { floatParam } from '../../params/floatParam';\n\nexport const bounce = buildTransform({\n  name: 'Bounce',\n  description: 'Make the image bounce up and down',\n  params: [\n    floatParam({\n      name: 'Bounce Speed',\n      defaultValue: 5,\n      min: 0,\n    }),\n  ],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel, parameters }) => {\n    const [x, y] = coord;\n    const yOffset =\n      y +\n      Math.round(\n        parameters[0] * Math.sin((frameIndex / frameCount) * 2 * Math.PI)\n      );\n\n    return getSrcPixel([x, yOffset]);\n  }),\n});\n","import React from 'react';\nimport { ParamValue, ParamFunction } from '../domain/types';\n\ntype ParsedParam<T> =\n  | { valid: true; value: T }\n  | { valid: false; reason: string };\n\nconst IntParam: React.FC<{\n  name: string;\n  value?: number;\n  parse: (s: string) => ParsedParam<number>;\n  onChange: (v: ParamValue<number>) => void;\n}> = ({ name, value, parse, onChange }) => {\n  const [val, setVal] = React.useState(\n    value === undefined ? undefined : value.toString()\n  );\n  const [invalidText, setInvalidText] = React.useState('');\n\n  const onBlur = () => {\n    if (val === undefined) {\n      // Only if no default value provided and no changes have happened\n      return;\n    }\n\n    if (value && val === value.toString()) {\n      return; // Don't fire an onChange event if things haven't changed\n    }\n    const n = parse(val);\n    if (n.valid) {\n      setInvalidText('');\n    } else {\n      setInvalidText(n.reason);\n    }\n    onChange(n);\n  };\n\n  return (\n    <div className=\"field\" style={{ maxWidth: '12em' }}>\n      <label className=\"label\">{name}</label>\n      <div className=\"control has-icons-left has-icons-right\">\n        <input\n          className=\"input\"\n          type=\"text\"\n          defaultValue={value}\n          onChange={(e) => {\n            setVal(e.target.value);\n          }}\n          onBlur={onBlur}\n        />\n      </div>\n      {invalidText && <p className=\"help is-danger\">{invalidText}</p>}\n    </div>\n  );\n};\n\nexport const intParam = (args: {\n  name: string;\n  defaultValue?: number;\n  min?: number;\n  max?: number;\n}): ParamFunction<number> => ({\n  name: args.name,\n  defaultValue:\n    args.defaultValue !== undefined\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n  fn: (params) => {\n    const { min, max } = args;\n    const parse = (s: string): ParsedParam<number> => {\n      const n = parseInt(s, 10);\n      if (isNaN(n)) {\n        return { valid: false, reason: 'Must be an integer' };\n      }\n      if (min !== undefined && n < min) {\n        return {\n          valid: false,\n          reason: `Must be greater than or equal to ${min}`,\n        };\n      }\n      if (max !== undefined && n > max) {\n        return { valid: false, reason: `Must be less than or equal to ${max}` };\n      }\n      return { valid: true, value: n };\n    };\n\n    return (\n      <IntParam\n        name={args.name}\n        parse={parse}\n        onChange={params.onChange}\n        value={params.value.valid ? params.value.value : undefined}\n      />\n    );\n  },\n});\n","import { buildTransform } from '../types';\nimport { mapImage, clampColor } from '../utils';\nimport { intParam } from '../../params/intParam';\n\nexport const brightness = buildTransform({\n  name: 'Brightness',\n  description: 'Increase or decrease the brightness of the image',\n  params: [\n    intParam({\n      name: 'Amount',\n      defaultValue: 0,\n      min: -100,\n      max: 100,\n    })\n  ],\n  fn: mapImage(({ coord, getSrcPixel, parameters }) => {\n    const [amount] = parameters;\n    const rawAmount = amount / 100 * 255;\n    const p = getSrcPixel(coord);\n    return clampColor([p[0] + rawAmount, p[1] + rawAmount, p[2] + rawAmount, p[3]])\n  }),\n});\n","import { buildTransform } from '../types';\nimport { mapImage } from '../utils';\nimport { floatParam } from '../../params/floatParam';\n\nexport const circle = buildTransform({\n  name: 'Circle',\n  params: [\n    floatParam({\n      name: 'Radius',\n      defaultValue: 10,\n      min: 0,\n    }),\n  ],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel, parameters }) => {\n    const [radius] = parameters;\n    const [x, y] = coord;\n    const xOffset = Math.round(\n      radius * Math.sin(-2 * Math.PI * (frameIndex / frameCount))\n    );\n    const yOffset = Math.round(\n      radius * Math.cos(-2 * Math.PI * (frameIndex / frameCount))\n    );\n    return getSrcPixel([x + xOffset, y + yOffset]);\n  }),\n});\n","import { buildTransform } from '../types';\nimport { mapImage } from '../utils';\nimport { floatParam } from '../../params/floatParam';\n\nexport const expand = buildTransform({\n  name: 'Expand',\n  params: [\n    floatParam({\n      name: 'Radius',\n      defaultValue: 10,\n      min: 0,\n    }),\n  ],\n  fn: mapImage(\n    ({\n      dimensions,\n      coord,\n      frameCount,\n      frameIndex,\n      getSrcPixel,\n      parameters,\n    }) => {\n      const idx = frameIndex / frameCount;\n      const dist = Math.cos(idx * 2 * Math.PI) * parameters[0];\n\n      // Kind of follows the same algorithm as resize, except the amount is dynamic\n      const [width, height] = dimensions;\n      const centerX = width / 2;\n      const centerY = height / 2;\n\n      const [x, y] = coord;\n      const xRatio = (x - centerX) / width;\n      const yRatio = (y - centerY) / height;\n\n      const xOffset = Math.floor(dist * xRatio);\n      const yOffset = Math.round(dist * yRatio);\n      return getSrcPixel([x - xOffset, y - yOffset]);\n    }\n  ),\n});\n","import { buildTransform } from '../types';\nimport { mapImage } from '../utils';\nimport { floatParam } from '../../params/floatParam';\n\n// Probably still needs work -- the inner pixels get all funky still\nexport const fisheye = buildTransform({\n  name: 'Fisheye',\n  params: [floatParam({ name: 'radius', defaultValue: 10, min: 0 })],\n  fn: mapImage(\n    ({\n      dimensions,\n      coord,\n      frameCount,\n      frameIndex,\n      getSrcPixel,\n      parameters,\n    }) => {\n      const idx = frameIndex / frameCount;\n      const expanding = idx < 0.5;\n      const [width, height] = dimensions;\n      const dist = (expanding ? idx : 1 - idx) * parameters[0];\n      const centerX = width / 2;\n      const centerY = height / 2;\n\n      const [x, y] = coord;\n      const angle = Math.atan2(centerY - y, centerX - x);\n\n      const xOffset = Math.round(dist * Math.cos(angle));\n      const yOffset = Math.round(dist * Math.sin(angle));\n      return getSrcPixel([x + xOffset, y + yOffset]);\n    }\n  ),\n});\n","import { Frame, buildTransform } from '../types';\nimport { repeat } from '../utils';\nimport { intParam } from '../../params/intParam';\n\nexport const frameCount = buildTransform({\n  name: 'Frame Count',\n  description: 'Set how many frames of animation there will be. This is required for all animation transforms',\n  params: [\n    intParam({\n      name: 'Number of Frames',\n      defaultValue: 10,\n      min: 1,\n    }),\n  ],\n  fn: ({ image, parameters }) => {\n    const [frameCount] = parameters;\n\n    const currentFrames = image.frames;\n\n    // Resulting image will contain frameCount frames.\n    // If the original image had less than that, then we'll copy the last frame until we have enough.\n    // If the original has more frames, then we'll discard the last ones.\n    const frames = repeat(frameCount).map(\n      (i): Frame => ({\n        data: currentFrames[i]\n          ? currentFrames[i].data\n          : currentFrames[currentFrames.length - 1].data,\n      })\n    );\n\n    return {\n      dimensions: image.dimensions,\n      frames,\n    };\n  },\n});\n","import { buildTransform } from '../types';\nimport { mapImage, isTransparent, getAveragePixelValue } from '../utils';\n\nexport const grayscale = buildTransform({\n  name: 'Grayscale',\n  params: [],\n  fn: mapImage(({ coord, getSrcPixel }) => {\n    const srcPixel = getSrcPixel(coord);\n\n    if (isTransparent(srcPixel)) {\n      return [0, 0, 0, 0];\n    }\n\n    const gray = getAveragePixelValue(srcPixel);\n\n    return [gray, gray, gray, 255];\n  }),\n});\n","import { buildTransform } from '../types';\nimport seedrandom from 'seedrandom';\n\nimport { Color } from '../types';\nimport {\n  mapFrames,\n  mapCoords,\n  getPixelFromSource,\n  isTransparent,\n} from '../utils';\nimport { textParam } from '../../params/textParam';\n\nconst lightningIntensities: Color[] = [\n  [0, 15, 40, 255], // dark color\n  [150, 150, 175, 255],\n  [180, 180, 205, 255],\n  [210, 210, 235, 255],\n];\n\nexport const lightning = buildTransform({\n  name: 'Lightning',\n  params: [\n    textParam({\n      name: 'Random Seed',\n      defaultValue: 'lightning',\n    }),\n  ],\n  fn: ({ image, parameters }) => {\n    const random = seedrandom(parameters[0]);\n    return mapFrames(image, (data) => {\n      const i = random();\n      const flashIntensity = i < 0.9 ? 0 : i < 0.95 ? 1 : i < 0.98 ? 2 : 3;\n\n      return mapCoords(image.dimensions, (coord) => {\n        const src = getPixelFromSource(image.dimensions, data, coord);\n\n        if (isTransparent(src)) {\n          return lightningIntensities[flashIntensity];\n        }\n\n        if (flashIntensity > 0) {\n          // We're flashing, so brighten up the image a little\n          const icf = 1.02 * flashIntensity;\n          return [src[0] * icf, src[1] * icf, src[2] * icf, src[3]];\n        }\n\n        // No lightning\n        return src;\n      });\n    });\n  },\n});\n","import { buildTransform, Color } from '../types';\nimport { isTransparent, getAveragePixelValue, mapImage } from '../utils';\n\nconst PARTY_COLORS: Color[] = [\n  [255, 141, 139, 255],\n  [254, 214, 137, 255],\n  [136, 255, 137, 255],\n  [135, 255, 255, 255],\n  [139, 181, 254, 255],\n  [215, 140, 255, 255],\n  [255, 140, 255, 255],\n  [255, 104, 247, 255],\n  [254, 108, 183, 255],\n  [255, 105, 104, 255],\n];\n\nexport const party = buildTransform({\n  name: 'Party',\n  params: [],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel }) => {\n    const srcPixel = getSrcPixel(coord);\n\n    if (isTransparent(srcPixel)) {\n      return [0, 0, 0, 0];\n    }\n\n    const partyColorIdx = Math.floor(\n      (frameIndex / frameCount) * PARTY_COLORS.length\n    );\n    const partyColor = PARTY_COLORS[partyColorIdx];\n\n    const gray = getAveragePixelValue(srcPixel);\n\n    return [\n      (gray * partyColor[0]) / 255,\n      (gray * partyColor[1]) / 255,\n      (gray * partyColor[2]) / 255,\n      255,\n    ];\n  }),\n});\n","import React from 'react';\nimport cn from 'classnames';\n\ninterface ExpandableProps {\n  mainEle: JSX.Element;\n}\n\nexport const Expandable: React.FC<ExpandableProps> = ({\n  mainEle,\n  children,\n}) => {\n  const [collapsed, setCollapsed] = React.useState(true);\n\n  return (\n    <div>\n      <div\n        className=\"is-clickable columns\"\n        onClick={() => setCollapsed(!collapsed)}\n      >\n        <div className=\"column is-four-fifths\">{mainEle}</div>\n        <span className=\"icon column\">\n          <i\n            className={cn(\n              'fas',\n              collapsed ? 'fa-chevron-up' : 'fa-chevron-down'\n            )}\n          ></i>\n        </span>\n      </div>\n      {!collapsed && <div>{children}</div>}\n    </div>\n  );\n};\n","import React from 'react';\nimport { SketchPicker } from 'react-color';\nimport { Expandable } from '../components/Expandable';\nimport { Tooltip } from '../components/Tooltip';\n\nimport { ParamValue, ParamFunction, Color } from '../domain/types';\nimport { fromHexColor, toHexColor } from '../domain/utils';\n\nconst ColorBox: React.FC<{ color: Color }> = ({ color }) => (\n  <div\n    style={{\n      width: '1.5em',\n      height: '1.5em',\n      backgroundColor: toHexColor(color),\n    }}\n  />\n);\n\nconst ColorPickerParam: React.FC<{\n  name: string;\n  value?: Color;\n  description?: string;\n  onChange: (v: ParamValue<Color>) => void;\n}> = ({ name, value, description, onChange }) => {\n  return (\n    <Expandable\n      mainEle={\n        <div className=\"columns\">\n          <label className=\"label column is-four-fifths\">\n            {name}\n            {description && <Tooltip text={description} />}\n          </label>\n          <span className=\"column\">{value && <ColorBox color={value} />}</span>\n        </div>\n      }\n    >\n      <SketchPicker\n        disableAlpha={true}\n        presetColors={[]}\n        color={value ? toHexColor(value) : undefined}\n        onChangeComplete={(c) =>\n          onChange({ valid: true, value: fromHexColor(c.hex) })\n        }\n      />\n    </Expandable>\n  );\n};\n\nexport function colorPickerParam(args: {\n  name: string;\n  defaultValue?: Color;\n  description?: string;\n}): ParamFunction<Color> {\n  return {\n    name: args.name,\n    defaultValue: args.defaultValue\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n    fn: (params) => {\n      return (\n        <ColorPickerParam\n          name={args.name}\n          value={params.value.valid ? params.value.value : undefined}\n          onChange={params.onChange}\n        />\n      );\n    },\n  };\n}\n","// TODO Varargs???\nimport { buildTransform } from '../types';\nimport { mapImage, isTransparent, fromHexColor } from '../utils';\nimport { colorPickerParam } from '../../params/colorPickerParam';\nimport { intParam } from '../../params/intParam';\n\nconst DEFAULT_COLORS = [\n  '#FF0000',\n  '#FF9600',\n  '#FFFF00',\n  '#00FF00',\n  '#00FF96',\n  '#00FFFF',\n  '#0000FF',\n  '#B400FF',\n  '#0000FF',\n  '#00FFFF',\n  '#00FF96',\n  '#00FF00',\n  '#FFFF00',\n  '#FF9600',\n];\n\nexport const pinwheel = buildTransform({\n  name: 'Pinwheel',\n  description: 'Create a pinwheel of colors',\n  params: [\n    intParam({\n      name: 'Offset X',\n      defaultValue: 0,\n    }),\n    intParam({\n      name: 'Offset Y',\n      defaultValue: 40,\n    }),\n    intParam({\n      name: 'Group Count',\n      defaultValue: 1,\n      min: 1\n    }),\n    ...DEFAULT_COLORS.map((c, i) =>\n      colorPickerParam({\n        name: `Color ${i}`,\n        defaultValue: fromHexColor(c),\n      })\n    ),\n  ] as const,\n  fn: mapImage(\n    ({\n      coord,\n      dimensions,\n      frameCount,\n      frameIndex,\n      getSrcPixel,\n      parameters,\n    }) => {\n      const srcPixel = getSrcPixel(coord);\n\n      const [offsetX, offsetY, groupCount, ...colors] = parameters;\n\n      const ribbonCount = colors.length * groupCount;\n      const ribbonArcDegrees = Math.round(360 / ribbonCount);\n      // Need to make sure ribbonCount is always a multiple of the number of images, otherwise we\n      //  won't get a smooth transition.\n      // We'll cut off colors from the end of the list until we get an even multiple.\n      let colorsLength = colors.length;\n      while ((ribbonCount / colorsLength).toFixed(2).slice(-2) !== '00') {\n        colorsLength -= 1;\n      }\n\n      // Make the transparent parts colorful\n      if (isTransparent(srcPixel)) {\n        const centerX = dimensions[0] / 2 + offsetX;\n        const centerY = dimensions[1] / 2 + offsetY;\n        const [x, y] = coord;\n        const xRelCenter = x - centerX;\n        const yRelCenter = y - centerY;\n\n        const pointAngle =\n          (360 + (Math.atan2(yRelCenter, xRelCenter) * 180) / Math.PI) % 360;\n\n        const colorIdx =\n          Math.floor(pointAngle / ribbonArcDegrees) % colorsLength;\n\n        // Increment colorIdx based on current frame progress\n        const frameProgress = frameIndex / frameCount;\n        const idx =\n          (Math.floor(frameProgress * colorsLength) + colorIdx) % colorsLength;\n        return colors[idx];\n      }\n\n      return srcPixel;\n    }\n  ),\n});\n","import { backgroundParty } from './background-party';\nimport { backgroundImage } from './background-image';\nimport { bounce } from './bounce';\nimport { brightness } from './brightness';\nimport { circle } from './circle';\nimport { expand } from './expand';\nimport { fisheye } from './fisheye';\nimport { frameCount } from './frame-count';\nimport { grayscale } from './grayscale';\nimport { lightning } from './lightning';\nimport { party } from './party';\nimport { pinwheel } from './pinwheel';\nimport { radiance } from './radiance';\nimport { resize } from './resize';\nimport { resizeBackground } from './resize-background';\nimport { ripple } from './ripple';\nimport { rotate } from './rotate';\nimport { roxbury } from './roxbury';\nimport { shake } from './shake';\nimport { solidBackground } from './solid-background';\nimport { staticc } from './static';\nimport { transparency } from './transparency';\nimport { transpose } from './transpose';\n\nexport const POSSIBLE_TRANSFORMS = [\n  backgroundImage,\n  backgroundParty,\n  bounce,\n  brightness,\n  circle,\n  expand,\n  fisheye,\n  frameCount,\n  grayscale,\n  lightning,\n  party,\n  pinwheel,\n  radiance,\n  resize,\n  resizeBackground,\n  ripple,\n  rotate,\n  roxbury,\n  shake,\n  solidBackground,\n  staticc,\n  transparency,\n  transpose,\n];\n","// TODO Varargs\nimport { buildTransform } from '../types';\nimport { mapImage, isTransparent, repeat, fromHexColor } from '../utils';\nimport { colorPickerParam } from '../../params/colorPickerParam';\nimport { intParam } from '../../params/intParam';\n\nconst DEFAULT_COLORS = [\n  '#FF0000',\n  '#FF9600',\n  '#FFFF00',\n  '#00FF00',\n  '#00FF96',\n  '#00FFFF',\n  '#0000FF',\n  '#B400FF',\n];\n\nexport const radiance = buildTransform({\n  name: 'Radiance',\n  params: [\n    intParam({\n      name: 'Group Count',\n      defaultValue: 1,\n      min: 1\n    }),\n    ...DEFAULT_COLORS.map((c, i) =>\n      colorPickerParam({\n        name: `Color ${i}`,\n        defaultValue: fromHexColor(c),\n      })\n    ),\n  ] as const,\n  fn: mapImage(\n    ({\n      coord,\n      dimensions,\n      frameCount,\n      frameIndex,\n      getSrcPixel,\n      parameters,\n    }) => {\n      const srcPixel = getSrcPixel(coord);\n      \n      const [groupCount, ...colors] = parameters;\n      const colorList = repeat(groupCount).flatMap(() => colors);\n\n      // Make the transparent parts colorful\n      if (isTransparent(srcPixel)) {\n        const [width, height] = dimensions;\n        const centerX = width / 2;\n        const centerY = height / 2;\n        const [x, y] = coord;\n        const xRelCenter = x - centerX;\n        const yRelCenter = y - centerY;\n\n        const maxDist = Math.sqrt(\n          (width / 2) * (width / 2) + (height / 2) * (height / 2)\n        );\n        const distFromCenter = Math.sqrt(\n          yRelCenter * yRelCenter + xRelCenter * xRelCenter\n        );\n\n        const colorIdx =\n          Math.floor((1 - distFromCenter / maxDist) * colorList.length) %\n          colorList.length;\n\n        // Increment colorIdx based on current frame progress\n        const frameProgress = frameIndex / frameCount;\n        const idx =\n          (Math.floor(frameProgress * colorList.length) + colorIdx) %\n          colorList.length;\n        return colorList[idx];\n      }\n\n      return srcPixel;\n    }\n  ),\n});\n","import { buildTransform } from '../types';\nimport { resizeImage } from '../utils';\nimport { intParam } from '../../params/intParam';\n\nexport const resize = buildTransform({\n  name: 'Resize',\n  params: [\n    intParam({\n      name: 'Width',\n      defaultValue: 128,\n      min: 1,\n    }),\n    intParam({\n      name: 'Height',\n      defaultValue: 128,\n      min: 1,\n    }),\n  ] as const,\n  fn: ({ image, parameters }) => {\n    const [newWidth, newHeight] = parameters;\n    return resizeImage({\n      image,\n      newWidth,\n      newHeight,\n    });\n  },\n});\n","import { buildTransform, Color, Dimensions } from '../types';\nimport { assert, getPixelFromSource, writePixel } from '../utils';\nimport { intParam } from '../../params/intParam';\n\nexport const resizeBackground = buildTransform({\n  name: 'Resize Background',\n  params: [\n    intParam({ name: 'Width', defaultValue: 128, min: 0 }),\n    intParam({ name: 'Height', defaultValue: 128, min: 0 }),\n  ],\n  fn: ({ image, parameters }) => {\n    const [width, height] = image.dimensions;\n    const [newWidth, newHeight] = parameters;\n    assert(\n      newWidth >= width,\n      'New width for resize-background needs to be greater than or equal to the original'\n    );\n    assert(\n      newHeight >= height,\n      'New height for resize-background needs to be greater than or equal to the original'\n    );\n\n    const newDimensions: Dimensions = [newWidth, newHeight];\n\n    const xPadding = (newWidth - width) / 2;\n    const yPadding = (newHeight - height) / 2;\n\n    const newFrames = image.frames.map((frame) => {\n      const transformedImageData = new Uint8Array(newWidth * newHeight * 4);\n      for (let y = 0; y < newHeight; y += 1) {\n        for (let x = 0; x < newWidth; x += 1) {\n          const pixel: Color =\n            x > xPadding &&\n            x < newWidth - xPadding &&\n            y > yPadding &&\n            y < newHeight - yPadding\n              ? getPixelFromSource(image.dimensions, frame.data, [\n                  x - xPadding,\n                  y - yPadding,\n                ])\n              : [0, 0, 0, 0];\n          writePixel({\n            color: pixel,\n            coord: [x, y],\n            dimensions: newDimensions,\n            image: transformedImageData,\n          });\n        }\n      }\n      return {\n        data: transformedImageData,\n      };\n    });\n\n    return {\n      frames: newFrames,\n      dimensions: newDimensions,\n    };\n  },\n});\n","import { buildTransform } from '../types';\nimport { mapFrames, mapCoords, getPixelFromSource } from '../utils';\nimport { floatParam } from '../../params/floatParam';\n\nexport const ripple = buildTransform({\n  name: 'Ripple',\n  params: [\n    floatParam({\n      name: 'Amplitude',\n      defaultValue: 10,\n      description: 'How strong the ripple effect should be',\n    }),\n    floatParam({\n      name: 'Period',\n      defaultValue: 2,\n      min: 0,\n      description: 'How many ripples you want',\n    }),\n  ],\n  fn: ({ image, parameters }) =>\n    mapFrames(image, (data, frameIndex, frameCount) => {\n      const [amplitude, period] = parameters;\n\n      const height = image.dimensions[1];\n      const shift = (frameIndex / frameCount) * 2 * Math.PI;\n      return mapCoords(image.dimensions, ([x, y]) => {\n        const offset = Math.round(\n          amplitude * Math.sin((y / height) * period * Math.PI + shift)\n        );\n\n        return getPixelFromSource(image.dimensions, data, [x + offset, y]);\n      });\n    }),\n});\n","import { mapImage } from '../utils';\nimport { buildTransform, Coord } from '../types';\nimport { dropdownParam } from '../../params/dropdownParam';\n\nexport const rotate = buildTransform({\n  name: 'Rotate',\n  params: [\n    dropdownParam({\n      name: 'Direction',\n      defaultValue: -1,\n      options: [\n        { name: 'Clockwise', value: -1 },\n        { name: 'Counter-Clockwise', value: 1 },\n      ],\n    }),\n  ],\n  fn: mapImage(\n    ({\n      dimensions,\n      coord,\n      frameCount,\n      frameIndex,\n      getSrcPixel,\n      parameters,\n    }) => {\n      const [sign] = parameters;\n      const centerX = dimensions[0] / 2;\n      const centerY = dimensions[1] / 2;\n      const [x, y] = coord;\n      const xRelCenter = x - centerX;\n      const yRelCenter = y - centerY;\n\n      const amount = (frameIndex / frameCount) * (sign || 1);\n      const cos = Math.cos(2 * Math.PI * amount);\n      const sin = Math.sin(2 * Math.PI * amount);\n\n      const newCoord: Coord = [\n        Math.round(centerX + xRelCenter * cos - yRelCenter * sin),\n        Math.round(centerY + yRelCenter * cos + xRelCenter * sin),\n      ];\n\n      return getSrcPixel(newCoord);\n    }\n  ),\n});\n","import { mapFrames, mapCoords, getPixelFromSource } from '../utils';\nimport { buildTransform, Coord } from '../types';\n\nexport const roxbury = buildTransform({\n  name: 'Roxbury',\n  params: [],\n  fn: ({ image }) =>\n    mapFrames(image, (data, frameIndex, frameCount) => {\n      const idx = frameIndex / frameCount;\n      // 4 phases:\n      //  0 -> freeze\n      //  1 -> rotate clockwise\n      //  2 -> freeze\n      //  3 -> rotate counter-clockwise\n      const phase = Math.floor(idx * 4);\n      const phaseIdx = (idx - phase / 4) * 4;\n\n      const maxAngle = (Math.PI / 2) * 0.2; // 40% of 90 degrees\n\n      const angle =\n        phase === 0\n          ? 0\n          : phase === 1\n          ? phaseIdx * maxAngle // Rotate clockwise\n          : phase === 2\n          ? maxAngle // Freeze!\n          : (1 - phaseIdx) * maxAngle; // Rotate counter-clockwise\n\n      const cos = Math.cos(-angle * 1.35);\n      const sin = Math.sin(-angle * 1.35);\n\n      const rotatePointX = image.dimensions[0] * 0.25;\n      const rotatePointY = image.dimensions[1] * 0.7;\n\n      return mapCoords(image.dimensions, (coord) => {\n        const [x, y] = coord;\n        const xRelCenter = Math.floor(x - rotatePointX + 8 * Math.sin(angle));\n        const yRelCenter = Math.floor(y - rotatePointY + 8 * Math.cos(angle));\n\n        const newCoord: Coord = [\n          Math.round(rotatePointX + xRelCenter * cos - yRelCenter * sin),\n          Math.round(rotatePointY + yRelCenter * cos + xRelCenter * sin),\n        ];\n\n        return getPixelFromSource(image.dimensions, data, newCoord);\n      });\n    }),\n});\n","import { buildTransform } from '../types';\nimport { mapImage } from '../utils';\nimport { floatParam } from '../../params/floatParam';\n\nexport const shake = buildTransform({\n  name: 'Shake',\n  params: [floatParam({ name: 'Shake Speed', defaultValue: 10, min: 0 })],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel, parameters }) => {\n    const [shakeSpeed] = parameters;\n    const [x, y] = coord;\n    const xOffset =\n      x +\n      Math.round(\n        shakeSpeed * Math.cos((frameIndex / frameCount) * 2 * Math.PI)\n      );\n\n    return getSrcPixel([xOffset, y]);\n  }),\n});\n","import { buildTransform } from '../types';\nimport { mapImage, isTransparent, fromHexColor } from '../utils';\nimport { colorPickerParam } from '../../params/colorPickerParam';\n\nexport const solidBackground = buildTransform({\n  name: 'Solid Background',\n  params: [\n    colorPickerParam({\n      name: 'Background Color',\n      defaultValue: fromHexColor('#000000'),\n    }),\n  ],\n  fn: mapImage(({ coord, getSrcPixel, parameters }) => {\n    const [color] = parameters;\n    const p = getSrcPixel(coord);\n    return isTransparent(p) ? color : p;\n  }),\n});\n","import { buildTransform } from '../types';\nimport { mapImage, isTransparent } from '../utils';\nimport { floatParam } from '../../params/floatParam';\n\nexport const staticc = buildTransform({\n  name: 'Static',\n  params: [floatParam({ name: 'Strength', defaultValue: 10, min: 0 })],\n  fn: mapImage(({ coord, getSrcPixel, parameters, random }) => {\n    const [strength] = parameters;\n    const src = getSrcPixel(coord);\n\n    if (isTransparent(src)) {\n      return [0, 0, 0, 0];\n    }\n\n    const inverse = Math.ceil(random() * strength) > 1;\n\n    return inverse ? [255 - src[0], 255 - src[1], 255 - src[2], src[3]] : src;\n  }),\n});\n","import { buildTransform } from '../types';\nimport { fromHexColor, mapImage } from '../utils';\nimport { colorPickerParam } from '../../params/colorPickerParam';\nimport { intParam } from '../../params/intParam';\n\nexport const transparency = buildTransform({\n  name: 'Transparent Color',\n  params: [\n    colorPickerParam({\n      name: 'Transparent Color',\n      defaultValue: fromHexColor('#000000'),\n    }),\n    intParam({\n      name: 'Tolerance',\n      defaultValue: 10,\n      min: 0,\n      max: 100,\n    }),\n  ] as const,\n  fn: mapImage(({ coord, getSrcPixel, parameters }) => {\n    const [color, tolerance] = parameters;\n    const p = getSrcPixel(coord);\n    const diff0 = p[0] - color[0];\n    const diff1 = p[1] - color[1];\n    const diff2 = p[2] - color[2];\n    const diff = Math.sqrt(diff0 * diff0 + diff1 * diff1 + diff2 * diff2);\n    if ((diff / 255) * 100 <= tolerance) {\n      return [p[0], p[1], p[2], 0];\n    }\n    return p;\n  }),\n});\n","import { buildTransform } from '../types';\nimport { mapImage } from '../utils';\nimport { intParam } from '../../params/intParam';\n\nexport const transpose = buildTransform({\n  name: 'Transpose',\n  params: [\n    intParam({ name: 'X', defaultValue: 0 }),\n    intParam({ name: 'Y', defaultValue: 0 }),\n  ],\n  fn: mapImage(({ coord, getSrcPixel, parameters }) => {\n    const [transX, transY] = parameters;\n    const [x, y] = coord;\n\n    return getSrcPixel([x + transX, y + transY]);\n  }),\n});\n","import React from 'react';\nimport cn from 'classnames';\nimport { assert } from '../domain/utils';\nimport { runTransforms } from '../domain/run';\nimport { TransformInput, TransformWithParams } from '../domain/types';\nimport { intParam } from '../params/intParam';\n\ninterface ComputeBoxProps {\n  isDirty: boolean;\n  computeDisabled: boolean;\n  baseImageUrl?: string;\n  transforms: TransformWithParams<any>[];\n  onComputed: () => void;\n}\n\ntype ComputeState = { loading: false; results: string[] } | { loading: true };\n\nconst DEFAULT_FPS = 20;\nconst fpsParam = intParam({\n  name: 'Frames per Second',\n  defaultValue: DEFAULT_FPS,\n  min: 0,\n});\n\nexport const ComputeBox: React.FC<ComputeBoxProps> = ({\n  isDirty,\n  computeDisabled,\n  baseImageUrl,\n  transforms,\n  onComputed,\n}) => {\n  const [state, setState] = React.useState<ComputeState>({\n    loading: false,\n    results: [],\n  });\n  const [fpsChanged, setFpsChanged] = React.useState(false);\n  const [fps, setFps] = React.useState(DEFAULT_FPS);\n\n  const buttonDisabled = computeDisabled && !fpsChanged;\n\n  return (\n    <div className=\"box\">\n      <h3 className=\"title\">Create Gif</h3>\n      <div className=\"block\">\n        {fpsParam.fn({\n          value: { valid: true, value: fps },\n          onChange: (x) => {\n            if (x.valid) {\n              setFps(x.value);\n              setFpsChanged(true);\n            }\n          },\n        })}\n      </div>\n      <div className=\"block\">\n        <button\n          className={cn('button', 'block', { 'is-loading': state.loading })}\n          disabled={buttonDisabled}\n          onClick={async () => {\n            const transformInputs = transforms.map(\n              (t): TransformInput<any> => ({\n                transform: t.transform,\n                params: t.paramsValues.map((p) => {\n                  assert(p.valid);\n                  return p.value;\n                }),\n              })\n            );\n            setState({ loading: true });\n            setTimeout(async () => {\n              assert(\n                baseImageUrl,\n                'No source image, this button should be disabled!'\n              );\n              const gifs = await runTransforms(\n                baseImageUrl,\n                transformInputs,\n                fps\n              );\n              setState({\n                loading: false,\n                results: gifs,\n              });\n              setFpsChanged(false);\n              onComputed();\n            });\n          }}\n        >\n          <span>Compute</span>{' '}\n          {(isDirty || fpsChanged) && (\n            <span className=\"icon is-small\">\n              <i className=\"fas fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            </span>\n          )}\n        </button>\n      </div>\n      <div className=\"block\">\n        <div className=\"columns\">\n          {!state.loading &&\n            state.results.map((gif, idx) => (\n              <div className=\"column\">\n                <div>{transforms[idx].transform.name}</div>\n                <img\n                  src={gif}\n                  alt={`gif-${transforms[idx].transform.name}`}\n                ></img>\n              </div>\n            ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Dropdown } from './Dropdown';\n\nimport { ParamFunction, ParamValue, Transform } from '../domain/types';\n\ninterface SelectedTransform {\n  transform: Transform<any>;\n  paramValues: ParamValue<any>[];\n}\n\ninterface ImageTransformProps {\n  selectedTransform: SelectedTransform;\n  possibleTransforms: Transform<any>[];\n  index: number;\n  onSelect: (selected: SelectedTransform) => void;\n  onRemove: () => void;\n  onMoveLeft?: () => void;\n  onMoveRight?: () => void;\n}\n\nexport const ImageTransform: React.FC<ImageTransformProps> = ({\n  selectedTransform,\n  possibleTransforms,\n  index,\n  onSelect,\n  onRemove,\n  onMoveLeft,\n  onMoveRight,\n}) => {\n  return (\n    <div className=\"card\" style={{ padding: '0.75rem', maxWidth: '20rem' }}>\n      <div className=\"card-header-title\">\n        <div className=\"columns is-desktop\">\n          <div className=\"column\">\n            <div className=\"block\">\n              <span>{index + 1}</span>\n              <Dropdown\n                selected={selectedTransform.transform.name}\n                options={possibleTransforms.map((t) => ({\n                  name: t.name,\n                  value: t.name,\n                }))}\n                onChange={(newTransformName) => {\n                  const t = possibleTransforms.find(\n                    (t) => t.name === newTransformName\n                  )!;\n                  // Reset all the params when you select a new transform\n                  onSelect({\n                    transform: t,\n                    paramValues: t.params.map(\n                      (p: ParamFunction<any>) => p.defaultValue\n                    ),\n                  });\n                }}\n              />\n            </div>\n            {selectedTransform.transform.description && (\n              <div className=\"block\" style={{ fontSize: '0.75rem' }}>\n                {selectedTransform.transform.description}\n              </div>\n            )}\n          </div>\n          <div className=\"column columns\">\n            {onMoveLeft && (\n              <div className=\"icon column is-clickable\" onClick={onMoveLeft}>\n                <i className=\"fas fa-arrow-left\" aria-hidden=\"true\"></i>\n              </div>\n            )}\n            {onMoveRight && (\n              <div className=\"icon column is-clickable\" onClick={onMoveRight}>\n                <i className=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>\n              </div>\n            )}\n            <div className=\"icon column is-clickable\" onClick={onRemove}>\n              <i className=\"fas fa-trash\" aria-hidden=\"true\"></i>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"card-content\">\n        {selectedTransform.transform.params.map(\n          // Create elements for each of the parameters for the selectect transform.\n          // Each of these would get an onChange event so we know when the user has\n          //  selected a value.\n          (param: ParamFunction<any>, idx: number) => {\n            const ele = param.fn({\n              value: selectedTransform.paramValues[idx],\n              onChange: (v) => {\n                console.log('changing to ', v);\n                onSelect({\n                  ...selectedTransform,\n                  paramValues: selectedTransform.paramValues.map((x, i) => {\n                    if (i === idx) {\n                      return v;\n                    }\n                    return x;\n                  }),\n                });\n              },\n            });\n            return (\n              <div className=\"block\" key={param.name}>\n                {ele}\n              </div>\n            );\n          }\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { ParamFunction, Transform, TransformWithParams } from '../domain/types';\nimport { ImageTransform } from './ImageTransform';\n\ninterface TransformListProps {\n  currentTransforms: TransformWithParams<any>[];\n  possibleTransforms: Transform<any>[];\n  onTransformsChange: (t: TransformWithParams<any>[]) => void;\n}\n\nexport const ImageTransformList: React.FC<TransformListProps> = ({\n  currentTransforms,\n  possibleTransforms,\n  onTransformsChange,\n}) => (\n  <div className=\"box\">\n    <h3 className=\"title\">Image Transforms</h3>\n    <div className=\"block\">\n      <button\n        className=\"button\"\n        onClick={() =>\n          onTransformsChange([\n            ...currentTransforms,\n            {\n              transform: possibleTransforms[0],\n              paramsValues: possibleTransforms[0].params.map(\n                (p: ParamFunction<any>) => p.defaultValue\n              ),\n            },\n          ])\n        }\n      >\n        New Transform\n      </button>\n    </div>\n    <div\n      className=\"columns\"\n      style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)' }}\n    >\n      {currentTransforms.map((t, tIdx) => (\n        <div className=\"column\">\n          <ImageTransform\n            index={tIdx}\n            possibleTransforms={possibleTransforms}\n            selectedTransform={{\n              transform: t.transform,\n              paramValues: t.paramsValues,\n            }}\n            onRemove={() =>\n              onTransformsChange(\n                currentTransforms.filter((nextT, newIdx) => newIdx !== tIdx)\n              )\n            }\n            onMoveLeft={\n              tIdx > 0\n                ? () =>\n                    onTransformsChange(\n                      currentTransforms.map((nextT, newIdx) => {\n                        if (newIdx === tIdx - 1) {\n                          // This is the next item in the list\n                          return currentTransforms[newIdx + 1];\n                        } else if (tIdx === newIdx) {\n                          // This is the previous item\n                          return currentTransforms[tIdx - 1];\n                        } else {\n                          return nextT;\n                        }\n                      })\n                    )\n                : undefined\n            }\n            onMoveRight={\n              tIdx < currentTransforms.length - 1\n                ? () =>\n                    onTransformsChange(\n                      currentTransforms.map((nextT, newIdx) => {\n                        if (newIdx === tIdx + 1) {\n                          // This is the previous item in the list\n                          return currentTransforms[newIdx - 1];\n                        } else if (tIdx === newIdx) {\n                          // This is the next item\n                          return currentTransforms[tIdx + 1];\n                        } else {\n                          return nextT;\n                        }\n                      })\n                    )\n                : undefined\n            }\n            onSelect={(selected) =>\n              onTransformsChange(\n                currentTransforms.map((nextT, nextTIdx) => {\n                  if (tIdx === nextTIdx) {\n                    // This is the one we just changed\n                    return {\n                      transform: selected.transform,\n                      paramsValues: selected.paramValues,\n                      computedImage: undefined,\n                    };\n                  }\n                  // Reset all the images if we changed anything\n                  return {\n                    transform: nextT.transform,\n                    paramsValues: nextT.paramsValues,\n                    computedImage: undefined,\n                  };\n                })\n              )\n            }\n          />\n        </div>\n      ))}\n      <div className=\"box\" style={{ display: 'none' }}>\n        {/* Placeholder, because the last box has no bottom padding */}\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport { POSSIBLE_TRANSFORMS } from './domain/transforms';\nimport { ParamFunction, ParamValue, Transform } from './domain/types';\nimport { ComputeBox } from './components/ComputeBox';\nimport { ImagePicker } from './components/ImagePicker';\nimport { ImageTransformList } from './components/ImageTransformList';\n\nconst DEBUG = false;\n\ntype AppState = {\n  baseImage?: string;\n  transforms: {\n    transform: Transform<any>;\n    paramsValues: ParamValue<any>[];\n    computedImage?: string;\n  }[];\n  dirty: boolean;\n};\n\nexport const App: React.FC = () => {\n  const [state, setState] = React.useState<AppState>({\n    dirty: false,\n    transforms: [],\n    baseImage: undefined,\n  });\n\n  if (DEBUG) {\n    (window as any).STATE = state;\n  }\n\n  const computeBtnDisbled =\n    !state.baseImage ||\n    state.transforms.length === 0 ||\n    !state.dirty ||\n    state.transforms.some((t) => {\n      const params = t.transform.params as ParamFunction<any>[];\n      return (\n        params.length > 0 && t.paramsValues.every((p, i) => p.valid === false)\n      );\n    });\n\n  return (\n    <section>\n      <div className=\"container\">\n        <h1 className=\"title\" style={{ paddingTop: '16px' }}>\n          Partymoji\n        </h1>\n        <div>\n          <div className=\"box\">\n            <h3 className=\"title\">Source Image</h3>\n            <ImagePicker\n              name=\"Choose a source image\"\n              currentImageUrl={state.baseImage}\n              onChange={(baseImage) => {\n                setState({\n                  ...state,\n                  baseImage,\n                  dirty: true,\n                });\n              }}\n            />\n          </div>\n          <ImageTransformList\n            currentTransforms={state.transforms}\n            possibleTransforms={POSSIBLE_TRANSFORMS}\n            onTransformsChange={(transforms) =>\n              setState({\n                ...state,\n                dirty: true,\n                transforms,\n              })\n            }\n          />\n          <ComputeBox\n            isDirty={state.dirty}\n            baseImageUrl={state.baseImage}\n            computeDisabled={computeBtnDisbled}\n            transforms={state.transforms}\n            onComputed={() =>\n              setState({\n                ...state,\n                dirty: false,\n              })\n            }\n          />\n          {DEBUG && (\n            <div>\n              <code>{JSON.stringify(state, null, 2)}</code>\n            </div>\n          )}\n          <a\n            href=\"https://github.com/MikeyBurkman/partymoji\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <img\n              src=\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\"\n              width={64}\n              height={64}\n              alt=\"Github Link\"\n            ></img>\n          </a>\n        </div>\n      </div>\n    </section>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}