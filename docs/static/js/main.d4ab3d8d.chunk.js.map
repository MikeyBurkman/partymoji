{"version":3,"sources":["ImagePicker.tsx","components.tsx","ImageTransform.tsx","ImageTransformList.tsx","domain/types.ts","domain/utils.ts","domain/transforms/background-party.ts","params/dropdownParam.tsx","domain/run.ts","domain/transforms/background-image.ts","params/imagePickerParam.tsx","params/floatParam.tsx","domain/transforms/bounce.ts","domain/transforms/circle.ts","domain/transforms/expand.ts","domain/transforms/fisheye.ts","params/intParam.tsx","domain/transforms/frame-count.ts","domain/transforms/grayscale.ts","params/textParam.tsx","domain/transforms/lightning.ts","domain/transforms/party.ts","domain/transforms/resize.ts","domain/transforms/resize-background.ts","domain/transforms/ripple.ts","domain/transforms/rotate.ts","domain/transforms/roxbury.ts","domain/transforms/shake.ts","params/colorPickerParam.tsx","domain/transforms/solid-background.ts","domain/transforms/index.ts","domain/transforms/static.ts","domain/transforms/transparency.ts","domain/transforms/transpose.ts","ComputeBox.tsx","App.tsx","index.tsx"],"names":["ImagePicker","currentImageUrl","width","height","onChange","className","type","accept","name","event","a","files","Array","from","target","file","readFile","baseImage","src","alt","Promise","resolve","reader","FileReader","onload","result","readAsDataURL","Dropdown","selected","options","React","useState","hidden","setHidden","close","useCallback","document","removeEventListener","title","find","x","value","aria-haspopup","onClick","e","preventDefault","setTimeout","addEventListener","aria-hidden","role","style","visibility","maxHeight","overflowY","map","href","cn","Expandable","mainEle","children","collapsed","setCollapsed","ImageTransform","image","selectedTransform","possibleTransforms","onSelect","onRemove","onMoveLeft","onMoveRight","transform","t","newTransformName","paramValues","params","p","defaultValue","param","idx","ele","fn","v","console","log","i","ImageTransformList","currentTransforms","onTransformsChange","paramsValues","tIdx","undefined","filter","nextT","newIdx","length","nextTIdx","computedImage","display","buildTransform","args","toHexColor","r","g","b","toHexValue","c","s","toString","toUpperCase","fromHexColor","hex","parseInt","substr","isTransparent","pixel","randomColor","random","Math","floor","int32","getAveragePixelValue","round","clampColor","clamp","n","max","min","getPixelFromSource","dimensions","coord","y","getImageIndex","assert","condition","message","AssertionError","actual","mapFrames","cb","frames","frame","data","mapCoords","transformedImageData","Uint8Array","mapImage","parameters","imageData","frameIndex","frameCount","getSrcPixel","writePixel","color","resizeImage","newWidth","newHeight","xRatio","yRatio","newDimensions","srcX","srcY","PARTY_COLORS","backgroundParty","srcPixel","partyColorIdx","DropdownParam","valid","dropdownParam","runTransforms","inputDataUrl","transformList","fps","seedrandom","readImage","originalImage","images","reduce","transformInput","push","all","newImage","transparentColor","getTransparentColor","encodeTransparency","f","createGif","img","gif","gifEncoder","setFrameRate","setRepeat","setTransparent","writeHeader","on","chunk","dataUrl","URL","createObjectURL","Blob","forEach","addFrame","finish","res","rej","getPixels","err","getPixelResults","shape","hasTransparent","seenPixels","Set","attempt","px","add","findRandomColorNotInSet","set","attempts","col","has","backgroundImage","otherImage","otherImageSrc","FloatParam","parse","val","setVal","invalidText","setInvalidText","onBlur","reason","floatParam","parseFloat","isNaN","bounce","sin","PI","circle","radius","cos","expand","dist","centerX","centerY","fisheye","expanding","angle","atan2","IntParam","intParam","times","currentFrames","_","grayscale","gray","TextParam","lightningIntensities","lightning","textParam","flashIntensity","icf","party","partyColor","resize","resizeBackground","xPadding","yPadding","ripple","amplitude","period","shift","offset","rotate","sign","xRelCenter","yRelCenter","amount","roxbury","phase","phaseIdx","maxAngle","rotatePointX","rotatePointY","newCoord","shake","shakeSpeed","ColorBox","backgroundColor","ColorPickerParam","disableAlpha","presetColors","onChangeComplete","colorPickerParam","POSSIBLE_TRANSFORMS","strength","ceil","tolerance","diff0","diff1","diff2","sqrt","transX","transY","fpsParam","ComputeBox","isDirty","computeDisabled","baseImageUrl","transforms","onComputed","loading","results","state","setState","fpsChanged","setFpsChanged","setFps","buttonDisabled","disabled","transformInputs","gifs","App","dirty","computeBtnDisbled","some","every","paddingTop","rel","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d4ab3d8d.chunk.js","sourcesContent":["import React from 'react';\n\ninterface ImagePickerProps {\n  currentImageUrl?: string;\n  width?: number;\n  height?: number;\n  onChange: (imageUrl: string) => void;\n}\n\nexport const ImagePicker: React.FC<ImagePickerProps> = ({\n  currentImageUrl,\n  width,\n  height,\n  onChange,\n}) => (\n  <>\n    <div className=\"file block\">\n      <label className=\"file-label\">\n        <input\n          className=\"file-input\"\n          type=\"file\"\n          accept=\"image/png,image/jpg\"\n          name=\"source-png\"\n          onChange={async (event) => {\n            const files = Array.from(event.target.files ?? []);\n            const file = files[0];\n            const baseImage = await readFile(file);\n            onChange(baseImage);\n          }}\n        />\n        <span className=\"file-cta\">\n          <span className=\"file-icon\">\n            <i className=\"fas fa-upload\"></i>\n          </span>\n          <span className=\"file-label\">Choose a source image</span>\n        </span>\n      </label>\n    </div>\n    {currentImageUrl && (\n      <img\n        width={width}\n        height={height}\n        src={currentImageUrl}\n        alt=\"Source\"\n      ></img>\n    )}\n  </>\n);\n\nconst readFile = (file: File) =>\n  new Promise<string>((resolve) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result as string);\n    reader.readAsDataURL(file);\n  });\n","import React from 'react';\nimport cn from 'classnames';\n\ninterface DropdownProps {\n  selected: any;\n  options: readonly { name: string; value: any }[];\n  onChange: (value: any) => void;\n}\n\nexport const Dropdown: React.FC<DropdownProps> = ({\n  selected,\n  options,\n  onChange,\n}) => {\n  const [hidden, setHidden] = React.useState(true);\n  const close = React.useCallback(() => {\n    document.removeEventListener('click', close);\n    setHidden(true);\n  }, []);\n  const title = options.find((x) => x.value === selected)?.name ?? '';\n  return (\n    <div className=\"dropdown is-active\">\n      <div className=\"dropdown-trigger\">\n        <button\n          className=\"button\"\n          aria-haspopup=\"true\"\n          onClick={(e) => {\n            e.preventDefault();\n            if (hidden) {\n              setHidden(false);\n              setTimeout(() => document.addEventListener('click', close), 0);\n            } else {\n              close();\n            }\n          }}\n        >\n          <span>{title}</span>\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\"></i>\n          </span>\n        </button>\n      </div>\n      <div\n        className=\"dropdown-menu\"\n        role=\"menu\"\n        style={{ visibility: hidden ? 'hidden' : 'visible' }}\n      >\n        <div\n          className=\"dropdown-content\"\n          style={{ maxHeight: '16em', overflowY: 'auto' }}\n        >\n          {options.map(({ name, value }) => (\n            // eslint-disable-next-line jsx-a11y/anchor-is-valid\n            <a\n              key={value}\n              href=\"#\"\n              className={cn('dropdown-item', {\n                'is-active': selected === value,\n              })}\n              onClick={(e) => {\n                e.preventDefault();\n                close();\n                onChange(value);\n              }}\n            >\n              {name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\ninterface ExpandableProps {\n  mainEle: JSX.Element;\n}\n\nexport const Expandable: React.FC<ExpandableProps> = ({\n  mainEle,\n  children,\n}) => {\n  const [collapsed, setCollapsed] = React.useState(true);\n\n  return (\n    <div>\n      <div\n        className=\"is-clickable columns\"\n        onClick={() => setCollapsed(!collapsed)}\n      >\n        <div className=\"column is-four-fifths\">{mainEle}</div>\n        <span className=\"icon column\">\n          <i\n            className={cn(\n              'fas',\n              collapsed ? 'fa-chevron-up' : 'fa-chevron-down'\n            )}\n          ></i>\n        </span>\n      </div>\n      {!collapsed && <div>{children}</div>}\n    </div>\n  );\n};\n","import React from 'react';\nimport { Dropdown } from './components';\n\nimport { ParamFunction, ParamValue, Transform } from './domain/types';\n\ninterface SelectedTransform {\n  transform: Transform<any>;\n  paramValues: ParamValue<any>[];\n}\n\ninterface ImageTransformProps {\n  image?: string;\n  selectedTransform: SelectedTransform;\n  possibleTransforms: Transform<any>[];\n  onSelect: (selected: SelectedTransform) => void;\n  onRemove: () => void;\n  onMoveLeft?: () => void;\n  onMoveRight?: () => void;\n}\n\nexport const ImageTransform: React.FC<ImageTransformProps> = ({\n  image,\n  selectedTransform,\n  possibleTransforms,\n  onSelect,\n  onRemove,\n  onMoveLeft,\n  onMoveRight,\n}) => {\n  return (\n    <div className=\"card\" style={{ width: '300px' }}>\n      <div className=\"card-header-title\">\n        <div className=\"columns is-desktop\">\n          <div className=\"column\">\n            <Dropdown\n              selected={selectedTransform.transform.name}\n              options={possibleTransforms.map((t) => ({\n                name: t.name,\n                value: t.name,\n              }))}\n              onChange={(newTransformName) => {\n                const t = possibleTransforms.find(\n                  (t) => t.name === newTransformName\n                )!;\n                // Reset all the params when you select a new transform\n                onSelect({\n                  transform: t,\n                  paramValues: t.params.map(\n                    (p: ParamFunction<any>) => p.defaultValue\n                  ),\n                });\n              }}\n            />\n          </div>\n          <div className=\"column columns\">\n            {onMoveLeft && (\n              <div className=\"icon column is-clickable\" onClick={onMoveLeft}>\n                <i className=\"fas fa-chevron-left\" aria-hidden=\"true\"></i>\n              </div>\n            )}\n            {onMoveRight && (\n              <div className=\"icon column is-clickable\" onClick={onMoveRight}>\n                <i className=\"fas fa-chevron-right\" aria-hidden=\"true\"></i>\n              </div>\n            )}\n            <div className=\"icon column is-clickable\" onClick={onRemove}>\n              <i className=\"fas fa-trash\" aria-hidden=\"true\"></i>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"card-content\">\n        {selectedTransform.transform.params.map(\n          // Create elements for each of the parameters for the selectect transform.\n          // Each of these would get an onChange event so we know when the user has\n          //  selected a value.\n          (param: ParamFunction<any>, idx: number) => {\n            const ele = param.fn({\n              value: selectedTransform.paramValues[idx],\n              onChange: (v) => {\n                console.log('changing to ', v);\n                onSelect({\n                  ...selectedTransform,\n                  paramValues: selectedTransform.paramValues.map((x, i) => {\n                    if (i === idx) {\n                      return v;\n                    }\n                    return x;\n                  }),\n                });\n              },\n            });\n            return <div key={param.name}>{ele}</div>;\n          }\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { ParamFunction, Transform, TransformWithParams } from './domain/types';\nimport { ImageTransform } from './ImageTransform';\n\ninterface TransformListProps {\n  currentTransforms: TransformWithParams<any>[];\n  possibleTransforms: Transform<any>[];\n  onTransformsChange: (t: TransformWithParams<any>[]) => void;\n}\n\nexport const ImageTransformList: React.FC<TransformListProps> = ({\n  currentTransforms,\n  possibleTransforms,\n  onTransformsChange,\n}) => (\n  <div className=\"box\">\n    <h3 className=\"title\">Image Transforms</h3>\n    <div className=\"block\">\n      <button\n        className=\"button\"\n        onClick={() =>\n          onTransformsChange([\n            ...currentTransforms,\n            {\n              transform: possibleTransforms[0],\n              paramsValues: possibleTransforms[0].params.map(\n                (p: ParamFunction<any>) => p.defaultValue\n              ),\n            },\n          ])\n        }\n      >\n        New Transform\n      </button>\n    </div>\n    <div className=\"columns\">\n      {currentTransforms.map((t, tIdx) => (\n        <ImageTransform\n          image={undefined}\n          possibleTransforms={possibleTransforms}\n          selectedTransform={{\n            transform: t.transform,\n            paramValues: t.paramsValues,\n          }}\n          onRemove={() =>\n            onTransformsChange(\n              currentTransforms.filter((nextT, newIdx) => newIdx !== tIdx)\n            )\n          }\n          onMoveLeft={\n            tIdx > 0\n              ? () =>\n                  onTransformsChange(\n                    currentTransforms.map((nextT, newIdx) => {\n                      if (newIdx === tIdx - 1) {\n                        // This is the next item in the list\n                        return currentTransforms[newIdx + 1];\n                      } else if (tIdx === newIdx) {\n                        // This is the previous item\n                        return currentTransforms[tIdx - 1];\n                      } else {\n                        return nextT;\n                      }\n                    })\n                  )\n              : undefined\n          }\n          onMoveRight={\n            tIdx < currentTransforms.length - 1\n              ? () =>\n                  onTransformsChange(\n                    currentTransforms.map((nextT, newIdx) => {\n                      if (newIdx === tIdx + 1) {\n                        // This is the previous item in the list\n                        return currentTransforms[newIdx - 1];\n                      } else if (tIdx === newIdx) {\n                        // This is the next item\n                        return currentTransforms[tIdx + 1];\n                      } else {\n                        return nextT;\n                      }\n                    })\n                  )\n              : undefined\n          }\n          onSelect={(selected) =>\n            onTransformsChange(\n              currentTransforms.map((nextT, nextTIdx) => {\n                if (tIdx === nextTIdx) {\n                  // This is the one we just changed\n                  return {\n                    transform: selected.transform,\n                    paramsValues: selected.paramValues,\n                    computedImage: undefined,\n                  };\n                }\n                // Reset all the images if we changed anything\n                return {\n                  transform: nextT.transform,\n                  paramsValues: nextT.paramsValues,\n                  computedImage: undefined,\n                };\n              })\n            )\n          }\n        />\n      ))}\n      <div className=\"box\" style={{ display: 'none' }}>\n        {/* Placeholder, because the last box has no bottom padding */}\n      </div>\n    </div>\n  </div>\n);\n","import seedrandom from 'seedrandom';\n\n/**\n * [R, G, B, A] in values 0 - 255 inclusive\n */\nexport type Color = [number, number, number, number];\n\n/**\n * [x, y]\n */\nexport type Coord = [number, number];\n\n/**\n * [width, height]\n */\nexport type Dimensions = [number, number];\n\n/**\n * A one-dimensional array of pixels.\n * A 3x2 image would contain 24 (6*4) numbers, and would look like this:\n *  [\n *    r1,g1,b1,a1, r2,g2,b2,a2, r3,g3,b3,a3,\n *    r4,g4,b4,a4, r5,g5,b5,a5, r6,g6,b6,a6\n *  ]\n *\n * [0, 0] = index 0\n * [1, 0] = index 4\n * [2, 0] = index 8\n * [0, 1] = index 12\n * [1, 1] = index 16\n * [2, 1] = index 20\n * To get pixel [x, y], do (x + y * width) * 4\n */\nexport type ImageData = Uint8Array;\n\nexport type Frame = {\n  data: ImageData;\n};\n\n/**\n * The results of get-pixels processImage()\n */\nexport interface Image {\n  dimensions: Dimensions;\n  frames: Frame[];\n}\n\nexport type Random = seedrandom.prng;\n\nexport interface TransformFnOpts<Params> {\n  /**\n   * The image we're trying to transform\n   */\n  image: Image;\n\n  /**\n   * Use to generate \"random\" numbers. It's seeded, so that subsequent calls will yield the same value on the same image.\n   */\n  random: Random;\n\n  /**\n   * User-passed in parameters.\n   */\n  parameters: Params;\n}\n\nexport type ParamValue<T> = { valid: true; value: T } | { valid: false };\n\nexport interface Parameter<T> {\n  name: string;\n  defaultValue: T;\n  ele: JSX.Element;\n}\n\nexport interface Params<T> {\n  value: ParamValue<T>;\n  onChange: (v: ParamValue<T>) => void;\n}\n\nexport type ParamFunction<T> = {\n  name: string;\n  defaultValue: ParamValue<T>;\n  fn: (params: Params<T>) => JSX.Element;\n};\n\nexport type TransformFn<Params> = (opts: TransformFnOpts<Params>) => Image;\n\ntype ParamType<Type> = Type extends ParamFunction<infer X> ? X : never;\n\nexport interface Transform<T extends readonly ParamFunction<any>[]> {\n  name: string;\n  params: T;\n  fn: TransformFn<{ [P in keyof T]: ParamType<T[P]> }>;\n}\n\nexport interface TransformWithParams<T extends readonly ParamFunction<any>[]> {\n  transform: Transform<T>;\n  paramsValues: ParamValue<T>[];\n}\n\nexport interface TransformInput<T extends ParamFunction<any>[]> {\n  transform: Transform<T>;\n  params: T;\n}\n\nexport const buildTransform = <T extends readonly ParamFunction<any>[]>(args: {\n  name: string;\n  params: T;\n  fn: TransformFn<{ [P in keyof T]: ParamType<T[P]> }>;\n}): Transform<T> => ({\n  name: args.name,\n  params: args.params,\n  fn: args.fn,\n});\n","import seedrandom from 'seedrandom';\nimport { AssertionError } from 'assert';\n\nimport {\n  Color,\n  Coord,\n  Dimensions,\n  ImageData,\n  Image,\n  Random,\n  TransformFn,\n  TransformFnOpts,\n} from './types';\n\n/**\n * Converts a Pixel into a hex string like '#00FF00'\n */\nexport const toHexColor = ([r, g, b]: Color) => {\n  const toHexValue = (c: number) => {\n    const s = c.toString(16).toUpperCase();\n    return s.length === 2 ? s : '0' + s;\n  };\n\n  return `#${toHexValue(r)}${toHexValue(g)}${toHexValue(b)}`;\n};\n\nexport const fromHexColor = (hex: string): Color => [\n  parseInt(hex.toUpperCase().substr(1, 2), 16),\n  parseInt(hex.toUpperCase().substr(3, 2), 16),\n  parseInt(hex.toUpperCase().substr(5, 2), 16),\n  255,\n];\n\nexport const isHexColor = (s: string) => /^#[0-9A-F]{6}$/.test(s);\n\nexport const isTransparent = (pixel: Color) => pixel[3] < 64;\n\nexport const randomColor = (random: seedrandom.prng): Color => [\n  Math.floor(random.int32() * 256),\n  Math.floor(random.int32() * 256),\n  Math.floor(random.int32() * 256),\n  255,\n];\n\nexport const getAveragePixelValue = ([r, g, b]: Color) =>\n  Math.round((r + g + b) / 3);\n\nexport const clampColor = ([r, g, b, a]: Color): Color => {\n  const clamp = (n: number) => Math.max(Math.min(n, 255), 0);\n\n  return [clamp(r), clamp(g), clamp(b), clamp(a)];\n};\n\nexport const getPixelFromSource = (\n  dimensions: Dimensions,\n  image: ImageData,\n  coord: Coord\n): Color => {\n  const [width, height] = dimensions;\n  const [x, y] = coord;\n  if (x < 0 || x >= width || y < 0 || y >= height) {\n    return [0, 0, 0, 0]; // Default to transparent if an invalid coordinate\n  }\n\n  const idx = getImageIndex(dimensions, x, y);\n  return [image[idx], image[idx + 1], image[idx + 2], image[idx + 3]];\n};\n\n/**\n * Asserts that a given value is truthy. Uses TypeScript 3.7 assertion types.\n *\n * @example\n * ```ts\n * const foo: string|undefined = getSomeData();\n * asert(foo, 'foo must be defined');\n * console.log(foo.length); // OK\n * ```\n */\nexport function assert(\n  condition: unknown,\n  message = 'Unexpected falsy value'\n): asserts condition {\n  if (!condition) {\n    throw new AssertionError({ message, actual: condition });\n  }\n}\n\n/********** Mapping Utils ***********/\n// Maps all frames from the original image into new frames.\n// Assumes all mapped frames are the same dimension as the original image.\nexport const mapFrames = (\n  image: Image,\n  cb: (\n    imageData: ImageData,\n    frameIndex: number,\n    frameCount: number\n  ) => ImageData\n): Image => {\n  const frames = image.frames.map((frame, idx) => ({\n    data: cb(frame.data, idx, image.frames.length),\n  }));\n  return {\n    dimensions: image.dimensions,\n    frames,\n  };\n};\n\n/**\n * Maps the coordinates in a given shape into an image\n */\nexport const mapCoords = (\n  dimensions: Dimensions,\n  cb: (coord: Coord) => Color\n): ImageData => {\n  const [width, height] = dimensions;\n  const transformedImageData = new Uint8Array(width * height * 4);\n  for (let y = 0; y < height; y += 1) {\n    for (let x = 0; x < width; x += 1) {\n      const c = clampColor(cb([x, y]));\n      const idx = getImageIndex(dimensions, x, y);\n      transformedImageData[idx] = c[0];\n      transformedImageData[idx + 1] = c[1];\n      transformedImageData[idx + 2] = c[2];\n      transformedImageData[idx + 3] = c[3];\n    }\n  }\n  return transformedImageData;\n};\n\n/**\n * Combines mapFrames and mapCoords into one function.\n * Used for transforming each pixel in an image into another pixel.\n */\nexport const mapImage = <T>(\n  cb: (args: {\n    image: Image;\n    dimensions: Dimensions;\n    random: Random;\n    parameters: T;\n    coord: Coord;\n    frameCount: number;\n    frameIndex: number;\n    getSrcPixel: (coord: Coord) => Color;\n  }) => Color\n): TransformFn<T> => {\n  return ({ image, random, parameters }: TransformFnOpts<T>) =>\n    mapFrames(image, (imageData, frameIndex, frameCount) =>\n      mapCoords(image.dimensions, (coord) =>\n        cb({\n          image,\n          dimensions: image.dimensions,\n          random,\n          parameters,\n          coord,\n          frameCount,\n          frameIndex,\n          getSrcPixel: (c: Coord) =>\n            getPixelFromSource(image.dimensions, imageData, c),\n        })\n      )\n    );\n};\n\n/** Create a new array [0, 1, 2, ...N-1] */\nexport const repeat = (times: number): number[] =>\n  [...new Array(times)].map((_, i) => i);\n\nexport const getImageIndex = ([width]: Dimensions, x: number, y: number) =>\n  (x + y * width) * 4;\n\nexport const writePixel = (args: {\n  image: ImageData;\n  dimensions: Dimensions;\n  coord: Coord;\n  color: Color;\n}): void => {\n  const idx = getImageIndex(args.dimensions, args.coord[0], args.coord[1]);\n  args.image[idx] = args.color[0];\n  args.image[idx + 1] = args.color[1];\n  args.image[idx + 2] = args.color[2];\n  args.image[idx + 3] = args.color[3];\n};\n\nexport const resizeImage = (args: {\n  image: Image;\n  newWidth: number;\n  newHeight: number;\n}): Image => {\n  const { image, newWidth, newHeight } = args;\n  const [width, height] = image.dimensions;\n  const xRatio = width / newWidth;\n  const yRatio = height / newHeight;\n\n  const newDimensions: Dimensions = [newWidth, newHeight];\n\n  const newFrames = image.frames.map((frame) => {\n    const transformedImageData = new Uint8Array(newWidth * newHeight * 4);\n    for (let y = 0; y < newHeight; y += 1) {\n      for (let x = 0; x < newWidth; x += 1) {\n        // Simple nearest-neighbor image scaling.\n        // Arguably the worst of the scaling algorithms, but it's quick,\n        //  and we're generally dealing with small images anyhow.\n        const srcX = Math.floor(x * xRatio);\n        const srcY = Math.floor(y * yRatio);\n\n        const pixel = getPixelFromSource(image.dimensions, frame.data, [\n          srcX,\n          srcY,\n        ]);\n        writePixel({\n          color: pixel,\n          coord: [x, y],\n          dimensions: newDimensions,\n          image: transformedImageData,\n        });\n      }\n    }\n    return {\n      data: transformedImageData,\n    };\n  });\n\n  return {\n    frames: newFrames,\n    dimensions: [newWidth, newHeight],\n  };\n};\n","import { buildTransform, Color } from '../types';\nimport { mapImage, isTransparent } from '../utils';\n\nconst PARTY_COLORS: Color[] = [\n  [255, 141, 139, 255],\n  [254, 214, 137, 255],\n  [136, 255, 137, 255],\n  [135, 255, 255, 255],\n  [139, 181, 254, 255],\n  [215, 140, 255, 255],\n  [255, 140, 255, 255],\n  [255, 104, 247, 255],\n  [254, 108, 183, 255],\n  [255, 105, 104, 255],\n];\n\nexport const backgroundParty = buildTransform({\n  name: 'Background Party',\n  params: [],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel }) => {\n    const srcPixel = getSrcPixel(coord);\n\n    // Make the transparent parts colorful\n    if (isTransparent(srcPixel)) {\n      const partyColorIdx = Math.floor(\n        (frameIndex / frameCount) * PARTY_COLORS.length\n      );\n      return PARTY_COLORS[partyColorIdx];\n    }\n\n    return srcPixel;\n  }),\n});\n","import React from 'react';\nimport { Dropdown } from '../components';\nimport { ParamValue, ParamFunction } from '../domain/types';\n\nconst DropdownParam: React.FC<{\n  name: string;\n  options: readonly { name: string; value: any }[];\n  value?: any;\n  onChange: (v: ParamValue<any>) => void;\n}> = ({ name, options, value, onChange }) => {\n  return (\n    <div>\n      <label>{name}</label>\n      <br />\n      <Dropdown\n        onChange={(value) => onChange({ valid: true, value })}\n        selected={value}\n        options={options}\n      />\n    </div>\n  );\n};\n\nexport function dropdownParam<T>(args: {\n  name: string;\n  options: readonly { name: string; value: T }[];\n  defaultValue?: T;\n}): ParamFunction<T> {\n  return {\n    name: args.name,\n    defaultValue: args.defaultValue\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n    fn: (params) => {\n      return (\n        <DropdownParam\n          name={args.name}\n          value={params.value.valid ? params.value.value : undefined}\n          options={args.options}\n          onChange={params.onChange}\n        />\n      );\n    },\n  };\n}\n","// @ts-ignore\nimport getPixels from 'get-pixels';\n// @ts-ignore\nimport gifEncoder from 'gif-encoder';\nimport seedrandom from 'seedrandom';\n\nimport { Color, TransformInput, Image, Dimensions, ImageData } from './types';\nimport {\n  toHexColor,\n  getPixelFromSource,\n  randomColor,\n  fromHexColor,\n  isTransparent,\n} from './utils';\n\n// Returns a list of gif data URLs, for each transform\nexport const runTransforms = async (\n  inputDataUrl: string,\n  transformList: TransformInput<any>[],\n  fps: number\n): Promise<string[]> => {\n  const random = seedrandom(inputDataUrl);\n\n  const originalImage = await readImage(inputDataUrl);\n\n  const images: Image[] = [];\n  transformList.reduce((image, transformInput) => {\n    const result = transformInput.transform.fn({\n      image,\n      parameters: transformInput.params,\n      random,\n    });\n    images.push(result);\n    return result;\n  }, originalImage);\n\n  return await Promise.all(\n    images.map(async (newImage) => {\n      const transparentColor = getTransparentColor(newImage, random);\n\n      // Transform any of our transparent pixels to what our gif understands to be transparent\n      const image = encodeTransparency(\n        newImage.frames.map((f) => f.data),\n        transparentColor\n      );\n\n      return await createGif(newImage.dimensions, image, transparentColor, fps);\n    })\n  );\n};\n\n/**\n * Each pixel in our image has an alpha channel, but gifs don't.\n * We transform each pixel that appears transparent to be a designated transparent color.\n */\nconst encodeTransparency = (\n  frames: ImageData[],\n  transparentColor: Color | undefined\n): ImageData[] => {\n  const image = frames.map((frame) => {\n    const img = new Uint8Array(frame.length);\n    for (let i = 0; i < frame.length; i += 4) {\n      if (transparentColor && frame[i + 3] < 128) {\n        // Anything more than halfway transparent is considered transparent\n        img[i] = transparentColor[0];\n        img[i + 1] = transparentColor[1];\n        img[i + 2] = transparentColor[2];\n        img[i + 3] = transparentColor[3];\n      } else {\n        img[i] = frame[i];\n        img[i + 1] = frame[i + 1];\n        img[i + 2] = frame[i + 2];\n        img[i + 3] = 255; // Gifs don't do transparency, I dunno why they take in an alpha value...\n      }\n    }\n    return img;\n  });\n\n  return image;\n};\n\nconst createGif = async (\n  dimensions: Dimensions,\n  frames: ImageData[],\n  transparentColor: Color | undefined,\n  fps: number\n): Promise<string> =>\n  new Promise<string>((resolve) => {\n    const [width, height] = dimensions;\n    const gif = new gifEncoder(width, height);\n\n    gif.setFrameRate(fps);\n    gif.setRepeat(0); // Loop indefinitely\n    if (transparentColor) {\n      gif.setTransparent(toHexColor(transparentColor));\n    }\n\n    // gif.setQuality(10);\n    gif.writeHeader();\n\n    let data: any[] = [];\n    gif.on('data', (chunk: any) => {\n      data.push(chunk);\n    });\n    gif.on('end', () => {\n      const dataUrl = URL.createObjectURL(\n        new Blob(data, { type: 'image/gif' })\n      );\n      resolve(dataUrl);\n    });\n\n    frames.forEach((f) => {\n      gif.addFrame(f);\n    });\n\n    gif.finish();\n  });\n\nexport const readImage = (dataUrl: string): Promise<Image> =>\n  new Promise<Image>((res, rej) =>\n    getPixels(\n      dataUrl,\n      (err: Error, getPixelResults: { shape: Dimensions; data: ImageData }) => {\n        if (err) {\n          return rej(err);\n        } else {\n          return res({\n            frames: [\n              {\n                data: Uint8Array.from(getPixelResults.data),\n              },\n            ],\n            dimensions: [getPixelResults.shape[0], getPixelResults.shape[1]],\n          });\n        }\n      }\n    )\n  );\n\nconst getTransparentColor = (\n  image: Image,\n  random: seedrandom.prng\n): Color | undefined => {\n  let hasTransparent = false;\n  const seenPixels = new Set<string>();\n  const [width, height] = image.dimensions;\n  let attempt = toHexColor([0, 255, 0, 255]); // Just start with green for now, since it's a likely candidate\n  image.frames.forEach((frame) => {\n    for (let y = 0; y < height; y += 1) {\n      for (let x = 0; x < width; x += 1) {\n        const px = getPixelFromSource(image.dimensions, frame.data, [x, y]);\n        if (isTransparent(px)) {\n          hasTransparent = true;\n        } else {\n          const hex = toHexColor(px);\n          seenPixels.add(hex);\n          if (hex === attempt) {\n            // Uh oh, can't use our current pick for transparent because it exists in the image already\n            attempt = findRandomColorNotInSet(random, seenPixels);\n          }\n        }\n      }\n    }\n  });\n  return hasTransparent ? fromHexColor(attempt) : undefined;\n};\n\nconst findRandomColorNotInSet = (\n  random: seedrandom.prng,\n  set: Set<string>,\n  attempts = 0\n): string => {\n  const col = toHexColor(randomColor(random));\n  if (attempts > 2000) {\n    // Just give up in order to prevent a stack overflow or something...\n    return col;\n  }\n  return set.has(col)\n    ? findRandomColorNotInSet(random, set, attempts + 1)\n    : col;\n};\n","import { dropdownParam } from '../../params/dropdownParam';\nimport { imagePickerParam } from '../../params/imagePickerParam';\nimport { buildTransform } from '../types';\nimport {\n  isTransparent,\n  getPixelFromSource,\n  mapFrames,\n  mapCoords,\n  resizeImage,\n} from '../utils';\n\nexport const backgroundImage = buildTransform({\n  name: 'Background Image',\n  params: [\n    imagePickerParam({\n      name: 'Image',\n    }),\n    dropdownParam({\n      name: 'Type',\n      defaultValue: 'background',\n      options: [\n        {\n          name: 'Background',\n          value: 'background',\n        },\n        {\n          name: 'Foreground',\n          value: 'foreground',\n        },\n      ] as const,\n    }),\n  ] as const,\n  fn: ({ image, parameters }) => {\n    const otherImage = resizeImage({\n      image: parameters[0].image,\n      newWidth: image.dimensions[0],\n      newHeight: image.dimensions[1],\n    });\n    const type = parameters[1];\n\n    return mapFrames(image, (data) => {\n      return mapCoords(image.dimensions, (coord) => {\n        const src = getPixelFromSource(image.dimensions, data, coord);\n        const otherImageSrc = getPixelFromSource(\n          otherImage.dimensions,\n          otherImage.frames[0].data,\n          coord\n        );\n\n        if (type === 'background') {\n          // Only print the other image if the src image is transparent here\n          return isTransparent(src) ? otherImageSrc : src;\n        } else {\n          return isTransparent(otherImageSrc) ? src : otherImageSrc;\n        }\n      });\n    });\n  },\n});\n","import React from 'react';\nimport { readImage } from '../domain/run';\n\nimport { ParamFunction, Image } from '../domain/types';\nimport { ImagePicker } from '../ImagePicker';\n\nexport function imagePickerParam(args: {\n  name: string;\n}): ParamFunction<{ dataUrl: string; image: Image }> {\n  return {\n    name: args.name,\n    defaultValue: { valid: false },\n    fn: (params) => (\n      <div>\n        <label>{args.name}</label>\n        <br />\n        <ImagePicker\n          currentImageUrl={\n            params.value.valid ? params.value.value.dataUrl : undefined\n          }\n          width={64}\n          height={64}\n          onChange={async (dataUrl) => {\n            const image = await readImage(dataUrl);\n            params.onChange({ valid: true, value: { dataUrl, image } });\n          }}\n        />\n      </div>\n    ),\n  };\n}\n","import React from 'react';\nimport { ParamValue, ParamFunction } from '../domain/types';\n\ntype ParsedParam<T> =\n  | { valid: true; value: T }\n  | { valid: false; reason: string };\n\nconst FloatParam: React.FC<{\n  name: string;\n  value?: number;\n  parse: (s: string) => ParsedParam<number>;\n  onChange: (v: ParamValue<number>) => void;\n}> = ({ name, value, parse, onChange }) => {\n  const [val, setVal] = React.useState(\n    value === undefined ? undefined : value.toString()\n  );\n  const [invalidText, setInvalidText] = React.useState('');\n\n  const onBlur = () => {\n    if (val === undefined) {\n      // Only if no default value provided and no changes have happened\n      return;\n    }\n\n    if (value && val === value.toString()) {\n      return; // Don't fire an onChange event if things haven't changed\n    }\n    const n = parse(val);\n    if (n.valid) {\n      setInvalidText('');\n    } else {\n      setInvalidText(n.reason);\n    }\n    onChange(n);\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\">{name}</label>\n      <div className=\"control has-icons-left has-icons-right\">\n        <input\n          className=\"input\"\n          type=\"text\"\n          defaultValue={value}\n          onChange={(e) => {\n            setVal(e.target.value);\n          }}\n          onBlur={onBlur}\n        />\n      </div>\n      {invalidText && <p className=\"help is-danger\">{invalidText}</p>}\n    </div>\n  );\n};\n\nexport const floatParam = (args: {\n  name: string;\n  defaultValue?: number;\n  min?: number;\n  max?: number;\n}): ParamFunction<number> => ({\n  name: args.name,\n  defaultValue:\n    args.defaultValue !== undefined\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n  fn: (params) => {\n    const { min, max } = args;\n    const parse = (s: string): ParsedParam<number> => {\n      const n = parseFloat(s);\n      if (isNaN(n)) {\n        return { valid: false, reason: 'Must be a number' };\n      }\n      if (min !== undefined && n < min) {\n        return {\n          valid: false,\n          reason: `Must be greater than or equal to ${min}`,\n        };\n      }\n      if (max !== undefined && n > max) {\n        return { valid: false, reason: `Must be less than or equal to ${max}` };\n      }\n      return { valid: true, value: n };\n    };\n\n    return (\n      <FloatParam\n        name={args.name}\n        parse={parse}\n        onChange={params.onChange}\n        value={params.value.valid ? params.value.value : undefined}\n      />\n    );\n  },\n});\n","import { buildTransform } from '../types';\nimport { mapImage } from '../utils';\nimport { floatParam } from '../../params/floatParam';\n\nexport const bounce = buildTransform({\n  name: 'Bounce',\n  params: [\n    floatParam({\n      name: 'Bounce Speed',\n      defaultValue: 5,\n      min: 0,\n    }),\n  ],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel, parameters }) => {\n    const [x, y] = coord;\n    const yOffset =\n      y +\n      Math.round(\n        parameters[0] * Math.sin((frameIndex / frameCount) * 2 * Math.PI)\n      );\n\n    return getSrcPixel([x, yOffset]);\n  }),\n});\n","import { buildTransform } from '../types';\nimport { mapImage } from '../utils';\nimport { floatParam } from '../../params/floatParam';\n\nexport const circle = buildTransform({\n  name: 'Circle',\n  params: [\n    floatParam({\n      name: 'Radius',\n      defaultValue: 10,\n      min: 0,\n    }),\n  ],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel, parameters }) => {\n    const [radius] = parameters;\n    const [x, y] = coord;\n    const xOffset = Math.round(\n      radius * Math.sin(-2 * Math.PI * (frameIndex / frameCount))\n    );\n    const yOffset = Math.round(\n      radius * Math.cos(-2 * Math.PI * (frameIndex / frameCount))\n    );\n    return getSrcPixel([x + xOffset, y + yOffset]);\n  }),\n});\n","import { buildTransform } from '../types';\nimport { mapImage } from '../utils';\nimport { floatParam } from '../../params/floatParam';\n\nexport const expand = buildTransform({\n  name: 'Expand',\n  params: [\n    floatParam({\n      name: 'Radius',\n      defaultValue: 10,\n      min: 0,\n    }),\n  ],\n  fn: mapImage(\n    ({\n      dimensions,\n      coord,\n      frameCount,\n      frameIndex,\n      getSrcPixel,\n      parameters,\n    }) => {\n      const idx = frameIndex / frameCount;\n      const dist = Math.cos(idx * 2 * Math.PI) * parameters[0];\n\n      // Kind of follows the same algorithm as resize, except the amount is dynamic\n      const [width, height] = dimensions;\n      const centerX = width / 2;\n      const centerY = height / 2;\n\n      const [x, y] = coord;\n      const xRatio = (x - centerX) / width;\n      const yRatio = (y - centerY) / height;\n\n      const xOffset = Math.floor(dist * xRatio);\n      const yOffset = Math.round(dist * yRatio);\n      return getSrcPixel([x - xOffset, y - yOffset]);\n    }\n  ),\n});\n","import { buildTransform } from '../types';\nimport { mapImage } from '../utils';\nimport { floatParam } from '../../params/floatParam';\n\n// Probably still needs work -- the inner pixels get all funky still\nexport const fisheye = buildTransform({\n  name: 'Fisheye',\n  params: [floatParam({ name: 'radius', defaultValue: 10, min: 0 })],\n  fn: mapImage(\n    ({\n      dimensions,\n      coord,\n      frameCount,\n      frameIndex,\n      getSrcPixel,\n      parameters,\n    }) => {\n      const idx = frameIndex / frameCount;\n      const expanding = idx < 0.5;\n      const [width, height] = dimensions;\n      const dist = (expanding ? idx : 1 - idx) * parameters[0];\n      const centerX = width / 2;\n      const centerY = height / 2;\n\n      const [x, y] = coord;\n      const angle = Math.atan2(centerY - y, centerX - x);\n\n      const xOffset = Math.round(dist * Math.cos(angle));\n      const yOffset = Math.round(dist * Math.sin(angle));\n      return getSrcPixel([x + xOffset, y + yOffset]);\n    }\n  ),\n});\n","import React from 'react';\nimport { ParamValue, ParamFunction } from '../domain/types';\n\ntype ParsedParam<T> =\n  | { valid: true; value: T }\n  | { valid: false; reason: string };\n\nconst IntParam: React.FC<{\n  name: string;\n  value?: number;\n  parse: (s: string) => ParsedParam<number>;\n  onChange: (v: ParamValue<number>) => void;\n}> = ({ name, value, parse, onChange }) => {\n  const [val, setVal] = React.useState(\n    value === undefined ? undefined : value.toString()\n  );\n  const [invalidText, setInvalidText] = React.useState('');\n\n  const onBlur = () => {\n    if (val === undefined) {\n      // Only if no default value provided and no changes have happened\n      return;\n    }\n\n    if (value && val === value.toString()) {\n      return; // Don't fire an onChange event if things haven't changed\n    }\n    const n = parse(val);\n    if (n.valid) {\n      setInvalidText('');\n    } else {\n      setInvalidText(n.reason);\n    }\n    onChange(n);\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\">{name}</label>\n      <div className=\"control has-icons-left has-icons-right\">\n        <input\n          className=\"input\"\n          type=\"text\"\n          defaultValue={value}\n          onChange={(e) => {\n            setVal(e.target.value);\n          }}\n          onBlur={onBlur}\n        />\n      </div>\n      {invalidText && <p className=\"help is-danger\">{invalidText}</p>}\n    </div>\n  );\n};\n\nexport const intParam = (args: {\n  name: string;\n  defaultValue?: number;\n  min?: number;\n  max?: number;\n}): ParamFunction<number> => ({\n  name: args.name,\n  defaultValue:\n    args.defaultValue !== undefined\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n  fn: (params) => {\n    const { min, max } = args;\n    const parse = (s: string): ParsedParam<number> => {\n      const n = parseInt(s, 10);\n      if (isNaN(n)) {\n        return { valid: false, reason: 'Must be an integer' };\n      }\n      if (min !== undefined && n < min) {\n        return {\n          valid: false,\n          reason: `Must be greater than or equal to ${min}`,\n        };\n      }\n      if (max !== undefined && n > max) {\n        return { valid: false, reason: `Must be less than or equal to ${max}` };\n      }\n      return { valid: true, value: n };\n    };\n\n    return (\n      <IntParam\n        name={args.name}\n        parse={parse}\n        onChange={params.onChange}\n        value={params.value.valid ? params.value.value : undefined}\n      />\n    );\n  },\n});\n","import { Frame, buildTransform } from '../types';\nimport { repeat } from '../utils';\nimport { intParam } from '../../params/intParam';\n\nexport const frameCount = buildTransform({\n  name: 'Frame Count',\n  params: [\n    intParam({\n      name: 'Number of Frames',\n      defaultValue: 10,\n      min: 1,\n    }),\n  ],\n  fn: ({ image, parameters }) => {\n    const [frameCount] = parameters;\n\n    const currentFrames = image.frames;\n\n    // Resulting image will contain frameCount frames.\n    // If the original image had less than that, then we'll copy the last frame until we have enough.\n    // If the original has more frames, then we'll discard the last ones.\n    const frames = repeat(frameCount).map(\n      (i): Frame => ({\n        data: currentFrames[i]\n          ? currentFrames[i].data\n          : currentFrames[currentFrames.length - 1].data,\n      })\n    );\n\n    return {\n      dimensions: image.dimensions,\n      frames,\n    };\n  },\n});\n","import { buildTransform } from '../types';\nimport { mapImage, isTransparent, getAveragePixelValue } from '../utils';\n\nexport const grayscale = buildTransform({\n  name: 'Grayscale',\n  params: [],\n  fn: mapImage(({ coord, getSrcPixel }) => {\n    const srcPixel = getSrcPixel(coord);\n\n    if (isTransparent(srcPixel)) {\n      return [0, 0, 0, 0];\n    }\n\n    const gray = getAveragePixelValue(srcPixel);\n\n    return [gray, gray, gray, 255];\n  }),\n});\n","import React from 'react';\nimport { ParamFunction, ParamValue } from '../domain/types';\n\nconst TextParam: React.FC<{\n  name: string;\n  value?: string;\n  onChange: (v: ParamValue<string>) => void;\n}> = ({ name, value, onChange }) => {\n  const [val, setVal] = React.useState(value);\n\n  return (\n    <div>\n      <label>{name}</label>\n      <br />\n      <input\n        type=\"text\"\n        value={val}\n        name={name}\n        onChange={(e) => setVal(e.target.value)}\n        onBlur={() =>\n          onChange(value ? { valid: true, value } : { valid: false })\n        }\n      />\n    </div>\n  );\n};\n\nexport const textParam = (args: {\n  name: string;\n  defaultValue?: string;\n}): ParamFunction<string> => ({\n  name: args.name,\n  defaultValue:\n    args.defaultValue !== undefined\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n  fn: (params) => (\n    <TextParam\n      name={args.name}\n      onChange={params.onChange}\n      value={params.value.valid ? params.value.value : undefined}\n    />\n  ),\n});\n","import { buildTransform } from '../types';\nimport seedrandom from 'seedrandom';\n\nimport { Color } from '../types';\nimport {\n  mapFrames,\n  mapCoords,\n  getPixelFromSource,\n  isTransparent,\n} from '../utils';\nimport { textParam } from '../../params/textParam';\n\nconst lightningIntensities: Color[] = [\n  [0, 15, 40, 255], // dark color\n  [150, 150, 175, 255],\n  [180, 180, 205, 255],\n  [210, 210, 235, 255],\n];\n\nexport const lightning = buildTransform({\n  name: 'Lightning',\n  params: [\n    textParam({\n      name: 'Random Seed',\n      defaultValue: 'lightning',\n    }),\n  ],\n  fn: ({ image, parameters }) => {\n    const random = seedrandom(parameters[0]);\n    return mapFrames(image, (data) => {\n      const i = random();\n      const flashIntensity = i < 0.9 ? 0 : i < 0.95 ? 1 : i < 0.98 ? 2 : 3;\n\n      return mapCoords(image.dimensions, (coord) => {\n        const src = getPixelFromSource(image.dimensions, data, coord);\n\n        if (isTransparent(src)) {\n          return lightningIntensities[flashIntensity];\n        }\n\n        if (flashIntensity > 0) {\n          // We're flashing, so brighten up the image a little\n          const icf = 1.02 * flashIntensity;\n          return [src[0] * icf, src[1] * icf, src[2] * icf, src[3]];\n        }\n\n        // No lightning\n        return src;\n      });\n    });\n  },\n});\n","import { buildTransform, Color } from '../types';\nimport { isTransparent, getAveragePixelValue, mapImage } from '../utils';\n\nconst PARTY_COLORS: Color[] = [\n  [255, 141, 139, 255],\n  [254, 214, 137, 255],\n  [136, 255, 137, 255],\n  [135, 255, 255, 255],\n  [139, 181, 254, 255],\n  [215, 140, 255, 255],\n  [255, 140, 255, 255],\n  [255, 104, 247, 255],\n  [254, 108, 183, 255],\n  [255, 105, 104, 255],\n];\n\nexport const party = buildTransform({\n  name: 'Party',\n  params: [],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel }) => {\n    const srcPixel = getSrcPixel(coord);\n\n    if (isTransparent(srcPixel)) {\n      return [0, 0, 0, 0];\n    }\n\n    const partyColorIdx = Math.floor(\n      (frameIndex / frameCount) * PARTY_COLORS.length\n    );\n    const partyColor = PARTY_COLORS[partyColorIdx];\n\n    const gray = getAveragePixelValue(srcPixel);\n\n    return [\n      (gray * partyColor[0]) / 255,\n      (gray * partyColor[1]) / 255,\n      (gray * partyColor[2]) / 255,\n      255,\n    ];\n  }),\n});\n","import { buildTransform } from '../types';\nimport { resizeImage } from '../utils';\nimport { intParam } from '../../params/intParam';\n\nexport const resize = buildTransform({\n  name: 'Resize',\n  params: [\n    intParam({\n      name: 'Width',\n      defaultValue: 128,\n      min: 1,\n    }),\n    intParam({\n      name: 'Height',\n      defaultValue: 128,\n      min: 1,\n    }),\n  ] as const,\n  fn: ({ image, parameters }) => {\n    const [newWidth, newHeight] = parameters;\n    return resizeImage({\n      image,\n      newWidth,\n      newHeight,\n    });\n  },\n});\n","import { buildTransform, Color, Dimensions } from '../types';\nimport { assert, getPixelFromSource, writePixel } from '../utils';\nimport { intParam } from '../../params/intParam';\n\nexport const resizeBackground = buildTransform({\n  name: 'Resize Background',\n  params: [\n    intParam({ name: 'Width', defaultValue: 128, min: 0 }),\n    intParam({ name: 'Height', defaultValue: 128, min: 0 }),\n  ],\n  fn: ({ image, parameters }) => {\n    const [width, height] = image.dimensions;\n    const [newWidth, newHeight] = parameters;\n    assert(\n      newWidth >= width,\n      'New width for resize-background needs to be greater than or equal to the original'\n    );\n    assert(\n      newHeight >= height,\n      'New height for resize-background needs to be greater than or equal to the original'\n    );\n\n    const newDimensions: Dimensions = [newWidth, newHeight];\n\n    const xPadding = (newWidth - width) / 2;\n    const yPadding = (newHeight - height) / 2;\n\n    const newFrames = image.frames.map((frame) => {\n      const transformedImageData = new Uint8Array(newWidth * newHeight * 4);\n      for (let y = 0; y < newHeight; y += 1) {\n        for (let x = 0; x < newWidth; x += 1) {\n          const pixel: Color =\n            x > xPadding &&\n            x < newWidth - xPadding &&\n            y > yPadding &&\n            y < newHeight - yPadding\n              ? getPixelFromSource(image.dimensions, frame.data, [\n                  x - xPadding,\n                  y - yPadding,\n                ])\n              : [0, 0, 0, 0];\n          writePixel({\n            color: pixel,\n            coord: [x, y],\n            dimensions: newDimensions,\n            image: transformedImageData,\n          });\n        }\n      }\n      return {\n        data: transformedImageData,\n      };\n    });\n\n    return {\n      frames: newFrames,\n      dimensions: newDimensions,\n    };\n  },\n});\n","import { buildTransform } from '../types';\nimport { mapFrames, mapCoords, getPixelFromSource } from '../utils';\nimport { floatParam } from '../../params/floatParam';\n\nexport const ripple = buildTransform({\n  name: 'Ripple',\n  params: [\n    floatParam({\n      name: 'Amplitude',\n      defaultValue: 10,\n    }),\n    floatParam({\n      name: 'Period',\n      defaultValue: 2,\n      min: 0,\n    }),\n  ],\n  fn: ({ image, parameters }) =>\n    mapFrames(image, (data, frameIndex, frameCount) => {\n      const [amplitude, period] = parameters;\n\n      const height = image.dimensions[1];\n      const shift = (frameIndex / frameCount) * 2 * Math.PI;\n      return mapCoords(image.dimensions, ([x, y]) => {\n        const offset = Math.round(\n          amplitude * Math.sin((y / height) * period * Math.PI + shift)\n        );\n\n        return getPixelFromSource(image.dimensions, data, [x + offset, y]);\n      });\n    }),\n});\n","import { mapImage } from '../utils';\nimport { buildTransform, Coord } from '../types';\nimport { dropdownParam } from '../../params/dropdownParam';\n\nexport const rotate = buildTransform({\n  name: 'Rotate',\n  params: [\n    dropdownParam({\n      name: 'Direction',\n      defaultValue: -1,\n      options: [\n        { name: 'Clockwise', value: -1 },\n        { name: 'Counter-Clockwise', value: 1 },\n      ],\n    }),\n  ],\n  fn: mapImage(\n    ({\n      dimensions,\n      coord,\n      frameCount,\n      frameIndex,\n      getSrcPixel,\n      parameters,\n    }) => {\n      const [sign] = parameters;\n      const centerX = dimensions[0] / 2;\n      const centerY = dimensions[1] / 2;\n      const [x, y] = coord;\n      const xRelCenter = x - centerX;\n      const yRelCenter = y - centerY;\n\n      const amount = (frameIndex / frameCount) * (sign || 1);\n      const cos = Math.cos(2 * Math.PI * amount);\n      const sin = Math.sin(2 * Math.PI * amount);\n\n      const newCoord: Coord = [\n        Math.round(centerX + xRelCenter * cos - yRelCenter * sin),\n        Math.round(centerY + yRelCenter * cos + xRelCenter * sin),\n      ];\n\n      return getSrcPixel(newCoord);\n    }\n  ),\n});\n","import { mapFrames, mapCoords, getPixelFromSource } from '../utils';\nimport { buildTransform, Coord } from '../types';\n\nexport const roxbury = buildTransform({\n  name: 'Roxbury',\n  params: [],\n  fn: ({ image }) =>\n    mapFrames(image, (data, frameIndex, frameCount) => {\n      const idx = frameIndex / frameCount;\n      // 4 phases:\n      //  0 -> freeze\n      //  1 -> rotate clockwise\n      //  2 -> freeze\n      //  3 -> rotate counter-clockwise\n      const phase = Math.floor(idx * 4);\n      const phaseIdx = (idx - phase / 4) * 4;\n\n      const maxAngle = (Math.PI / 2) * 0.2; // 40% of 90 degrees\n\n      const angle =\n        phase === 0\n          ? 0\n          : phase === 1\n          ? phaseIdx * maxAngle // Rotate clockwise\n          : phase === 2\n          ? maxAngle // Freeze!\n          : (1 - phaseIdx) * maxAngle; // Rotate counter-clockwise\n\n      const cos = Math.cos(-angle * 1.35);\n      const sin = Math.sin(-angle * 1.35);\n\n      const rotatePointX = image.dimensions[0] * 0.25;\n      const rotatePointY = image.dimensions[1] * 0.7;\n\n      return mapCoords(image.dimensions, (coord) => {\n        const [x, y] = coord;\n        const xRelCenter = Math.floor(x - rotatePointX + 8 * Math.sin(angle));\n        const yRelCenter = Math.floor(y - rotatePointY + 8 * Math.cos(angle));\n\n        const newCoord: Coord = [\n          Math.round(rotatePointX + xRelCenter * cos - yRelCenter * sin),\n          Math.round(rotatePointY + yRelCenter * cos + xRelCenter * sin),\n        ];\n\n        return getPixelFromSource(image.dimensions, data, newCoord);\n      });\n    }),\n});\n","import { buildTransform } from '../types';\nimport { mapImage } from '../utils';\nimport { floatParam } from '../../params/floatParam';\n\nexport const shake = buildTransform({\n  name: 'Shake',\n  params: [floatParam({ name: 'Shake Speed', defaultValue: 10, min: 0 })],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel, parameters }) => {\n    const [shakeSpeed] = parameters;\n    const [x, y] = coord;\n    const xOffset =\n      x +\n      Math.round(\n        shakeSpeed * Math.cos((frameIndex / frameCount) * 2 * Math.PI)\n      );\n\n    return getSrcPixel([xOffset, y]);\n  }),\n});\n","import React from 'react';\nimport { SketchPicker } from 'react-color';\nimport { Expandable } from '../components';\n\nimport { ParamValue, ParamFunction, Color } from '../domain/types';\nimport { fromHexColor, toHexColor } from '../domain/utils';\n\nconst ColorBox: React.FC<{ color: Color }> = ({ color }) => (\n  <div\n    style={{\n      width: '1.5em',\n      height: '1.5em',\n      backgroundColor: toHexColor(color),\n    }}\n  />\n);\n\nconst ColorPickerParam: React.FC<{\n  name: string;\n  value?: Color;\n  onChange: (v: ParamValue<Color>) => void;\n}> = ({ name, value, onChange }) => {\n  console.log('value', value);\n  return (\n    <Expandable\n      mainEle={\n        <div className=\"columns\">\n          <label className=\"label column is-four-fifths\">{name}</label>\n          <span className=\"column\">{value && <ColorBox color={value} />}</span>\n        </div>\n      }\n    >\n      <SketchPicker\n        disableAlpha={true}\n        presetColors={[]}\n        color={value ? toHexColor(value) : undefined}\n        onChangeComplete={(c) =>\n          onChange({ valid: true, value: fromHexColor(c.hex) })\n        }\n      />\n    </Expandable>\n  );\n};\n\nexport function colorPickerParam(args: {\n  name: string;\n  defaultValue?: Color;\n}): ParamFunction<Color> {\n  return {\n    name: args.name,\n    defaultValue: args.defaultValue\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n    fn: (params) => {\n      console.log('params', params);\n      return (\n        <ColorPickerParam\n          name={args.name}\n          value={params.value.valid ? params.value.value : undefined}\n          onChange={params.onChange}\n        />\n      );\n    },\n  };\n}\n","import { buildTransform } from '../types';\nimport { mapImage, isTransparent, fromHexColor } from '../utils';\nimport { colorPickerParam } from '../../params/colorPickerParam';\n\nexport const solidBackground = buildTransform({\n  name: 'Solid Background',\n  params: [\n    colorPickerParam({\n      name: 'Background Color',\n      defaultValue: fromHexColor('#000000'),\n    }),\n  ],\n  fn: mapImage(({ coord, getSrcPixel, parameters }) => {\n    const [color] = parameters;\n    const p = getSrcPixel(coord);\n    return isTransparent(p) ? color : p;\n  }),\n});\n","import { backgroundParty } from './background-party';\nimport { backgroundImage } from './background-image';\nimport { bounce } from './bounce';\nimport { circle } from './circle';\nimport { expand } from './expand';\nimport { fisheye } from './fisheye';\nimport { frameCount } from './frame-count';\nimport { grayscale } from './grayscale';\nimport { lightning } from './lightning';\nimport { party } from './party';\nimport { resize } from './resize';\nimport { resizeBackground } from './resize-background';\nimport { ripple } from './ripple';\nimport { rotate } from './rotate';\nimport { roxbury } from './roxbury';\nimport { shake } from './shake';\nimport { solidBackground } from './solid-background';\nimport { staticc } from './static';\nimport { transparency } from './transparency';\nimport { transpose } from './transpose';\n\nexport const POSSIBLE_TRANSFORMS = [\n  frameCount,\n  backgroundParty,\n  backgroundImage,\n  bounce,\n  circle,\n  expand,\n  fisheye,\n  grayscale,\n  lightning,\n  party,\n  resize,\n  resizeBackground,\n  ripple,\n  rotate,\n  roxbury,\n  shake,\n  solidBackground,\n  staticc,\n  transparency,\n  transpose,\n];\n","import { buildTransform } from '../types';\nimport { mapImage, isTransparent } from '../utils';\nimport { floatParam } from '../../params/floatParam';\n\nexport const staticc = buildTransform({\n  name: 'Static',\n  params: [floatParam({ name: 'Strength', defaultValue: 10, min: 0 })],\n  fn: mapImage(({ coord, getSrcPixel, parameters, random }) => {\n    const [strength] = parameters;\n    const src = getSrcPixel(coord);\n\n    if (isTransparent(src)) {\n      return [0, 0, 0, 0];\n    }\n\n    const inverse = Math.ceil(random() * strength) > 1;\n\n    return inverse ? [255 - src[0], 255 - src[1], 255 - src[2], src[3]] : src;\n  }),\n});\n","import { buildTransform } from '../types';\nimport { fromHexColor, mapImage } from '../utils';\nimport { colorPickerParam } from '../../params/colorPickerParam';\nimport { intParam } from '../../params/intParam';\n\nexport const transparency = buildTransform({\n  name: 'Transparent Color',\n  params: [\n    colorPickerParam({\n      name: 'Transparent Color',\n      defaultValue: fromHexColor('#000000'),\n    }),\n    intParam({\n      name: 'Tolerance',\n      defaultValue: 10,\n      min: 0,\n      max: 100,\n    }),\n  ] as const,\n  fn: mapImage(({ coord, getSrcPixel, parameters }) => {\n    const [color, tolerance] = parameters;\n    const p = getSrcPixel(coord);\n    const diff0 = p[0] - color[0];\n    const diff1 = p[1] - color[1];\n    const diff2 = p[2] - color[2];\n    const diff = Math.sqrt(diff0 * diff0 + diff1 * diff1 + diff2 * diff2);\n    if ((diff / 255) * 100 <= tolerance) {\n      return [p[0], p[1], p[2], 0];\n    }\n    return p;\n  }),\n});\n","import { buildTransform } from '../types';\nimport { mapImage } from '../utils';\nimport { intParam } from '../../params/intParam';\n\nexport const transpose = buildTransform({\n  name: 'Transpose',\n  params: [\n    intParam({ name: 'X', defaultValue: 0 }),\n    intParam({ name: 'Y', defaultValue: 0 }),\n  ],\n  fn: mapImage(({ coord, getSrcPixel, parameters }) => {\n    const [transX, transY] = parameters;\n    const [x, y] = coord;\n\n    return getSrcPixel([x + transX, y + transY]);\n  }),\n});\n","import React from 'react';\nimport cn from 'classnames';\nimport { assert } from './domain/utils';\nimport { runTransforms } from './domain/run';\nimport { TransformInput, TransformWithParams } from './domain/types';\nimport { intParam } from './params/intParam';\n\ninterface ComputeBoxProps {\n  isDirty: boolean;\n  computeDisabled: boolean;\n  baseImageUrl?: string;\n  transforms: TransformWithParams<any>[];\n  onComputed: () => void;\n}\n\ntype ComputeState = { loading: false; results: string[] } | { loading: true };\n\nconst DEFAULT_FPS = 20;\nconst fpsParam = intParam({\n  name: 'Frames per Second',\n  defaultValue: DEFAULT_FPS,\n  min: 0,\n});\n\nexport const ComputeBox: React.FC<ComputeBoxProps> = ({\n  isDirty,\n  computeDisabled,\n  baseImageUrl,\n  transforms,\n  onComputed,\n}) => {\n  const [state, setState] = React.useState<ComputeState>({\n    loading: false,\n    results: [],\n  });\n  const [fpsChanged, setFpsChanged] = React.useState(false);\n  const [fps, setFps] = React.useState(DEFAULT_FPS);\n\n  const buttonDisabled = computeDisabled && !fpsChanged;\n\n  return (\n    <div className=\"box\">\n      <h3 className=\"title\">Create Gif</h3>\n      <div className=\"block\">\n        {fpsParam.fn({\n          value: { valid: true, value: fps },\n          onChange: (x) => {\n            if (x.valid) {\n              setFps(x.value);\n              setFpsChanged(true);\n            }\n          },\n        })}\n      </div>\n      <div className=\"block\">\n        <button\n          className={cn('button', 'block', { 'is-loading': state.loading })}\n          disabled={buttonDisabled}\n          onClick={async () => {\n            const transformInputs = transforms.map(\n              (t): TransformInput<any> => ({\n                transform: t.transform,\n                params: t.paramsValues.map((p) => {\n                  assert(p.valid);\n                  return p.value;\n                }),\n              })\n            );\n            setState({ loading: true });\n            setTimeout(async () => {\n              assert(\n                baseImageUrl,\n                'No source image, this button should be disabled!'\n              );\n              const gifs = await runTransforms(\n                baseImageUrl,\n                transformInputs,\n                fps\n              );\n              setState({\n                loading: false,\n                results: gifs,\n              });\n              setFpsChanged(false);\n              onComputed();\n            });\n          }}\n        >\n          <span>Compute</span>{' '}\n          {(isDirty || fpsChanged) && (\n            <span className=\"icon is-small\">\n              <i className=\"fas fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            </span>\n          )}\n        </button>\n      </div>\n      <div className=\"block\">\n        <div className=\"columns\">\n          {!state.loading &&\n            state.results.map((gif, idx) => (\n              <div className=\"column\">\n                <div>{transforms[idx].transform.name}</div>\n                <img\n                  src={gif}\n                  alt={`gif-${transforms[idx].transform.name}`}\n                ></img>\n              </div>\n            ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { ParamFunction, ParamValue, Transform } from './domain/types';\nimport { ImagePicker } from './ImagePicker';\nimport { ImageTransformList } from './ImageTransformList';\nimport { POSSIBLE_TRANSFORMS } from './domain/transforms';\nimport { ComputeBox } from './ComputeBox';\n\nconst DEBUG = false;\n\ntype AppState = {\n  baseImage?: string;\n  transforms: {\n    transform: Transform<any>;\n    paramsValues: ParamValue<any>[];\n    computedImage?: string;\n  }[];\n  dirty: boolean;\n};\n\nexport const App: React.FC = () => {\n  const [state, setState] = React.useState<AppState>({\n    dirty: false,\n    transforms: [],\n    baseImage: undefined,\n  });\n\n  if (DEBUG) {\n    (window as any).STATE = state;\n  }\n\n  const computeBtnDisbled =\n    !state.baseImage ||\n    state.transforms.length === 0 ||\n    !state.dirty ||\n    state.transforms.some((t) => {\n      const params = t.transform.params as ParamFunction<any>[];\n      return (\n        params.length > 0 && t.paramsValues.every((p, i) => p.valid === false)\n      );\n    });\n\n  return (\n    <section>\n      <div className=\"container\">\n        <h1 className=\"title\" style={{ paddingTop: '16px' }}>\n          Partymoji\n        </h1>\n        <div>\n          <div className=\"box\">\n            <h3 className=\"title\">Source Image</h3>\n            <ImagePicker\n              currentImageUrl={state.baseImage}\n              onChange={(baseImage) => {\n                setState({\n                  ...state,\n                  baseImage,\n                  dirty: true,\n                });\n              }}\n            />\n          </div>\n          <ImageTransformList\n            currentTransforms={state.transforms}\n            possibleTransforms={POSSIBLE_TRANSFORMS}\n            onTransformsChange={(transforms) =>\n              setState({\n                ...state,\n                dirty: true,\n                transforms,\n              })\n            }\n          />\n          <ComputeBox\n            isDirty={state.dirty}\n            baseImageUrl={state.baseImage}\n            computeDisabled={computeBtnDisbled}\n            transforms={state.transforms}\n            onComputed={() =>\n              setState({\n                ...state,\n                dirty: false,\n              })\n            }\n          />\n          {DEBUG && (\n            <div>\n              <code>{JSON.stringify(state, null, 2)}</code>\n            </div>\n          )}\n          <a\n            href=\"https://github.com/MikeyBurkman/partymoji\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <img\n              src=\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\"\n              width={64}\n              height={64}\n              alt=\"Github Link\"\n            ></img>\n          </a>\n        </div>\n      </div>\n    </section>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}