{"version":3,"sources":["domain/types.ts","domain/utils.ts","domain/transforms/background-party.ts","params/dropdownParam.tsx","domain/run.ts","components/ImagePicker.tsx","domain/transforms/background-image.ts","params/textParam.tsx","params/imagePickerParam.tsx","params/floatParam.tsx","domain/transforms/bounce.ts","params/intParam.tsx","domain/transforms/brightness.ts","domain/transforms/circle.ts","domain/transforms/expand.ts","domain/transforms/fisheye.ts","domain/transforms/frame-count.ts","domain/transforms/grayscale.ts","domain/transforms/lightning.ts","domain/transforms/party.ts","components/Expandable.tsx","params/colorPickerParam.tsx","params/variableLengthParam.tsx","domain/transforms/pinwheel.ts","domain/transforms/radiance.ts","domain/transforms/index.ts","domain/transforms/resize.ts","domain/transforms/resize-background.ts","domain/transforms/ripple.ts","domain/transforms/rotate.ts","domain/transforms/roxbury.ts","domain/transforms/shake.ts","domain/transforms/solid-background.ts","domain/transforms/static.ts","domain/transforms/transparency.ts","domain/transforms/transpose.ts","components/ComputeBox.tsx","components/ImageTransform.tsx","components/ImageTransformList.tsx","App.tsx","index.tsx"],"names":["buildTransform","args","name","params","description","fn","toHexColor","r","g","b","toHexValue","c","s","toString","toUpperCase","length","fromHexColor","hex","parseInt","substr","isTransparent","pixel","randomColor","random","Math","floor","int32","getAveragePixelValue","round","clampColor","a","clamp","n","max","min","getPixelFromSource","dimensions","image","coord","width","height","x","y","idx","getImageIndex","assert","condition","message","AssertionError","actual","mapFrames","cb","frames","map","frame","data","mapCoords","transformedImageData","Uint8Array","mapImage","parameters","imageData","frameIndex","frameCount","getSrcPixel","repeat","times","Array","_","i","writePixel","color","resizeImage","newWidth","newHeight","xRatio","yRatio","newDimensions","srcX","srcY","PARTY_COLORS","backgroundParty","srcPixel","partyColorIdx","DropdownParam","options","value","onChange","className","style","maxWidth","Tooltip","title","Icon","FormControl","fullWidth","Select","autoWidth","event","valid","target","t","MenuItem","dropdownParam","defaultValue","undefined","runTransforms","inputDataUrl","transformList","fps","seedrandom","readImage","originalImage","images","reduce","transformInput","result","transform","push","Promise","all","newImage","transparentColor","getTransparentColor","encodeTransparency","f","createGif","img","resolve","gif","gifEncoder","setFrameRate","setRepeat","hexColor","slice","setTransparent","writeHeader","on","chunk","dataUrl","URL","createObjectURL","Blob","type","forEach","addFrame","finish","res","rej","getPixels","err","getPixelResults","from","shape","hasTransparent","seenPixels","Set","attempt","px","add","findRandomColorNotInSet","set","attempts","col","has","ImagePicker","currentImageUrl","Button","startIcon","variant","component","hidden","accept","files","file","readFile","baseImage","src","alt","reader","FileReader","onload","readAsDataURL","backgroundImage","imagePickerParam","otherImage","otherImageSrc","FloatParam","parse","React","useState","val","setVal","invalidText","setInvalidText","FormHelperText","TextField","label","error","onBlur","reason","e","floatParam","parseFloat","isNaN","bounce","sin","PI","IntParam","intParam","brightness","rawAmount","p","circle","radius","cos","expand","dist","centerX","centerY","fisheye","expanding","angle","atan2","currentFrames","grayscale","gray","TextParam","lightningIntensities","lightning","flashIntensity","icf","party","partyColor","Expandable","mainEle","children","collapsed","setCollapsed","ClickAwayListener","onClickAway","Box","onClick","textTransform","Stack","direction","spacing","Collapse","in","ColorBox","backgroundColor","ColorPickerParam","disableAlpha","presetColors","onChangeComplete","colorPickerParam","VariableLengthParam","newParamText","createNewParam","v","param","pValue","setParams","Paper","Typography","ele","newValue","oldP","IconButton","newParams","filter","variableLengthParam","DEFAULT_COLORS","pinwheel","offsetX","offsetY","groupCount","colors","ribbonCount","ribbonArcDegrees","colorsLength","toFixed","xRelCenter","yRelCenter","pointAngle","colorIdx","frameProgress","POSSIBLE_TRANSFORMS","colorList","flatMap","maxDist","sqrt","distFromCenter","xPadding","yPadding","amplitude","period","shift","offset","sign","amount","phase","phaseIdx","maxAngle","rotatePointX","rotatePointY","newCoord","shakeSpeed","strength","ceil","tolerance","diff0","diff1","diff2","transX","transY","fpsParam","ComputeBox","isDirty","computeDisabled","baseImageUrl","transforms","onComputed","loading","results","state","setState","fpsChanged","setFpsChanged","setFps","buttonDisabled","endIcon","disabled","transformInputs","paramsValues","setTimeout","gifs","console","stack","CircularProgress","ImageTransform","selectedTransform","possibleTransforms","index","onSelect","onRemove","onMoveLeft","onMoveRight","padding","newTransformName","find","paramValues","fontSize","aria-label","ImageTransformList","currentTransforms","onTransformsChange","display","gridTemplateColumns","tIdx","nextT","newIdx","selected","nextTIdx","computedImage","App","dirty","computeBtnDisbled","some","every","ScopedCssBaseline","paddingTop","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7357bd75.chunk.js","sourcesContent":["import seedrandom from 'seedrandom';\n\n/**\n * [R, G, B, A] in values 0 - 255 inclusive\n */\nexport type Color = [number, number, number, number];\n\n/**\n * [x, y]\n */\nexport type Coord = [number, number];\n\n/**\n * [width, height]\n */\nexport type Dimensions = [number, number];\n\n/**\n * A one-dimensional array of pixels.\n * A 3x2 image would contain 24 (6*4) numbers, and would look like this:\n *  [\n *    r1,g1,b1,a1, r2,g2,b2,a2, r3,g3,b3,a3,\n *    r4,g4,b4,a4, r5,g5,b5,a5, r6,g6,b6,a6\n *  ]\n *\n * [0, 0] = index 0\n * [1, 0] = index 4\n * [2, 0] = index 8\n * [0, 1] = index 12\n * [1, 1] = index 16\n * [2, 1] = index 20\n * To get pixel [x, y], do (x + y * width) * 4\n */\nexport type ImageData = Uint8Array;\n\nexport type Frame = {\n  data: ImageData;\n};\n\n/**\n * The results of get-pixels processImage()\n */\nexport interface Image {\n  dimensions: Dimensions;\n  frames: Frame[];\n}\n\nexport type Random = seedrandom.prng;\n\nexport interface TransformFnOpts<Params> {\n  /**\n   * The image we're trying to transform\n   */\n  image: Image;\n\n  /**\n   * Use to generate \"random\" numbers. It's seeded, so that subsequent calls will yield the same value on the same image.\n   */\n  random: Random;\n\n  /**\n   * User-passed in parameters.\n   */\n  parameters: Params;\n}\n\nexport type ParamValue<T> = { valid: true; value: T } | { valid: false };\n\nexport interface Parameter<T> {\n  name: string;\n  defaultValue: T;\n  ele: JSX.Element;\n}\n\nexport interface Params<T> {\n  value: ParamValue<T>;\n  onChange: (v: ParamValue<T>) => void;\n}\n\nexport type ParamFunction<T> = {\n  name: string;\n  defaultValue: ParamValue<T>;\n  fn: (params: Params<T>) => JSX.Element;\n};\n\nexport type TransformFn<Params> = (opts: TransformFnOpts<Params>) => Image;\n\ntype ParamType<Type> = Type extends ParamFunction<infer X> ? X : never;\n\nexport interface Transform<T extends readonly ParamFunction<any>[]> {\n  name: string;\n  params: T;\n  description?: string;\n  fn: TransformFn<{ [P in keyof T]: ParamType<T[P]> }>;\n}\n\nexport interface TransformWithParams<T extends readonly ParamFunction<any>[]> {\n  transform: Transform<T>;\n  paramsValues: ParamValue<T>[];\n}\n\nexport interface TransformInput<T extends ParamFunction<any>[]> {\n  transform: Transform<T>;\n  params: T;\n}\n\nexport const buildTransform = <T extends readonly ParamFunction<any>[]>(args: {\n  name: string;\n  params: T;\n  description?: string;\n  fn: TransformFn<{ [P in keyof T]: ParamType<T[P]> }>;\n}): Transform<T> => ({\n  name: args.name,\n  params: args.params,\n  description: args.description,\n  fn: args.fn,\n});\n","import seedrandom from 'seedrandom';\nimport { AssertionError } from 'assert';\n\nimport {\n  Color,\n  Coord,\n  Dimensions,\n  ImageData,\n  Image,\n  Random,\n  TransformFn,\n  TransformFnOpts,\n} from './types';\n\n/**\n * Converts a Pixel into a hex string like '#00FF00'\n */\nexport const toHexColor = ([r, g, b]: Color) => {\n  const toHexValue = (c: number) => {\n    const s = c.toString(16).toUpperCase();\n    return s.length === 2 ? s : '0' + s;\n  };\n\n  return `#${toHexValue(r)}${toHexValue(g)}${toHexValue(b)}`;\n};\n\nexport const fromHexColor = (hex: string): Color => [\n  parseInt(hex.toUpperCase().substr(1, 2), 16),\n  parseInt(hex.toUpperCase().substr(3, 2), 16),\n  parseInt(hex.toUpperCase().substr(5, 2), 16),\n  255,\n];\n\nexport const isHexColor = (s: string) => /^#[0-9A-F]{6}$/.test(s);\n\nexport const isTransparent = (pixel: Color) => pixel[3] < 64;\n\nexport const randomColor = (random: seedrandom.prng): Color => [\n  Math.floor(random.int32() * 256),\n  Math.floor(random.int32() * 256),\n  Math.floor(random.int32() * 256),\n  255,\n];\n\nexport const getAveragePixelValue = ([r, g, b]: Color) =>\n  Math.round((r + g + b) / 3);\n\nexport const clampColor = ([r, g, b, a]: Color): Color => {\n  const clamp = (n: number) => Math.max(Math.min(n, 255), 0);\n\n  return [clamp(r), clamp(g), clamp(b), clamp(a)];\n};\n\nexport const getPixelFromSource = (\n  dimensions: Dimensions,\n  image: ImageData,\n  coord: Coord\n): Color => {\n  const [width, height] = dimensions;\n  const [x, y] = coord;\n  if (x < 0 || x >= width || y < 0 || y >= height) {\n    return [0, 0, 0, 0]; // Default to transparent if an invalid coordinate\n  }\n\n  const idx = getImageIndex(dimensions, x, y);\n  return [image[idx], image[idx + 1], image[idx + 2], image[idx + 3]];\n};\n\n/**\n * Asserts that a given value is truthy. Uses TypeScript 3.7 assertion types.\n *\n * @example\n * ```ts\n * const foo: string|undefined = getSomeData();\n * asert(foo, 'foo must be defined');\n * console.log(foo.length); // OK\n * ```\n */\nexport function assert(\n  condition: unknown,\n  message = 'Unexpected falsy value'\n): asserts condition {\n  if (!condition) {\n    throw new AssertionError({ message, actual: condition });\n  }\n}\n\n/********** Mapping Utils ***********/\n// Maps all frames from the original image into new frames.\n// Assumes all mapped frames are the same dimension as the original image.\nexport const mapFrames = (\n  image: Image,\n  cb: (\n    imageData: ImageData,\n    frameIndex: number,\n    frameCount: number\n  ) => ImageData\n): Image => {\n  const frames = image.frames.map((frame, idx) => ({\n    data: cb(frame.data, idx, image.frames.length),\n  }));\n  return {\n    dimensions: image.dimensions,\n    frames,\n  };\n};\n\n/**\n * Maps the coordinates in a given shape into an image\n */\nexport const mapCoords = (\n  dimensions: Dimensions,\n  cb: (coord: Coord) => Color\n): ImageData => {\n  const [width, height] = dimensions;\n  const transformedImageData = new Uint8Array(width * height * 4);\n  for (let y = 0; y < height; y += 1) {\n    for (let x = 0; x < width; x += 1) {\n      const c = clampColor(cb([x, y]));\n      const idx = getImageIndex(dimensions, x, y);\n      transformedImageData[idx] = c[0];\n      transformedImageData[idx + 1] = c[1];\n      transformedImageData[idx + 2] = c[2];\n      transformedImageData[idx + 3] = c[3];\n    }\n  }\n  return transformedImageData;\n};\n\n/**\n * Combines mapFrames and mapCoords into one function.\n * Used for transforming each pixel in an image into another pixel.\n */\nexport const mapImage = <T>(\n  cb: (args: {\n    image: Image;\n    dimensions: Dimensions;\n    random: Random;\n    parameters: T;\n    coord: Coord;\n    frameCount: number;\n    frameIndex: number;\n    getSrcPixel: (coord: Coord) => Color;\n  }) => Color\n): TransformFn<T> => {\n  return ({ image, random, parameters }: TransformFnOpts<T>) =>\n    mapFrames(image, (imageData, frameIndex, frameCount) =>\n      mapCoords(image.dimensions, (coord) =>\n        cb({\n          image,\n          dimensions: image.dimensions,\n          random,\n          parameters,\n          coord,\n          frameCount,\n          frameIndex,\n          getSrcPixel: (c: Coord) =>\n            getPixelFromSource(image.dimensions, imageData, c),\n        })\n      )\n    );\n};\n\n/** Create a new array [0, 1, 2, ...N-1] */\nexport const repeat = (times: number): number[] =>\n  [...new Array(times)].map((_, i) => i);\n\nexport const getImageIndex = ([width]: Dimensions, x: number, y: number) =>\n  (x + y * width) * 4;\n\nexport const writePixel = (args: {\n  image: ImageData;\n  dimensions: Dimensions;\n  coord: Coord;\n  color: Color;\n}): void => {\n  const idx = getImageIndex(args.dimensions, args.coord[0], args.coord[1]);\n  args.image[idx] = args.color[0];\n  args.image[idx + 1] = args.color[1];\n  args.image[idx + 2] = args.color[2];\n  args.image[idx + 3] = args.color[3];\n};\n\nexport const resizeImage = (args: {\n  image: Image;\n  newWidth: number;\n  newHeight: number;\n}): Image => {\n  const { image, newWidth, newHeight } = args;\n  const [width, height] = image.dimensions;\n  const xRatio = width / newWidth;\n  const yRatio = height / newHeight;\n\n  const newDimensions: Dimensions = [newWidth, newHeight];\n\n  const newFrames = image.frames.map((frame) => {\n    const transformedImageData = new Uint8Array(newWidth * newHeight * 4);\n    for (let y = 0; y < newHeight; y += 1) {\n      for (let x = 0; x < newWidth; x += 1) {\n        // Simple nearest-neighbor image scaling.\n        // Arguably the worst of the scaling algorithms, but it's quick,\n        //  and we're generally dealing with small images anyhow.\n        const srcX = Math.floor(x * xRatio);\n        const srcY = Math.floor(y * yRatio);\n\n        const pixel = getPixelFromSource(image.dimensions, frame.data, [\n          srcX,\n          srcY,\n        ]);\n        writePixel({\n          color: pixel,\n          coord: [x, y],\n          dimensions: newDimensions,\n          image: transformedImageData,\n        });\n      }\n    }\n    return {\n      data: transformedImageData,\n    };\n  });\n\n  return {\n    frames: newFrames,\n    dimensions: [newWidth, newHeight],\n  };\n};\n","import { buildTransform, Color } from '../types';\nimport { mapImage, isTransparent } from '../utils';\n\nconst PARTY_COLORS: Color[] = [\n  [255, 141, 139, 255],\n  [254, 214, 137, 255],\n  [136, 255, 137, 255],\n  [135, 255, 255, 255],\n  [139, 181, 254, 255],\n  [215, 140, 255, 255],\n  [255, 140, 255, 255],\n  [255, 104, 247, 255],\n  [254, 108, 183, 255],\n  [255, 105, 104, 255],\n];\n\nexport const backgroundParty = buildTransform({\n  name: 'Background Party',\n  description: 'Transparent pixels will flash bright party colors',\n  params: [],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel }) => {\n    const srcPixel = getSrcPixel(coord);\n\n    // Make the transparent parts colorful\n    if (isTransparent(srcPixel)) {\n      const partyColorIdx = Math.floor(\n        (frameIndex / frameCount) * PARTY_COLORS.length\n      );\n      return PARTY_COLORS[partyColorIdx];\n    }\n\n    return srcPixel;\n  }),\n});\n","import {\n  Tooltip,\n  Icon,\n  FormControl,\n  Select,\n  MenuItem,\n} from '@material-ui/core';\nimport React from 'react';\nimport { ParamValue, ParamFunction } from '../domain/types';\n\nconst DropdownParam: React.FC<{\n  name: string;\n  options: readonly { name: string; value: any }[];\n  value?: any;\n  description?: string;\n  onChange: (v: ParamValue<any>) => void;\n}> = ({ name, options, value, description, onChange }) => {\n  return (\n    <div className=\"field\" style={{ maxWidth: '12em' }}>\n      <label className=\"label\">\n        {name}\n        {description && (\n          <Tooltip title={description}>\n            <Icon>help</Icon>\n          </Tooltip>\n        )}\n      </label>\n      <div className=\"control\">\n        <FormControl fullWidth>\n          <Select\n            autoWidth\n            value={value}\n            onChange={(event) =>\n              onChange({ valid: true, value: event.target.value })\n            }\n          >\n            {options.map((t) => (\n              <MenuItem key={t.value} value={t.value}>\n                {t.name}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </div>\n    </div>\n  );\n};\n\nexport function dropdownParam<T>(args: {\n  name: string;\n  options: readonly { name: string; value: T }[];\n  description?: string;\n  defaultValue?: T;\n}): ParamFunction<T> {\n  return {\n    name: args.name,\n    defaultValue: args.defaultValue\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n    fn: (params) => {\n      return (\n        <DropdownParam\n          name={args.name}\n          value={params.value.valid ? params.value.value : undefined}\n          options={args.options}\n          description={args.description}\n          onChange={params.onChange}\n        />\n      );\n    },\n  };\n}\n","// @ts-ignore\nimport getPixels from 'get-pixels';\n// @ts-ignore\nimport gifEncoder from 'gif-encoder';\nimport seedrandom from 'seedrandom';\n\nimport { Color, TransformInput, Image, Dimensions, ImageData } from './types';\nimport {\n  toHexColor,\n  getPixelFromSource,\n  randomColor,\n  fromHexColor,\n  isTransparent,\n} from './utils';\n\n// Returns a list of gif data URLs, for each transform\nexport const runTransforms = async (\n  inputDataUrl: string,\n  transformList: TransformInput<any>[],\n  fps: number\n): Promise<string[]> => {\n  const random = seedrandom(inputDataUrl);\n\n  const originalImage = await readImage(inputDataUrl);\n\n  const images: Image[] = [];\n  transformList.reduce((image, transformInput) => {\n    const result = transformInput.transform.fn({\n      image,\n      parameters: transformInput.params,\n      random,\n    });\n    images.push(result);\n    return result;\n  }, originalImage);\n\n  return await Promise.all(\n    images.map(async (newImage) => {\n      const transparentColor = getTransparentColor(newImage, random);\n\n      // Transform any of our transparent pixels to what our gif understands to be transparent\n      const image = encodeTransparency(\n        newImage.frames.map((f) => f.data),\n        transparentColor\n      );\n\n      return await createGif(newImage.dimensions, image, transparentColor, fps);\n    })\n  );\n};\n\n/**\n * Each pixel in our image has an alpha channel, but gifs don't.\n * We transform each pixel that appears transparent to be a designated transparent color.\n */\nconst encodeTransparency = (\n  frames: ImageData[],\n  transparentColor: Color | undefined\n): ImageData[] => {\n  const image = frames.map((frame) => {\n    const img = new Uint8Array(frame.length);\n    for (let i = 0; i < frame.length; i += 4) {\n      if (transparentColor && frame[i + 3] < 128) {\n        // Anything more than halfway transparent is considered transparent\n        img[i] = transparentColor[0];\n        img[i + 1] = transparentColor[1];\n        img[i + 2] = transparentColor[2];\n        img[i + 3] = transparentColor[3];\n      } else {\n        img[i] = frame[i];\n        img[i + 1] = frame[i + 1];\n        img[i + 2] = frame[i + 2];\n        img[i + 3] = 255; // Gifs don't do transparency, I dunno why they take in an alpha value...\n      }\n    }\n    return img;\n  });\n\n  return image;\n};\n\nconst createGif = async (\n  dimensions: Dimensions,\n  frames: ImageData[],\n  transparentColor: Color | undefined,\n  fps: number\n): Promise<string> =>\n  new Promise<string>((resolve) => {\n    const [width, height] = dimensions;\n    const gif = new gifEncoder(width, height);\n\n    gif.setFrameRate(fps);\n    gif.setRepeat(0); // Loop indefinitely\n    if (transparentColor) {\n      // Need to convert '#RRGGBB' to '0xRRGGBB'\n      const hexColor = toHexColor(transparentColor).slice(1);\n      gif.setTransparent(`0x${hexColor}`);\n    }\n\n    // gif.setQuality(10);\n    gif.writeHeader();\n\n    let data: any[] = [];\n    gif.on('data', (chunk: any) => {\n      data.push(chunk);\n    });\n    gif.on('end', () => {\n      const dataUrl = URL.createObjectURL(\n        new Blob(data, { type: 'image/gif' })\n      );\n      resolve(dataUrl);\n    });\n\n    frames.forEach((f) => {\n      gif.addFrame(f);\n    });\n\n    gif.finish();\n  });\n\nexport const readImage = (dataUrl: string): Promise<Image> =>\n  new Promise<Image>((res, rej) =>\n    getPixels(\n      dataUrl,\n      (err: Error, getPixelResults: { shape: Dimensions; data: ImageData }) => {\n        if (err) {\n          return rej(err);\n        } else {\n          return res({\n            frames: [\n              {\n                data: Uint8Array.from(getPixelResults.data),\n              },\n            ],\n            dimensions: [getPixelResults.shape[0], getPixelResults.shape[1]],\n          });\n        }\n      }\n    )\n  );\n\nconst getTransparentColor = (\n  image: Image,\n  random: seedrandom.prng\n): Color | undefined => {\n  let hasTransparent = false;\n  const seenPixels = new Set<string>();\n  const [width, height] = image.dimensions;\n  let attempt = toHexColor([0, 255, 0, 255]); // Just start with green for now, since it's a likely candidate\n  image.frames.forEach((frame) => {\n    for (let y = 0; y < height; y += 1) {\n      for (let x = 0; x < width; x += 1) {\n        const px = getPixelFromSource(image.dimensions, frame.data, [x, y]);\n        if (isTransparent(px)) {\n          hasTransparent = true;\n        } else {\n          const hex = toHexColor(px);\n          seenPixels.add(hex);\n          if (hex === attempt) {\n            // Uh oh, can't use our current pick for transparent because it exists in the image already\n            attempt = findRandomColorNotInSet(random, seenPixels);\n          }\n        }\n      }\n    }\n  });\n  return hasTransparent ? fromHexColor(attempt) : undefined;\n};\n\nconst findRandomColorNotInSet = (\n  random: seedrandom.prng,\n  set: Set<string>,\n  attempts = 0\n): string => {\n  const col = toHexColor(randomColor(random));\n  if (attempts > 2000) {\n    // Just give up in order to prevent a stack overflow or something...\n    return col;\n  }\n  return set.has(col)\n    ? findRandomColorNotInSet(random, set, attempts + 1)\n    : col;\n};\n","import { Button, Icon } from '@material-ui/core';\nimport React from 'react';\n\ninterface ImagePickerProps {\n  currentImageUrl?: string;\n  name?: string;\n  width?: number;\n  height?: number;\n  onChange: (imageUrl: string) => void;\n}\n\nexport const ImagePicker: React.FC<ImagePickerProps> = ({\n  currentImageUrl,\n  name,\n  width,\n  height,\n  onChange,\n}) => (\n  <>\n    <div>\n      <Button\n        startIcon={<Icon>image</Icon>}\n        variant=\"contained\"\n        component=\"label\"\n      >\n        {name}\n        <input\n          type=\"file\"\n          hidden\n          accept=\"image/png,image/jpg\"\n          name=\"source-png\"\n          onChange={async (event) => {\n            const files = Array.from(event.target.files ?? []);\n            const file = files[0];\n            const baseImage = await readFile(file);\n            onChange(baseImage);\n          }}\n        />\n      </Button>\n    </div>\n    <div>\n      {currentImageUrl && (\n        <img\n          width={width}\n          height={height}\n          src={currentImageUrl}\n          alt=\"Source\"\n        ></img>\n      )}\n    </div>\n  </>\n);\n\nconst readFile = (file: File) =>\n  new Promise<string>((resolve) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result as string);\n    reader.readAsDataURL(file);\n  });\n","import { dropdownParam } from '../../params/dropdownParam';\nimport { imagePickerParam } from '../../params/imagePickerParam';\nimport { buildTransform } from '../types';\nimport {\n  isTransparent,\n  getPixelFromSource,\n  mapFrames,\n  mapCoords,\n  resizeImage,\n} from '../utils';\n\nexport const backgroundImage = buildTransform({\n  name: 'Background Image',\n  description: 'Select another image to be used as a background or foreground',\n  params: [\n    imagePickerParam({\n      name: 'Image',\n    }),\n    dropdownParam({\n      name: 'Type',\n      defaultValue: 'background',\n      options: [\n        {\n          name: 'Background',\n          value: 'background',\n        },\n        {\n          name: 'Foreground',\n          value: 'foreground',\n        },\n      ] as const,\n    }),\n  ] as const,\n  fn: ({ image, parameters }) => {\n    const otherImage = resizeImage({\n      image: parameters[0].image,\n      newWidth: image.dimensions[0],\n      newHeight: image.dimensions[1],\n    });\n    const type = parameters[1];\n\n    return mapFrames(image, (data) => {\n      return mapCoords(image.dimensions, (coord) => {\n        const src = getPixelFromSource(image.dimensions, data, coord);\n        const otherImageSrc = getPixelFromSource(\n          otherImage.dimensions,\n          otherImage.frames[0].data,\n          coord\n        );\n\n        if (type === 'background') {\n          // Only print the other image if the src image is transparent here\n          return isTransparent(src) ? otherImageSrc : src;\n        } else {\n          return isTransparent(otherImageSrc) ? src : otherImageSrc;\n        }\n      });\n    });\n  },\n});\n","import { FormControl, FormHelperText, TextField } from '@material-ui/core';\nimport React from 'react';\nimport { ParamFunction, ParamValue } from '../domain/types';\n\nconst TextParam: React.FC<{\n  name: string;\n  value?: string;\n  description?: string;\n  onChange: (v: ParamValue<string>) => void;\n}> = ({ name, value, description, onChange }) => {\n  const [val, setVal] = React.useState(value);\n\n  return (\n    <FormControl>\n      <FormHelperText>{description ?? ' '}</FormHelperText>\n      <TextField\n        label={name}\n        defaultValue={value}\n        onChange={(e) => setVal(e.target.value)}\n        onBlur={() =>\n          onChange(val ? { valid: true, value: val } : { valid: false })\n        }\n      />\n    </FormControl>\n  );\n};\n\nexport const textParam = (args: {\n  name: string;\n  description?: string;\n  defaultValue?: string;\n}): ParamFunction<string> => ({\n  name: args.name,\n  defaultValue:\n    args.defaultValue !== undefined\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n  fn: (params) => (\n    <TextParam\n      name={args.name}\n      description={args.description}\n      onChange={params.onChange}\n      value={params.value.valid ? params.value.value : undefined}\n    />\n  ),\n});\n","import React from 'react';\nimport { readImage } from '../domain/run';\n\nimport { ParamFunction, Image } from '../domain/types';\nimport { ImagePicker } from '../components/ImagePicker';\n\ninterface ImagePickerParamsProps {\n  name: string;\n}\n\nexport function imagePickerParam({\n  name,\n}: ImagePickerParamsProps): ParamFunction<{ dataUrl: string; image: Image }> {\n  return {\n    name,\n    defaultValue: { valid: false },\n    fn: (params) => (\n      <div className=\"field\" style={{ maxWidth: '12em' }}>\n        <label className=\"label\">{name}</label>\n        <div className=\"control has-icons-left has-icons-right\">\n          <ImagePicker\n            currentImageUrl={\n              params.value.valid ? params.value.value.dataUrl : undefined\n            }\n            width={64}\n            height={64}\n            onChange={async (dataUrl) => {\n              const image = await readImage(dataUrl);\n              params.onChange({ valid: true, value: { dataUrl, image } });\n            }}\n          />\n        </div>\n      </div>\n    ),\n  };\n}\n","import { FormControl, FormHelperText, TextField } from '@material-ui/core';\nimport React from 'react';\nimport { ParamValue, ParamFunction } from '../domain/types';\n\ntype ParsedParam<T> =\n  | { valid: true; value: T }\n  | { valid: false; reason: string };\n\nconst FloatParam: React.FC<{\n  name: string;\n  value?: number;\n  description?: string;\n  parse: (s: string) => ParsedParam<number>;\n  onChange: (v: ParamValue<number>) => void;\n}> = ({ name, value, description, parse, onChange }) => {\n  const [val, setVal] = React.useState(\n    value === undefined ? undefined : value.toString()\n  );\n  const [invalidText, setInvalidText] = React.useState('');\n\n  const onBlur = () => {\n    if (val === undefined) {\n      // Only if no default value provided and no changes have happened\n      return;\n    }\n\n    if (value && val === value.toString()) {\n      return; // Don't fire an onChange event if things haven't changed\n    }\n    const n = parse(val);\n    if (n.valid) {\n      setInvalidText('');\n    } else {\n      setInvalidText(n.reason);\n    }\n    onChange(n);\n  };\n\n  return (\n    <FormControl>\n      <FormHelperText>{description ?? ' '}</FormHelperText>\n      <TextField\n        label={name}\n        error={!!invalidText}\n        defaultValue={value}\n        onBlur={onBlur}\n        onChange={(e) => {\n          setVal(e.target.value);\n        }}\n      />\n      {invalidText && <FormHelperText>{invalidText}</FormHelperText>}\n    </FormControl>\n  );\n};\n\nexport const floatParam = (args: {\n  name: string;\n  defaultValue?: number;\n  min?: number;\n  max?: number;\n  description?: string;\n}): ParamFunction<number> => ({\n  name: args.name,\n  defaultValue:\n    args.defaultValue !== undefined\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n  fn: (params) => {\n    const { min, max } = args;\n    const parse = (s: string): ParsedParam<number> => {\n      const n = parseFloat(s);\n      if (isNaN(n)) {\n        return { valid: false, reason: 'Must be a number' };\n      }\n      if (min !== undefined && n < min) {\n        return {\n          valid: false,\n          reason: `Must be greater than or equal to ${min}`,\n        };\n      }\n      if (max !== undefined && n > max) {\n        return { valid: false, reason: `Must be less than or equal to ${max}` };\n      }\n      return { valid: true, value: n };\n    };\n\n    return (\n      <FloatParam\n        name={args.name}\n        description={args.description}\n        parse={parse}\n        onChange={params.onChange}\n        value={params.value.valid ? params.value.value : undefined}\n      />\n    );\n  },\n});\n","import { buildTransform } from '../types';\nimport { mapImage } from '../utils';\nimport { floatParam } from '../../params/floatParam';\n\nexport const bounce = buildTransform({\n  name: 'Bounce',\n  description: 'Make the image bounce up and down',\n  params: [\n    floatParam({\n      name: 'Bounce Speed',\n      defaultValue: 5,\n      min: 0,\n    }),\n  ],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel, parameters }) => {\n    const [x, y] = coord;\n    const yOffset =\n      y +\n      Math.round(\n        parameters[0] * Math.sin((frameIndex / frameCount) * 2 * Math.PI)\n      );\n\n    return getSrcPixel([x, yOffset]);\n  }),\n});\n","import { FormControl, FormHelperText, TextField } from '@material-ui/core';\nimport React from 'react';\nimport { ParamValue, ParamFunction } from '../domain/types';\n\ntype ParsedParam<T> =\n  | { valid: true; value: T }\n  | { valid: false; reason: string };\n\nconst IntParam: React.FC<{\n  name: string;\n  value?: number;\n  description?: string;\n  parse: (s: string) => ParsedParam<number>;\n  onChange: (v: ParamValue<number>) => void;\n}> = ({ name, value, description, parse, onChange }) => {\n  const [val, setVal] = React.useState(\n    value === undefined ? undefined : value.toString()\n  );\n  const [invalidText, setInvalidText] = React.useState('');\n\n  const onBlur = () => {\n    if (val === undefined) {\n      // Only if no default value provided and no changes have happened\n      return;\n    }\n\n    if (value && val === value.toString()) {\n      return; // Don't fire an onChange event if things haven't changed\n    }\n    const n = parse(val);\n    if (n.valid) {\n      setInvalidText('');\n    } else {\n      setInvalidText(n.reason);\n    }\n    onChange(n);\n  };\n\n  return (\n    <FormControl>\n      <FormHelperText>{description ?? ' '}</FormHelperText>\n      <TextField\n        label={name}\n        error={!!invalidText}\n        defaultValue={value}\n        onBlur={onBlur}\n        onChange={(e) => {\n          setVal(e.target.value);\n        }}\n      />\n      {invalidText && <FormHelperText>{invalidText}</FormHelperText>}\n    </FormControl>\n  );\n};\n\nexport const intParam = (args: {\n  name: string;\n  defaultValue?: number;\n  min?: number;\n  max?: number;\n  description?: string;\n}): ParamFunction<number> => ({\n  name: args.name,\n  defaultValue:\n    args.defaultValue !== undefined\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n  fn: (params) => {\n    const { min, max } = args;\n    const parse = (s: string): ParsedParam<number> => {\n      const n = parseInt(s, 10);\n      if (isNaN(n)) {\n        return { valid: false, reason: 'Must be an integer' };\n      }\n      if (min !== undefined && n < min) {\n        return {\n          valid: false,\n          reason: `Must be greater than or equal to ${min}`,\n        };\n      }\n      if (max !== undefined && n > max) {\n        return { valid: false, reason: `Must be less than or equal to ${max}` };\n      }\n      return { valid: true, value: n };\n    };\n\n    return (\n      <IntParam\n        name={args.name}\n        description={args.description}\n        parse={parse}\n        onChange={params.onChange}\n        value={params.value.valid ? params.value.value : undefined}\n      />\n    );\n  },\n});\n","import { buildTransform } from '../types';\nimport { mapImage, clampColor } from '../utils';\nimport { intParam } from '../../params/intParam';\n\nexport const brightness = buildTransform({\n  name: 'Brightness',\n  description: 'Increase or decrease the brightness of the image',\n  params: [\n    intParam({\n      name: 'Amount',\n      defaultValue: 0,\n      min: -100,\n      max: 100,\n    })\n  ],\n  fn: mapImage(({ coord, getSrcPixel, parameters }) => {\n    const [amount] = parameters;\n    const rawAmount = amount / 100 * 255;\n    const p = getSrcPixel(coord);\n    return clampColor([p[0] + rawAmount, p[1] + rawAmount, p[2] + rawAmount, p[3]])\n  }),\n});\n","import { buildTransform } from '../types';\nimport { mapImage } from '../utils';\nimport { floatParam } from '../../params/floatParam';\n\nexport const circle = buildTransform({\n  name: 'Circle',\n  params: [\n    floatParam({\n      name: 'Radius',\n      defaultValue: 10,\n      min: 0,\n    }),\n  ],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel, parameters }) => {\n    const [radius] = parameters;\n    const [x, y] = coord;\n    const xOffset = Math.round(\n      radius * Math.sin(-2 * Math.PI * (frameIndex / frameCount))\n    );\n    const yOffset = Math.round(\n      radius * Math.cos(-2 * Math.PI * (frameIndex / frameCount))\n    );\n    return getSrcPixel([x + xOffset, y + yOffset]);\n  }),\n});\n","import { buildTransform } from '../types';\nimport { mapImage } from '../utils';\nimport { floatParam } from '../../params/floatParam';\n\nexport const expand = buildTransform({\n  name: 'Expand',\n  params: [\n    floatParam({\n      name: 'Radius',\n      defaultValue: 10,\n      min: 0,\n    }),\n  ],\n  fn: mapImage(\n    ({\n      dimensions,\n      coord,\n      frameCount,\n      frameIndex,\n      getSrcPixel,\n      parameters,\n    }) => {\n      const idx = frameIndex / frameCount;\n      const dist = Math.cos(idx * 2 * Math.PI) * parameters[0];\n\n      // Kind of follows the same algorithm as resize, except the amount is dynamic\n      const [width, height] = dimensions;\n      const centerX = width / 2;\n      const centerY = height / 2;\n\n      const [x, y] = coord;\n      const xRatio = (x - centerX) / width;\n      const yRatio = (y - centerY) / height;\n\n      const xOffset = Math.floor(dist * xRatio);\n      const yOffset = Math.round(dist * yRatio);\n      return getSrcPixel([x - xOffset, y - yOffset]);\n    }\n  ),\n});\n","import { buildTransform } from '../types';\nimport { mapImage } from '../utils';\nimport { floatParam } from '../../params/floatParam';\n\n// Probably still needs work -- the inner pixels get all funky still\nexport const fisheye = buildTransform({\n  name: 'Fisheye',\n  params: [floatParam({ name: 'radius', defaultValue: 10, min: 0 })],\n  fn: mapImage(\n    ({\n      dimensions,\n      coord,\n      frameCount,\n      frameIndex,\n      getSrcPixel,\n      parameters,\n    }) => {\n      const idx = frameIndex / frameCount;\n      const expanding = idx < 0.5;\n      const [width, height] = dimensions;\n      const dist = (expanding ? idx : 1 - idx) * parameters[0];\n      const centerX = width / 2;\n      const centerY = height / 2;\n\n      const [x, y] = coord;\n      const angle = Math.atan2(centerY - y, centerX - x);\n\n      const xOffset = Math.round(dist * Math.cos(angle));\n      const yOffset = Math.round(dist * Math.sin(angle));\n      return getSrcPixel([x + xOffset, y + yOffset]);\n    }\n  ),\n});\n","import { Frame, buildTransform } from '../types';\nimport { repeat } from '../utils';\nimport { intParam } from '../../params/intParam';\n\nexport const frameCount = buildTransform({\n  name: 'Frame Count',\n  description: 'Set how many frames of animation there will be. This is required for all animation transforms',\n  params: [\n    intParam({\n      name: 'Number of Frames',\n      defaultValue: 10,\n      min: 1,\n    }),\n  ],\n  fn: ({ image, parameters }) => {\n    const [frameCount] = parameters;\n\n    const currentFrames = image.frames;\n\n    // Resulting image will contain frameCount frames.\n    // If the original image had less than that, then we'll copy the last frame until we have enough.\n    // If the original has more frames, then we'll discard the last ones.\n    const frames = repeat(frameCount).map(\n      (i): Frame => ({\n        data: currentFrames[i]\n          ? currentFrames[i].data\n          : currentFrames[currentFrames.length - 1].data,\n      })\n    );\n\n    return {\n      dimensions: image.dimensions,\n      frames,\n    };\n  },\n});\n","import { buildTransform } from '../types';\nimport { mapImage, isTransparent, getAveragePixelValue } from '../utils';\n\nexport const grayscale = buildTransform({\n  name: 'Grayscale',\n  params: [],\n  fn: mapImage(({ coord, getSrcPixel }) => {\n    const srcPixel = getSrcPixel(coord);\n\n    if (isTransparent(srcPixel)) {\n      return [0, 0, 0, 0];\n    }\n\n    const gray = getAveragePixelValue(srcPixel);\n\n    return [gray, gray, gray, 255];\n  }),\n});\n","import { buildTransform } from '../types';\nimport seedrandom from 'seedrandom';\n\nimport { Color } from '../types';\nimport {\n  mapFrames,\n  mapCoords,\n  getPixelFromSource,\n  isTransparent,\n} from '../utils';\nimport { textParam } from '../../params/textParam';\n\nconst lightningIntensities: Color[] = [\n  [0, 15, 40, 255], // dark color\n  [150, 150, 175, 255],\n  [180, 180, 205, 255],\n  [210, 210, 235, 255],\n];\n\nexport const lightning = buildTransform({\n  name: 'Lightning',\n  params: [\n    textParam({\n      name: 'Random Seed',\n      defaultValue: 'lightning',\n    }),\n  ],\n  fn: ({ image, parameters }) => {\n    const random = seedrandom(parameters[0]);\n    return mapFrames(image, (data) => {\n      const i = random();\n      const flashIntensity = i < 0.9 ? 0 : i < 0.95 ? 1 : i < 0.98 ? 2 : 3;\n\n      return mapCoords(image.dimensions, (coord) => {\n        const src = getPixelFromSource(image.dimensions, data, coord);\n\n        if (isTransparent(src)) {\n          return lightningIntensities[flashIntensity];\n        }\n\n        if (flashIntensity > 0) {\n          // We're flashing, so brighten up the image a little\n          const icf = 1.02 * flashIntensity;\n          return [src[0] * icf, src[1] * icf, src[2] * icf, src[3]];\n        }\n\n        // No lightning\n        return src;\n      });\n    });\n  },\n});\n","import { buildTransform, Color } from '../types';\nimport { isTransparent, getAveragePixelValue, mapImage } from '../utils';\n\nconst PARTY_COLORS: Color[] = [\n  [255, 141, 139, 255],\n  [254, 214, 137, 255],\n  [136, 255, 137, 255],\n  [135, 255, 255, 255],\n  [139, 181, 254, 255],\n  [215, 140, 255, 255],\n  [255, 140, 255, 255],\n  [255, 104, 247, 255],\n  [254, 108, 183, 255],\n  [255, 105, 104, 255],\n];\n\nexport const party = buildTransform({\n  name: 'Party',\n  params: [],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel }) => {\n    const srcPixel = getSrcPixel(coord);\n\n    if (isTransparent(srcPixel)) {\n      return [0, 0, 0, 0];\n    }\n\n    const partyColorIdx = Math.floor(\n      (frameIndex / frameCount) * PARTY_COLORS.length\n    );\n    const partyColor = PARTY_COLORS[partyColorIdx];\n\n    const gray = getAveragePixelValue(srcPixel);\n\n    return [\n      (gray * partyColor[0]) / 255,\n      (gray * partyColor[1]) / 255,\n      (gray * partyColor[2]) / 255,\n      255,\n    ];\n  }),\n});\n","import React from 'react';\nimport {\n  Collapse,\n  Icon,\n  Box,\n  Button,\n  ClickAwayListener,\n  Stack,\n} from '@material-ui/core';\n\ninterface ExpandableProps {\n  mainEle: JSX.Element;\n}\n\nexport const Expandable: React.FC<ExpandableProps> = ({\n  mainEle,\n  children,\n}) => {\n  const [collapsed, setCollapsed] = React.useState(true);\n\n  return (\n    <ClickAwayListener onClickAway={() => setCollapsed(true)}>\n      <Box>\n        <Button\n          onClick={() => setCollapsed(!collapsed)}\n          style={{ textTransform: 'none' }}\n        >\n          <Stack direction=\"row\" spacing={4}>\n            <div>{mainEle}</div>\n            <Icon>{collapsed ? 'expand_less' : 'expand_more'}</Icon>\n          </Stack>\n        </Button>\n        <Collapse in={!collapsed}>{children}</Collapse>\n      </Box>\n    </ClickAwayListener>\n  );\n};\n","import { Icon, Stack, Tooltip } from '@material-ui/core';\nimport React from 'react';\nimport { SketchPicker } from 'react-color';\nimport { Expandable } from '../components/Expandable';\n\nimport { ParamValue, ParamFunction, Color } from '../domain/types';\nimport { fromHexColor, toHexColor } from '../domain/utils';\n\nconst ColorBox: React.FC<{ color: Color }> = ({ color }) => (\n  <div\n    style={{\n      width: '1.5em',\n      height: '1.5em',\n      backgroundColor: toHexColor(color),\n    }}\n  />\n);\n\nconst ColorPickerParam: React.FC<{\n  name: string;\n  value?: Color;\n  description?: string;\n  onChange: (v: ParamValue<Color>) => void;\n}> = ({ name, value, description, onChange }) => {\n  return (\n    <Expandable\n      mainEle={\n        <Stack direction=\"row\" spacing={4}>\n          <div>{name}</div>\n          {description && (\n            <Tooltip title={description}>\n              <Icon>help</Icon>\n            </Tooltip>\n          )}\n          {value && <ColorBox color={value} />}\n        </Stack>\n      }\n    >\n      <SketchPicker\n        disableAlpha={true}\n        presetColors={[]}\n        color={value ? toHexColor(value) : undefined}\n        onChangeComplete={(c) =>\n          onChange({ valid: true, value: fromHexColor(c.hex) })\n        }\n      />\n    </Expandable>\n  );\n};\n\nexport function colorPickerParam(args: {\n  name: string;\n  defaultValue?: Color;\n  description?: string;\n}): ParamFunction<Color> {\n  return {\n    name: args.name,\n    defaultValue: args.defaultValue\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n    fn: (params) => {\n      return (\n        <ColorPickerParam\n          name={args.name}\n          value={params.value.valid ? params.value.value : undefined}\n          onChange={params.onChange}\n        />\n      );\n    },\n  };\n}\n","import {\n  Tooltip,\n  Icon,\n  IconButton,\n  Button,\n  Paper,\n  Typography,\n  Stack,\n} from '@material-ui/core';\nimport React from 'react';\nimport { ParamValue, ParamFunction } from '../domain/types';\n\ninterface VariableLengthProps<T> {\n  name: string;\n  newParamText: string;\n  createNewParam: () => ParamFunction<T>;\n  value?: T[];\n  description?: string;\n  onChange: (v: ParamValue<T>) => void;\n}\n\nconst VariableLengthParam: React.FC<VariableLengthProps<any>> = ({\n  name,\n  newParamText,\n  createNewParam,\n  value,\n  description,\n  onChange,\n}) => {\n  const [params, setParams] = React.useState<\n    { param: ParamFunction<any>; pValue: any }[]\n  >(\n    value === undefined\n      ? []\n      : value.map((v, idx) => ({ param: createNewParam(), pValue: v }))\n  );\n  return (\n    <Paper>\n      <Stack>\n        <Stack direction=\"row\" spacing={4}>\n          <Typography variant=\"h5\" component=\"div\">\n            {name}\n          </Typography>\n          {description && (\n            <Tooltip title={description}>\n              <Icon>help</Icon>\n            </Tooltip>\n          )}\n        </Stack>\n        {params.map(({ param, pValue }, idx) => {\n          const ele = param.fn({\n            value: { valid: true, value: pValue },\n            onChange: (newValue) => {\n              if (newValue.valid) {\n                const p = params.map((oldP, i) => {\n                  if (idx === i) {\n                    return {\n                      param,\n                      pValue: newValue.value,\n                    };\n                  }\n                  return oldP;\n                });\n                setParams(p);\n                onChange({\n                  valid: true,\n                  value: p.map((n) => n.pValue),\n                });\n              }\n            },\n          });\n\n          return (\n            <Stack direction=\"row\" key={`${name}-${idx}`}>\n              <IconButton\n                onClick={() => {\n                  const newParams = params.filter((x, i) => i !== idx);\n                  setParams(newParams);\n                  onChange({\n                    valid: true,\n                    value: newParams.map((n) => n.pValue),\n                  });\n                }}\n              >\n                <Icon>delete</Icon>\n              </IconButton>\n              {ele}\n            </Stack>\n          );\n        })}\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            const p = createNewParam();\n            const newParams = [\n              ...params,\n              {\n                param: p,\n                pValue: p.defaultValue.valid ? p.defaultValue.value : undefined,\n              },\n            ];\n            setParams(newParams);\n            if (p.defaultValue.valid) {\n              onChange({\n                valid: true,\n                value: newParams.map((n) => n.pValue),\n              });\n            }\n          }}\n        >\n          {newParamText}\n        </Button>\n      </Stack>\n    </Paper>\n  );\n};\n\nexport function variableLengthParam<T>(args: {\n  name: string;\n  newParamText: string;\n  createNewParam: () => ParamFunction<T>;\n  description?: string;\n  defaultValue?: T[];\n}): ParamFunction<T[]> {\n  return {\n    name: args.name,\n    defaultValue: args.defaultValue\n      ? { valid: true, value: args.defaultValue }\n      : { valid: false },\n    fn: (params) => {\n      return (\n        <VariableLengthParam\n          name={args.name}\n          newParamText={args.newParamText}\n          value={params.value.valid ? params.value.value : undefined}\n          createNewParam={args.createNewParam}\n          description={args.description}\n          onChange={params.onChange}\n        />\n      );\n    },\n  };\n}\n","import { buildTransform } from '../types';\nimport { mapImage, isTransparent, fromHexColor } from '../utils';\nimport { colorPickerParam } from '../../params/colorPickerParam';\nimport { intParam } from '../../params/intParam';\nimport { variableLengthParam } from '../../params/variableLengthParam';\n\nconst DEFAULT_COLORS = [\n  '#FF0000',\n  '#FF9600',\n  '#FFFF00',\n  '#00FF00',\n  '#00FF96',\n  '#00FFFF',\n  '#0000FF',\n  '#B400FF',\n].map(fromHexColor);\n\nexport const pinwheel = buildTransform({\n  name: 'Pinwheel',\n  description: 'Create a pinwheel of colors',\n  params: [\n    intParam({\n      name: 'Offset X',\n      defaultValue: 0,\n    }),\n    intParam({\n      name: 'Offset Y',\n      defaultValue: 40,\n    }),\n    intParam({\n      name: 'Group Count',\n      defaultValue: 1,\n      min: 1,\n    }),\n    variableLengthParam({\n      name: 'Colors',\n      newParamText: 'New Color',\n      description: 'Colors for the pinwheel',\n      defaultValue: DEFAULT_COLORS,\n      createNewParam: () =>\n        colorPickerParam({\n          name: 'Color',\n        }),\n    }),\n  ] as const,\n  fn: mapImage(\n    ({\n      coord,\n      dimensions,\n      frameCount,\n      frameIndex,\n      getSrcPixel,\n      parameters,\n    }) => {\n      const srcPixel = getSrcPixel(coord);\n\n      const [offsetX, offsetY, groupCount, colors] = parameters;\n\n      const ribbonCount = colors.length * groupCount;\n      const ribbonArcDegrees = Math.round(360 / ribbonCount);\n      // Need to make sure ribbonCount is always a multiple of the number of images, otherwise we\n      //  won't get a smooth transition.\n      // We'll cut off colors from the end of the list until we get an even multiple.\n      let colorsLength = colors.length;\n      while ((ribbonCount / colorsLength).toFixed(2).slice(-2) !== '00') {\n        colorsLength -= 1;\n      }\n\n      // Make the transparent parts colorful\n      if (isTransparent(srcPixel)) {\n        const centerX = dimensions[0] / 2 + offsetX;\n        const centerY = dimensions[1] / 2 + offsetY;\n        const [x, y] = coord;\n        const xRelCenter = x - centerX;\n        const yRelCenter = y - centerY;\n\n        const pointAngle =\n          (360 + (Math.atan2(yRelCenter, xRelCenter) * 180) / Math.PI) % 360;\n\n        const colorIdx =\n          Math.floor(pointAngle / ribbonArcDegrees) % colorsLength;\n\n        // Increment colorIdx based on current frame progress\n        const frameProgress = frameIndex / frameCount;\n        const idx =\n          (Math.floor(frameProgress * colorsLength) + colorIdx) % colorsLength;\n        return colors[idx];\n      }\n\n      return srcPixel;\n    }\n  ),\n});\n","import { buildTransform } from '../types';\nimport { mapImage, isTransparent, repeat, fromHexColor } from '../utils';\nimport { colorPickerParam } from '../../params/colorPickerParam';\nimport { intParam } from '../../params/intParam';\nimport { variableLengthParam } from '../../params/variableLengthParam';\n\nconst DEFAULT_COLORS = [\n  '#FF0000',\n  '#FF9600',\n  '#FFFF00',\n  '#00FF00',\n  '#00FF96',\n  '#00FFFF',\n  '#0000FF',\n  '#B400FF',\n].map(fromHexColor);\n\nexport const radiance = buildTransform({\n  name: 'Radiance',\n  params: [\n    intParam({\n      name: 'Group Count',\n      defaultValue: 1,\n      min: 1,\n    }),\n    variableLengthParam({\n      name: 'Colors',\n      newParamText: 'New Color',\n      description: 'Colors radiating outwards',\n      defaultValue: DEFAULT_COLORS,\n      createNewParam: () =>\n        colorPickerParam({\n          name: 'Color',\n        }),\n    }),\n  ] as const,\n  fn: mapImage(\n    ({\n      coord,\n      dimensions,\n      frameCount,\n      frameIndex,\n      getSrcPixel,\n      parameters,\n    }) => {\n      const srcPixel = getSrcPixel(coord);\n\n      const [groupCount, colors] = parameters;\n      const colorList = repeat(groupCount).flatMap(() => colors);\n\n      // Make the transparent parts colorful\n      if (isTransparent(srcPixel)) {\n        const [width, height] = dimensions;\n        const centerX = width / 2;\n        const centerY = height / 2;\n        const [x, y] = coord;\n        const xRelCenter = x - centerX;\n        const yRelCenter = y - centerY;\n\n        const maxDist = Math.sqrt(\n          (width / 2) * (width / 2) + (height / 2) * (height / 2)\n        );\n        const distFromCenter = Math.sqrt(\n          yRelCenter * yRelCenter + xRelCenter * xRelCenter\n        );\n\n        const colorIdx =\n          Math.floor((1 - distFromCenter / maxDist) * colorList.length) %\n          colorList.length;\n\n        // Increment colorIdx based on current frame progress\n        const frameProgress = frameIndex / frameCount;\n        const idx =\n          (Math.floor(frameProgress * colorList.length) + colorIdx) %\n          colorList.length;\n        return colorList[idx];\n      }\n\n      return srcPixel;\n    }\n  ),\n});\n","import { backgroundParty } from './background-party';\nimport { backgroundImage } from './background-image';\nimport { bounce } from './bounce';\nimport { brightness } from './brightness';\nimport { circle } from './circle';\nimport { expand } from './expand';\nimport { fisheye } from './fisheye';\nimport { frameCount } from './frame-count';\nimport { grayscale } from './grayscale';\nimport { lightning } from './lightning';\nimport { party } from './party';\nimport { pinwheel } from './pinwheel';\nimport { radiance } from './radiance';\nimport { resize } from './resize';\nimport { resizeBackground } from './resize-background';\nimport { ripple } from './ripple';\nimport { rotate } from './rotate';\nimport { roxbury } from './roxbury';\nimport { shake } from './shake';\nimport { solidBackground } from './solid-background';\nimport { staticc } from './static';\nimport { transparency } from './transparency';\nimport { transpose } from './transpose';\n\nexport const POSSIBLE_TRANSFORMS = [\n  backgroundImage,\n  backgroundParty,\n  bounce,\n  brightness,\n  circle,\n  expand,\n  fisheye,\n  frameCount,\n  grayscale,\n  lightning,\n  party,\n  pinwheel,\n  radiance,\n  resize,\n  resizeBackground,\n  ripple,\n  rotate,\n  roxbury,\n  shake,\n  solidBackground,\n  staticc,\n  transparency,\n  transpose,\n];\n","import { buildTransform } from '../types';\nimport { resizeImage } from '../utils';\nimport { intParam } from '../../params/intParam';\n\nexport const resize = buildTransform({\n  name: 'Resize',\n  params: [\n    intParam({\n      name: 'Width',\n      defaultValue: 128,\n      min: 1,\n    }),\n    intParam({\n      name: 'Height',\n      defaultValue: 128,\n      min: 1,\n    }),\n  ] as const,\n  fn: ({ image, parameters }) => {\n    const [newWidth, newHeight] = parameters;\n    return resizeImage({\n      image,\n      newWidth,\n      newHeight,\n    });\n  },\n});\n","import { buildTransform, Color, Dimensions } from '../types';\nimport { assert, getPixelFromSource, writePixel } from '../utils';\nimport { intParam } from '../../params/intParam';\n\nexport const resizeBackground = buildTransform({\n  name: 'Resize Background',\n  params: [\n    intParam({ name: 'Width', defaultValue: 128, min: 0 }),\n    intParam({ name: 'Height', defaultValue: 128, min: 0 }),\n  ],\n  fn: ({ image, parameters }) => {\n    const [width, height] = image.dimensions;\n    const [newWidth, newHeight] = parameters;\n    assert(\n      newWidth >= width,\n      'New width for resize-background needs to be greater than or equal to the original'\n    );\n    assert(\n      newHeight >= height,\n      'New height for resize-background needs to be greater than or equal to the original'\n    );\n\n    const newDimensions: Dimensions = [newWidth, newHeight];\n\n    const xPadding = (newWidth - width) / 2;\n    const yPadding = (newHeight - height) / 2;\n\n    const newFrames = image.frames.map((frame) => {\n      const transformedImageData = new Uint8Array(newWidth * newHeight * 4);\n      for (let y = 0; y < newHeight; y += 1) {\n        for (let x = 0; x < newWidth; x += 1) {\n          const pixel: Color =\n            x > xPadding &&\n            x < newWidth - xPadding &&\n            y > yPadding &&\n            y < newHeight - yPadding\n              ? getPixelFromSource(image.dimensions, frame.data, [\n                  x - xPadding,\n                  y - yPadding,\n                ])\n              : [0, 0, 0, 0];\n          writePixel({\n            color: pixel,\n            coord: [x, y],\n            dimensions: newDimensions,\n            image: transformedImageData,\n          });\n        }\n      }\n      return {\n        data: transformedImageData,\n      };\n    });\n\n    return {\n      frames: newFrames,\n      dimensions: newDimensions,\n    };\n  },\n});\n","import { buildTransform } from '../types';\nimport { mapFrames, mapCoords, getPixelFromSource } from '../utils';\nimport { floatParam } from '../../params/floatParam';\n\nexport const ripple = buildTransform({\n  name: 'Ripple',\n  params: [\n    floatParam({\n      name: 'Amplitude',\n      defaultValue: 10,\n      description: 'How strong the ripple effect should be',\n    }),\n    floatParam({\n      name: 'Period',\n      defaultValue: 2,\n      min: 0,\n      description: 'How many ripples you want',\n    }),\n  ],\n  fn: ({ image, parameters }) =>\n    mapFrames(image, (data, frameIndex, frameCount) => {\n      const [amplitude, period] = parameters;\n\n      const height = image.dimensions[1];\n      const shift = (frameIndex / frameCount) * 2 * Math.PI;\n      return mapCoords(image.dimensions, ([x, y]) => {\n        const offset = Math.round(\n          amplitude * Math.sin((y / height) * period * Math.PI + shift)\n        );\n\n        return getPixelFromSource(image.dimensions, data, [x + offset, y]);\n      });\n    }),\n});\n","import { mapImage } from '../utils';\nimport { buildTransform, Coord } from '../types';\nimport { dropdownParam } from '../../params/dropdownParam';\n\nexport const rotate = buildTransform({\n  name: 'Rotate',\n  params: [\n    dropdownParam({\n      name: 'Direction',\n      defaultValue: -1,\n      options: [\n        { name: 'Clockwise', value: -1 },\n        { name: 'Counter-Clockwise', value: 1 },\n      ],\n    }),\n  ],\n  fn: mapImage(\n    ({\n      dimensions,\n      coord,\n      frameCount,\n      frameIndex,\n      getSrcPixel,\n      parameters,\n    }) => {\n      const [sign] = parameters;\n      const centerX = dimensions[0] / 2;\n      const centerY = dimensions[1] / 2;\n      const [x, y] = coord;\n      const xRelCenter = x - centerX;\n      const yRelCenter = y - centerY;\n\n      const amount = (frameIndex / frameCount) * (sign || 1);\n      const cos = Math.cos(2 * Math.PI * amount);\n      const sin = Math.sin(2 * Math.PI * amount);\n\n      const newCoord: Coord = [\n        Math.round(centerX + xRelCenter * cos - yRelCenter * sin),\n        Math.round(centerY + yRelCenter * cos + xRelCenter * sin),\n      ];\n\n      return getSrcPixel(newCoord);\n    }\n  ),\n});\n","import { mapFrames, mapCoords, getPixelFromSource } from '../utils';\nimport { buildTransform, Coord } from '../types';\n\nexport const roxbury = buildTransform({\n  name: 'Roxbury',\n  params: [],\n  fn: ({ image }) =>\n    mapFrames(image, (data, frameIndex, frameCount) => {\n      const idx = frameIndex / frameCount;\n      // 4 phases:\n      //  0 -> freeze\n      //  1 -> rotate clockwise\n      //  2 -> freeze\n      //  3 -> rotate counter-clockwise\n      const phase = Math.floor(idx * 4);\n      const phaseIdx = (idx - phase / 4) * 4;\n\n      const maxAngle = (Math.PI / 2) * 0.2; // 40% of 90 degrees\n\n      const angle =\n        phase === 0\n          ? 0\n          : phase === 1\n          ? phaseIdx * maxAngle // Rotate clockwise\n          : phase === 2\n          ? maxAngle // Freeze!\n          : (1 - phaseIdx) * maxAngle; // Rotate counter-clockwise\n\n      const cos = Math.cos(-angle * 1.35);\n      const sin = Math.sin(-angle * 1.35);\n\n      const rotatePointX = image.dimensions[0] * 0.25;\n      const rotatePointY = image.dimensions[1] * 0.7;\n\n      return mapCoords(image.dimensions, (coord) => {\n        const [x, y] = coord;\n        const xRelCenter = Math.floor(x - rotatePointX + 8 * Math.sin(angle));\n        const yRelCenter = Math.floor(y - rotatePointY + 8 * Math.cos(angle));\n\n        const newCoord: Coord = [\n          Math.round(rotatePointX + xRelCenter * cos - yRelCenter * sin),\n          Math.round(rotatePointY + yRelCenter * cos + xRelCenter * sin),\n        ];\n\n        return getPixelFromSource(image.dimensions, data, newCoord);\n      });\n    }),\n});\n","import { buildTransform } from '../types';\nimport { mapImage } from '../utils';\nimport { floatParam } from '../../params/floatParam';\n\nexport const shake = buildTransform({\n  name: 'Shake',\n  params: [floatParam({ name: 'Shake Speed', defaultValue: 10, min: 0 })],\n  fn: mapImage(({ coord, frameCount, frameIndex, getSrcPixel, parameters }) => {\n    const [shakeSpeed] = parameters;\n    const [x, y] = coord;\n    const xOffset =\n      x +\n      Math.round(\n        shakeSpeed * Math.cos((frameIndex / frameCount) * 2 * Math.PI)\n      );\n\n    return getSrcPixel([xOffset, y]);\n  }),\n});\n","import { buildTransform } from '../types';\nimport { mapImage, isTransparent, fromHexColor } from '../utils';\nimport { colorPickerParam } from '../../params/colorPickerParam';\n\nexport const solidBackground = buildTransform({\n  name: 'Solid Background',\n  params: [\n    colorPickerParam({\n      name: 'Background Color',\n      defaultValue: fromHexColor('#000000'),\n    }),\n  ],\n  fn: mapImage(({ coord, getSrcPixel, parameters }) => {\n    const [color] = parameters;\n    const p = getSrcPixel(coord);\n    return isTransparent(p) ? color : p;\n  }),\n});\n","import { buildTransform } from '../types';\nimport { mapImage, isTransparent } from '../utils';\nimport { floatParam } from '../../params/floatParam';\n\nexport const staticc = buildTransform({\n  name: 'Static',\n  params: [floatParam({ name: 'Strength', defaultValue: 10, min: 0 })],\n  fn: mapImage(({ coord, getSrcPixel, parameters, random }) => {\n    const [strength] = parameters;\n    const src = getSrcPixel(coord);\n\n    if (isTransparent(src)) {\n      return [0, 0, 0, 0];\n    }\n\n    const inverse = Math.ceil(random() * strength) > 1;\n\n    return inverse ? [255 - src[0], 255 - src[1], 255 - src[2], src[3]] : src;\n  }),\n});\n","import { buildTransform } from '../types';\nimport { fromHexColor, mapImage } from '../utils';\nimport { colorPickerParam } from '../../params/colorPickerParam';\nimport { intParam } from '../../params/intParam';\n\nexport const transparency = buildTransform({\n  name: 'Transparent Color',\n  params: [\n    colorPickerParam({\n      name: 'Transparent Color',\n      defaultValue: fromHexColor('#000000'),\n    }),\n    intParam({\n      name: 'Tolerance',\n      defaultValue: 10,\n      min: 0,\n      max: 100,\n    }),\n  ] as const,\n  fn: mapImage(({ coord, getSrcPixel, parameters }) => {\n    const [color, tolerance] = parameters;\n    const p = getSrcPixel(coord);\n    const diff0 = p[0] - color[0];\n    const diff1 = p[1] - color[1];\n    const diff2 = p[2] - color[2];\n    const diff = Math.sqrt(diff0 * diff0 + diff1 * diff1 + diff2 * diff2);\n    if ((diff / 255) * 100 <= tolerance) {\n      return [p[0], p[1], p[2], 0];\n    }\n    return p;\n  }),\n});\n","import { buildTransform } from '../types';\nimport { mapImage } from '../utils';\nimport { intParam } from '../../params/intParam';\n\nexport const transpose = buildTransform({\n  name: 'Transpose',\n  params: [\n    intParam({ name: 'X', defaultValue: 0 }),\n    intParam({ name: 'Y', defaultValue: 0 }),\n  ],\n  fn: mapImage(({ coord, getSrcPixel, parameters }) => {\n    const [transX, transY] = parameters;\n    const [x, y] = coord;\n\n    return getSrcPixel([x + transX, y + transY]);\n  }),\n});\n","import React from 'react';\nimport { Button, CircularProgress, Icon } from '@material-ui/core';\n\nimport { assert } from '../domain/utils';\nimport { runTransforms } from '../domain/run';\nimport { TransformInput, TransformWithParams } from '../domain/types';\nimport { intParam } from '../params/intParam';\n\ninterface ComputeBoxProps {\n  isDirty: boolean;\n  computeDisabled: boolean;\n  baseImageUrl?: string;\n  transforms: TransformWithParams<any>[];\n  onComputed: () => void;\n}\n\ntype ComputeState = { loading: false; results: string[] } | { loading: true };\n\nconst DEFAULT_FPS = 20;\nconst fpsParam = intParam({\n  name: 'Frames per Second',\n  defaultValue: DEFAULT_FPS,\n  min: 0,\n});\n\nexport const ComputeBox: React.FC<ComputeBoxProps> = ({\n  isDirty,\n  computeDisabled,\n  baseImageUrl,\n  transforms,\n  onComputed,\n}) => {\n  const [state, setState] = React.useState<ComputeState>({\n    loading: false,\n    results: [],\n  });\n  const [fpsChanged, setFpsChanged] = React.useState(false);\n  const [fps, setFps] = React.useState(DEFAULT_FPS);\n\n  const buttonDisabled = computeDisabled && !fpsChanged;\n\n  return (\n    <div className=\"box\">\n      <h3 className=\"title\">Create Gif</h3>\n      <div className=\"block\">\n        {fpsParam.fn({\n          value: { valid: true, value: fps },\n          onChange: (x) => {\n            if (x.valid) {\n              setFps(x.value);\n              setFpsChanged(true);\n            }\n          },\n        })}\n      </div>\n      <div className=\"block\">\n        <Button\n          variant=\"contained\"\n          endIcon={\n            isDirty || fpsChanged ? <Icon>priority_high</Icon> : undefined\n          }\n          disabled={buttonDisabled}\n          onClick={async () => {\n            const transformInputs = transforms.map(\n              (t): TransformInput<any> => ({\n                transform: t.transform,\n                params: t.paramsValues.map((p) => {\n                  assert(p.valid);\n                  return p.value;\n                }),\n              })\n            );\n            setState({ loading: true });\n            setTimeout(async () => {\n              try {\n                assert(\n                  baseImageUrl,\n                  'No source image, this button should be disabled!'\n                );\n                const gifs = await runTransforms(\n                  baseImageUrl,\n                  transformInputs,\n                  fps\n                );\n                setState({\n                  loading: false,\n                  results: gifs,\n                });\n                setFpsChanged(false);\n                onComputed();\n              } catch (err) {\n                console.error(err);\n                console.error(err.stack);\n              }\n            });\n          }}\n        >\n          {state.loading ? <CircularProgress color=\"inherit\" /> : 'Compute'}\n        </Button>\n      </div>\n      <div className=\"block\">\n        <div className=\"columns\">\n          {!state.loading &&\n            state.results.map((gif, idx) => (\n              <div className=\"column\">\n                <div>{transforms[idx].transform.name}</div>\n                <img\n                  src={gif}\n                  alt={`gif-${transforms[idx].transform.name}`}\n                ></img>\n              </div>\n            ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import {\n  FormControl,\n  Select,\n  MenuItem,\n  IconButton,\n  Icon,\n  Tooltip,\n} from '@material-ui/core';\nimport React from 'react';\n\nimport { ParamFunction, ParamValue, Transform } from '../domain/types';\n\ninterface SelectedTransform {\n  transform: Transform<any>;\n  paramValues: ParamValue<any>[];\n}\n\ninterface ImageTransformProps {\n  selectedTransform: SelectedTransform;\n  possibleTransforms: Transform<any>[];\n  index: number;\n  onSelect: (selected: SelectedTransform) => void;\n  onRemove: () => void;\n  onMoveLeft?: () => void;\n  onMoveRight?: () => void;\n}\n\nexport const ImageTransform: React.FC<ImageTransformProps> = ({\n  selectedTransform,\n  possibleTransforms,\n  index,\n  onSelect,\n  onRemove,\n  onMoveLeft,\n  onMoveRight,\n}) => {\n  return (\n    <div className=\"card\" style={{ padding: '0.75rem', maxWidth: '24rem' }}>\n      <div className=\"card-header-title\">\n        <div className=\"columns is-desktop\">\n          <div className=\"column\">\n            <div className=\"block columns\">\n              <div className=\"column is-narrow\">{index + 1}</div>\n              <div className=\"column\">\n                <FormControl fullWidth>\n                  <Select\n                    autoWidth\n                    value={selectedTransform.transform.name}\n                    onChange={(event) => {\n                      const newTransformName = event.target.value;\n                      const t = possibleTransforms.find(\n                        (t) => t.name === newTransformName\n                      )!;\n                      // Reset all the params when you select a new transform\n                      onSelect({\n                        transform: t,\n                        paramValues: t.params.map(\n                          (p: ParamFunction<any>) => p.defaultValue\n                        ),\n                      });\n                    }}\n                  >\n                    {possibleTransforms.map((t) => (\n                      <MenuItem key={t.name} value={t.name}>\n                        {t.name}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </div>\n            </div>\n            {selectedTransform.transform.description && (\n              <div className=\"block\" style={{ fontSize: '0.75rem' }}>\n                {selectedTransform.transform.description}\n              </div>\n            )}\n          </div>\n          <div className=\"column columns\">\n            {onMoveLeft && (\n              <Tooltip title=\"Move transform left\">\n                <IconButton aria-label=\"delete\" onClick={onMoveLeft}>\n                  <Icon>chevron_left</Icon>\n                </IconButton>\n              </Tooltip>\n            )}\n            {onMoveRight && (\n              <Tooltip title=\"Move transform right\">\n                <IconButton aria-label=\"delete\" onClick={onMoveRight}>\n                  <Icon>chevron_right</Icon>\n                </IconButton>\n              </Tooltip>\n            )}\n            <Tooltip title=\"Delete transform\">\n              <IconButton aria-label=\"delete\" onClick={onRemove}>\n                <Icon>delete</Icon>\n              </IconButton>\n            </Tooltip>\n          </div>\n        </div>\n      </div>\n      <div className=\"card-content\">\n        {selectedTransform.transform.params.map(\n          // Create elements for each of the parameters for the selectect transform.\n          // Each of these would get an onChange event so we know when the user has\n          //  selected a value.\n          (param: ParamFunction<any>, idx: number) => {\n            const ele = param.fn({\n              value: selectedTransform.paramValues[idx],\n              onChange: (v) => {\n                onSelect({\n                  ...selectedTransform,\n                  paramValues: selectedTransform.paramValues.map((x, i) => {\n                    if (i === idx) {\n                      return v;\n                    }\n                    return x;\n                  }),\n                });\n              },\n            });\n            return (\n              <div className=\"block\" key={param.name}>\n                {ele}\n              </div>\n            );\n          }\n        )}\n      </div>\n    </div>\n  );\n};\n","import { Button } from '@material-ui/core';\nimport React from 'react';\nimport { ParamFunction, Transform, TransformWithParams } from '../domain/types';\nimport { ImageTransform } from './ImageTransform';\n\ninterface TransformListProps {\n  currentTransforms: TransformWithParams<any>[];\n  possibleTransforms: Transform<any>[];\n  onTransformsChange: (t: TransformWithParams<any>[]) => void;\n}\n\nexport const ImageTransformList: React.FC<TransformListProps> = ({\n  currentTransforms,\n  possibleTransforms,\n  onTransformsChange,\n}) => (\n  <div className=\"box\">\n    <h3 className=\"title\">Image Transforms</h3>\n    <div className=\"block\">\n      <Button\n        variant=\"contained\"\n        onClick={() =>\n          onTransformsChange([\n            ...currentTransforms,\n            {\n              transform: possibleTransforms[0],\n              paramsValues: possibleTransforms[0].params.map(\n                (p: ParamFunction<any>) => p.defaultValue\n              ),\n            },\n          ])\n        }\n      >\n        New Transform\n      </Button>\n    </div>\n    <div\n      className=\"columns\"\n      style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)' }}\n    >\n      {currentTransforms.map((t, tIdx) => (\n        <div className=\"column\">\n          <ImageTransform\n            index={tIdx}\n            possibleTransforms={possibleTransforms}\n            selectedTransform={{\n              transform: t.transform,\n              paramValues: t.paramsValues,\n            }}\n            onRemove={() =>\n              onTransformsChange(\n                currentTransforms.filter((nextT, newIdx) => newIdx !== tIdx)\n              )\n            }\n            onMoveLeft={\n              tIdx > 0\n                ? () =>\n                    onTransformsChange(\n                      currentTransforms.map((nextT, newIdx) => {\n                        if (newIdx === tIdx - 1) {\n                          // This is the next item in the list\n                          return currentTransforms[newIdx + 1];\n                        } else if (tIdx === newIdx) {\n                          // This is the previous item\n                          return currentTransforms[tIdx - 1];\n                        } else {\n                          return nextT;\n                        }\n                      })\n                    )\n                : undefined\n            }\n            onMoveRight={\n              tIdx < currentTransforms.length - 1\n                ? () =>\n                    onTransformsChange(\n                      currentTransforms.map((nextT, newIdx) => {\n                        if (newIdx === tIdx + 1) {\n                          // This is the previous item in the list\n                          return currentTransforms[newIdx - 1];\n                        } else if (tIdx === newIdx) {\n                          // This is the next item\n                          return currentTransforms[tIdx + 1];\n                        } else {\n                          return nextT;\n                        }\n                      })\n                    )\n                : undefined\n            }\n            onSelect={(selected) =>\n              onTransformsChange(\n                currentTransforms.map((nextT, nextTIdx) => {\n                  if (tIdx === nextTIdx) {\n                    // This is the one we just changed\n                    return {\n                      transform: selected.transform,\n                      paramsValues: selected.paramValues,\n                      computedImage: undefined,\n                    };\n                  }\n                  // Reset all the images if we changed anything\n                  return {\n                    transform: nextT.transform,\n                    paramsValues: nextT.paramsValues,\n                    computedImage: undefined,\n                  };\n                })\n              )\n            }\n          />\n        </div>\n      ))}\n      <div className=\"box\" style={{ display: 'none' }}>\n        {/* Placeholder, because the last box has no bottom padding */}\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\nimport ScopedCssBaseline from '@material-ui/core/ScopedCssBaseline';\n\nimport { POSSIBLE_TRANSFORMS } from './domain/transforms';\nimport { ParamFunction, ParamValue, Transform } from './domain/types';\nimport { ComputeBox } from './components/ComputeBox';\nimport { ImagePicker } from './components/ImagePicker';\nimport { ImageTransformList } from './components/ImageTransformList';\n\n// Set to true to print out the current state at the bottom of the page\nconst DEBUG = false;\n\ntype AppState = {\n  baseImage?: string;\n  transforms: {\n    transform: Transform<any>;\n    paramsValues: ParamValue<any>[];\n    computedImage?: string;\n  }[];\n  dirty: boolean;\n};\n\nexport const App: React.FC = () => {\n  const [state, setState] = React.useState<AppState>({\n    dirty: false,\n    transforms: [],\n    baseImage: undefined,\n  });\n\n  if (DEBUG) {\n    (window as any).STATE = state;\n  }\n\n  const computeBtnDisbled =\n    !state.baseImage ||\n    state.transforms.length === 0 ||\n    !state.dirty ||\n    state.transforms.some((t) => {\n      const params = t.transform.params as ParamFunction<any>[];\n      return (\n        params.length > 0 && t.paramsValues.every((p, i) => p.valid === false)\n      );\n    });\n\n  return (\n    <section>\n      <ScopedCssBaseline />\n      <div className=\"container\">\n        <h1 className=\"title\" style={{ paddingTop: '16px' }}>\n          Partymoji\n        </h1>\n        <div>\n          <div className=\"box\">\n            <h3 className=\"title\">Source Image</h3>\n            <ImagePicker\n              name=\"Choose a source image\"\n              currentImageUrl={state.baseImage}\n              onChange={(baseImage) => {\n                setState({\n                  ...state,\n                  baseImage,\n                  dirty: true,\n                });\n              }}\n            />\n          </div>\n          <ImageTransformList\n            currentTransforms={state.transforms}\n            possibleTransforms={POSSIBLE_TRANSFORMS}\n            onTransformsChange={(transforms) =>\n              setState({\n                ...state,\n                dirty: true,\n                transforms,\n              })\n            }\n          />\n          <ComputeBox\n            isDirty={state.dirty}\n            baseImageUrl={state.baseImage}\n            computeDisabled={computeBtnDisbled}\n            transforms={state.transforms}\n            onComputed={() =>\n              setState({\n                ...state,\n                dirty: false,\n              })\n            }\n          />\n          {DEBUG && (\n            <div>\n              <code>{JSON.stringify(state, null, 2)}</code>\n            </div>\n          )}\n          <a\n            href=\"https://github.com/MikeyBurkman/partymoji\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <img\n              src=\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\"\n              width={64}\n              height={64}\n              alt=\"Github Link\"\n            ></img>\n          </a>\n        </div>\n      </div>\n    </section>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}